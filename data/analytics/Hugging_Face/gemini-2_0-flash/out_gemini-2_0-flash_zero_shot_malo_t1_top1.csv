question|context|answer|sql_generado
Show the shop addresses ordered by their opening year.|CREATE TABLE shop (address VARCHAR, open_year VARCHAR)|SELECT address FROM shop ORDER BY open_year|SELECT address FROM shop ORDER BY open_year
What are the average score and average staff number of all shops?|CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)|SELECT AVG(num_of_staff), AVG(score) FROM shop|SELECT avg(score), avg(num_of_staff) FROM shop
Find the id and address of the shops whose score is below the average score.|CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)
Find the address and staff number of the shops that do not have any happy hour.|CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)|SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)|SELECT address, num_of_staff FROM shop EXCEPT SELECT address, num_of_staff FROM happy_hour
What are the id and address of the shops which have a happy hour in May?|CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'|SELECT s.shop_id, s.address FROM shop s JOIN happy_hour h ON s.shop_id = h.shop_id
which shop has happy hour most frequently? List its id and number of happy hours.|CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT shop_id, COUNT(*) AS happy_hour_count FROM happy_hour GROUP BY shop_id ORDER BY happy_hour_count DESC LIMIT 1;
Which month has the most happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1|SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1
Which months have more than 2 happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2
How many albums are there?|CREATE TABLE ALBUM (Id VARCHAR)|SELECT COUNT(*) FROM ALBUM|SELECT count(*) FROM ALBUM
List the names of all music genres.|CREATE TABLE GENRE (Name VARCHAR)|SELECT Name FROM GENRE|SELECT Name FROM GENRE
Find all the customer information in state NY.|CREATE TABLE CUSTOMER (State VARCHAR)|"SELECT * FROM CUSTOMER WHERE State = ""NY"""|SELECT * FROM CUSTOMER WHERE State = 'NY';
What are the first names and last names of the employees who live in Calgary city.|CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)|"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = ""Calgary"""|SELECT FirstName, LastName FROM EMPLOYEE WHERE City = 'Calgary'
What are the distinct billing countries of the invoices?|CREATE TABLE INVOICE (BillingCountry VARCHAR)|SELECT DISTINCT (BillingCountry) FROM INVOICE|SELECT DISTINCT BillingCountry FROM INVOICE
"Find the names of all artists that have ""a"" in their names."|CREATE TABLE ARTIST (Name VARCHAR)|"SELECT Name FROM ARTIST WHERE Name LIKE ""%a%"""|SELECT Name FROM ARTIST WHERE Name LIKE '%a%';
"Find the title of all the albums of the artist ""AC/DC""."|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""AC/DC"""|SELECT ALBUM.Title FROM ALBUM INNER JOIN ARTIST ON ALBUM.ArtistId = ARTIST.ArtistId WHERE ARTIST.Name = 'AC/DC';
"Hom many albums does the artist ""Metallica"" have?"|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""Metallica"""|"SELECT count(*) FROM ALBUM AS A JOIN ARTIST AS AR ON A.ArtistId = AR.ArtistId WHERE AR.Name = ""Metallica"";"
"Which artist does the album ""Balls to the Wall"" belong to?"|CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = ""Balls to the Wall"""|"SELECT T1.Name FROM ARTIST AS T1 JOIN ALBUM AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Title  =  ""Balls to the Wall"""
Which artist has the most albums?|CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1|SELECT ARTIST.Name FROM ARTIST INNER JOIN ALBUM ON ARTIST.ArtistId = ALBUM.ArtistId GROUP BY ARTIST.Name ORDER BY COUNT(ALBUM.ArtistId) DESC LIMIT 1
"Find the names of all the tracks that contain the word ""you""."|CREATE TABLE TRACK (Name VARCHAR)|SELECT Name FROM TRACK WHERE Name LIKE '%you%'|SELECT Name FROM TRACK WHERE Name LIKE '%you%';
What is the average unit price of all the tracks?|CREATE TABLE TRACK (UnitPrice INTEGER)|SELECT AVG(UnitPrice) FROM TRACK|SELECT AVG(UnitPrice) FROM TRACK
What are the durations of the longest and the shortest tracks in milliseconds?|CREATE TABLE TRACK (Milliseconds INTEGER)|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK
Show the album names, ids and the number of tracks for each album.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)|SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID|SELECT ALBUM.Title, ALBUM.AlbumId, COUNT(TRACK.TrackId) AS NumberOfTracks FROM ALBUM JOIN TRACK ON ALBUM.AlbumId = TRACK.AlbumId GROUP BY ALBUM.AlbumId, ALBUM.Title
What is the name of the most common genre in all tracks?|CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)|SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1|SELECT g.Name FROM GENRE g JOIN TRACK t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY COUNT(*) DESC LIMIT 1;
What is the least common media type in all tracks?|CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1|SELECT Name FROM MEDIATYPE WHERE MediaTypeId IN (SELECT MediaTypeId FROM TRACK GROUP BY MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1)
Show the album names and ids for albums that contain tracks with unit price bigger than 1.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)|SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID|SELECT DISTINCT A.Title, A.AlbumId FROM ALBUM A JOIN TRACK T ON A.AlbumId = T.AlbumId WHERE T.UnitPrice > 1
How many tracks belong to rock genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT count(*) FROM TRACK AS T1 INNER JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Rock'
What is the average unit price of tracks that belong to Jazz genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Jazz"""|SELECT AVG(T.UnitPrice) FROM TRACK AS T JOIN GENRE AS G ON T.GenreId = G.GenreId WHERE G.Name = 'Jazz';
"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?"|CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)|"SELECT FirstName, LastName FROM CUSTOMER WHERE Email = ""luisg@embraer.com.br"""|SELECT FirstName, LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br';
"How many customers have email that contains ""gmail.com""?"|CREATE TABLE CUSTOMER (Email VARCHAR)|"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%"""|SELECT count(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%';
What is the first name and last name employee helps the customer with first name Leonie?|CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)|"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = ""Leonie"""|SELECT T1.FirstName, T1.LastName FROM EMPLOYEE AS T1 JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.FirstName = 'Leonie'
What city does the employee who helps the customer with postal code 70174 live in?|CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)|"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = ""70174"""|SELECT T1.City FROM EMPLOYEE AS T1 JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.PostalCode = '70174'
How many distinct cities does the employees live in?|CREATE TABLE EMPLOYEE (city VARCHAR)|SELECT COUNT(DISTINCT city) FROM EMPLOYEE|SELECT count(DISTINCT city) FROM EMPLOYEE
Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.|CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)|"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = ""Astrid"" AND LastName = ""Gruber"""|SELECT T1.InvoiceDate FROM INVOICE AS T1 INNER JOIN CUSTOMER AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.FirstName = 'Astrid'
Find all the customer last names that do not have invoice totals larger than 20.|CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)|SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20|SELECT DISTINCT C.LastName FROM CUSTOMER C WHERE NOT EXISTS (SELECT 1 FROM Invoice I WHERE I.CustomerId = C.CustomerId AND I.total > 20)
Find the first names of all customers that live in Brazil and have an invoice.|CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)|"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Brazil"""|SELECT DISTINCT FirstName FROM CUSTOMER WHERE country = 'Brazil' AND CustomerId IN (SELECT CustomerId FROM INVOICE);
Find the address of all customers that live in Germany and have invoice.|CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)|"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Germany"""|SELECT T1.Address FROM CUSTOMER AS T1 INNER JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'
List the phone numbers of all employees.|CREATE TABLE EMPLOYEE (Phone VARCHAR)|SELECT Phone FROM EMPLOYEE|SELECT Phone FROM EMPLOYEE
How many tracks are in the AAC audio file media type?|CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = ""AAC audio file"""|SELECT count(*) FROM TRACK AS T1 INNER JOIN MEDIATYPE AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T2.Name = 'AAC audio file';
What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Latin"" OR T1.Name = ""Pop"""|SELECT AVG(T.Milliseconds) FROM TRACK T JOIN GENRE G ON T.GenreId = G.GenreId WHERE G.Name IN ('Latin', 'Pop')
Please show the employee first names and ids of employees who serve at least 10 customers.|CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)|SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10|SELECT E.FirstName, E.EmployeeId FROM EMPLOYEE E JOIN CUSTOMER C ON E.EmployeeId = C.SupportRepId GROUP BY E.EmployeeId, E.FirstName HAVING COUNT(C.FirstName) >= 10
Please show the employee last names that serves no more than 20 customers.|CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)|SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20|SELECT T2.LastName FROM EMPLOYEE AS T1 INNER JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId GROUP BY T2.SupportRepId HAVING count(*) <= 20
Please list all album titles in alphabetical order.|CREATE TABLE ALBUM (Title VARCHAR)|SELECT Title FROM ALBUM ORDER BY Title|SELECT Title FROM ALBUM ORDER BY Title ASC
Please list the name and id of all artists that have at least 3 albums in alphabetical order.|CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name|SELECT A.Name, A.ArtistID FROM ARTIST A JOIN ALBUM B ON A.ArtistID = B.ArtistId GROUP BY A.ArtistID, A.Name HAVING COUNT(DISTINCT B.ArtistId) >= 3 ORDER BY A.Name
Find the names of artists that do not have any albums.|CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId|SELECT Name FROM ARTIST EXCEPT SELECT T1.Name FROM ARTIST AS T1 INNER JOIN ALBUM AS T2 ON T1.ArtistId  =  T2.ArtistId
What is the average unit price of rock tracks?|CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)|"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT AVG(T1.UnitPrice) FROM TRACK AS T1 INNER JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Rock'
What are the duration of the longest and shortest pop tracks in milliseconds?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Pop"""|SELECT MAX(duration_ms), MIN(duration_ms) FROM track WHERE GenreId IN (SELECT GenreId FROM genre WHERE Name = 'Pop')
What are the birth dates of employees living in Edmonton?|CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)|"SELECT BirthDate FROM EMPLOYEE WHERE City = ""Edmonton"""|SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'
What are the distinct unit prices of all tracks?|CREATE TABLE TRACK (UnitPrice VARCHAR)|SELECT DISTINCT (UnitPrice) FROM TRACK|SELECT DISTINCT UnitPrice FROM TRACK
How many artists do not have any album?|CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)|SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)|SELECT COUNT(*) FROM ARTIST WHERE NOT EXISTS (SELECT 1 FROM ALBUM WHERE ARTIST.artistid = ALBUM.artistid)
What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?|CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)|SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'|SELECT DISTINCT a.Title FROM Album AS a JOIN Track AS t ON a.AlbumId = t.AlbumId JOIN Genre AS g ON t.GenreID = g.GenreID WHERE g.Name = 'Reggae' INTERSECT SELECT DISTINCT a.Title FROM Album AS a JOIN Track AS t ON a.AlbumId = t.AlbumId JOIN Genre AS g ON t.GenreID = g.GenreID WHERE g.Name = 'Rock'
Find all the phone numbers.|CREATE TABLE available_policies (customer_phone VARCHAR)|SELECT customer_phone FROM available_policies|SELECT customer_phone FROM available_policies
"What are the customer phone numbers under the policy ""Life Insurance""?"|CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)|"SELECT customer_phone FROM available_policies WHERE policy_type_code = ""Life Insurance"""|SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'
Which policy type has the most records in the database?|CREATE TABLE available_policies (policy_type_code VARCHAR)|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1
What are all the customer phone numbers under the most popular policy type?|CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)|SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)|SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)
Find the policy type used by more than 4 customers.|CREATE TABLE available_policies (policy_type_code VARCHAR)|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4
Find the total and average amount of settlements.|CREATE TABLE settlements (settlement_amount INTEGER)|SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements|SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements
Find the name of services that have been used for more than 2 times in first notification of loss.|CREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)|SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2|SELECT T1.service_name FROM services AS T1 JOIN first_notification_of_loss AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_name HAVING count(*)  >  2
What is the effective date of the claim that has the largest amount of total settlement?|CREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)|SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1|SELECT T1.Effective_Date FROM claims AS T1 JOIN settlements AS T2 ON T1.claim_id = T2.claim_id ORDER BY T2.settlement_amount DESC LIMIT 1
"How many policies are listed for the customer named ""Dayana Robel""?"|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)|"SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = ""Dayana Robel"""|SELECT count(*) FROM customers_policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'Dayana Robel')
What is the name of the customer who has the most policies listed?|CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)|SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1|SELECT c.customer_name FROM customers c JOIN customers_policies cp ON c.customer_id = cp.customer_id GROUP BY c.customer_name ORDER BY COUNT(cp.customer_id) DESC LIMIT 1
"What are all the policy types of the customer named ""Dayana Robel""?"|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)|"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ""Dayana Robel"""|SELECT DISTINCT ap.policy_type_code FROM customers c JOIN customers_policies cp ON c.customer_id = cp.customer_id JOIN available_policies ap ON cp.policy_id = ap.policy_id WHERE c.customer_name = 'Dayana Robel';
What are all the policy types of the customer that has the most policies listed?|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)|SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)|SELECT DISTINCT ap.policy_type_code FROM customers_policies cp JOIN (SELECT customer_id FROM customers_policies GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1) AS max_policy_customer ON cp.customer_id = max_policy_customer.customer_id JOIN available_policies ap ON cp.policy_id = ap.policy_id;
List all the services in the alphabetical order.|CREATE TABLE services (service_name VARCHAR)|SELECT service_name FROM services ORDER BY service_name|SELECT service_name FROM services ORDER BY service_name ASC
How many services are there?|CREATE TABLE services (Id VARCHAR)|SELECT COUNT(*) FROM services|SELECT count(*) FROM services
Find the names of users who do not have a first notification of loss record.|CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)|SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id|SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM first_notification_of_loss);
"Find the names of customers who have used either the service ""Close a policy"" or the service ""Upgrade a policy""."|CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)|"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""Close a policy"" OR t3.service_name = ""Upgrade a policy"""|SELECT DISTINCT c.customer_name FROM customers c JOIN first_notification_of_loss f ON c.customer_id = f.customer_id JOIN services s ON f.service_id = s.service_id WHERE s.service_name IN ('Close a policy', 'Upgrade a policy')
"Find the names of customers who have used both the service ""Close a policy"" and the service ""New policy application""."|CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)|"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""Close a policy"" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""New policy application"""|SELECT c.customer_name FROM customers c JOIN first_notification_of_loss fnl ON c.customer_id = fnl.customer_id JOIN services s ON fnl.service_id = s.service_id WHERE s.service_name = 'Close a policy' INTERSECT SELECT c.customer_name FROM customers c JOIN first_notification_of_loss fnl ON c.customer_id = fnl.customer_id JOIN services s ON fnl.service_id = s.service_id WHERE s.service_name = 'New policy application'
"Find the IDs of customers whose name contains ""Diana""."|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)|"SELECT customer_id FROM customers WHERE customer_name LIKE ""%Diana%"""|SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%';
What are the maximum and minimum settlement amount on record?|CREATE TABLE settlements (settlement_amount INTEGER)|SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements|SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements
List all the customers in increasing order of IDs.|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)|SELECT customer_id, customer_name FROM customers ORDER BY customer_id|SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC
"Retrieve the open and close dates of all the policies associated with the customer whose name contains ""Diana"""|CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)|"SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE ""%Diana%"""|SELECT T2.date_opened, T2.date_closed FROM customers AS T1 INNER JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name LIKE '%Diana%';
How many kinds of enzymes are there?|CREATE TABLE enzyme (Id VARCHAR)|SELECT COUNT(*) FROM enzyme|SELECT count(*) FROM enzyme
List the name of enzymes in descending lexicographical order.|CREATE TABLE enzyme (name VARCHAR)|SELECT name FROM enzyme ORDER BY name DESC|SELECT name FROM enzyme ORDER BY name DESC
List the names and the locations that the enzymes can make an effect.|CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)|SELECT name, LOCATION FROM enzyme|SELECT name, LOCATION FROM enzyme
What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?|CREATE TABLE enzyme (OMIM INTEGER)|SELECT MAX(OMIM) FROM enzyme|SELECT max(OMIM) FROM enzyme
What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?|CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)|SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'|SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol';
What are the names of enzymes who does not produce 'Heme'?|CREATE TABLE enzyme (name VARCHAR, product VARCHAR)|SELECT name FROM enzyme WHERE product <> 'Heme'|SELECT name FROM enzyme WHERE product <> 'Heme'
What are the names and trade names of the medicines which has 'Yes' value in the FDA record?|CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)|SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'|SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes';
What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?|CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)|SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'|SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'
What are the ids and names of the medicine that can interact with two or more enzymes?|CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)|SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2|SELECT m.id, m.Name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.Name HAVING COUNT(DISTINCT mei.medicine_id) >= 2
What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.|CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)|SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC|SELECT m.id, m.Name, m.FDA_approved FROM medicine m JOIN (SELECT medicine_id, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY medicine_id) AS interaction_counts ON m.id = interaction_counts.medicine_id ORDER BY interaction_counts.interaction_count DESC;
What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?|CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)|SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1|SELECT T2.id, T2.name FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id  =  T2.id WHERE T1.interaction_type  =  'activator' GROUP BY T1.enzyme_id ORDER BY count(*) DESC LIMIT 1
What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?|CREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)|SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'|SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 INNER JOIN medicine AS T2 ON T1.medicine_id = T2.id INNER JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T2.name = 'Aripiprazole' AND T3.name = 'ALA synthase'
What is the most common interaction type between enzymes and medicine? And how many are there?|CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)|SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1|SELECT interaction_type, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC LIMIT 1;
How many medicines have the FDA approval status 'No' ?|CREATE TABLE medicine (FDA_approved VARCHAR)|SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'|SELECT count(*) FROM medicine WHERE FDA_approved = 'No';
How many enzymes do not have any interactions?|CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)|SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)|SELECT count(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction)
What is the id and trade name of the medicines can interact with at least 3 enzymes?|CREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)|SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3|SELECT m.id, m.trade_name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.trade_name HAVING COUNT(DISTINCT mei.medicine_id) >= 3
What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?|CREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)|SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'|SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 INNER JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'inhibitor'
List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.|CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)|SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'|SELECT m.name, m.trade_name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type = 'inhibitor' INTERSECT SELECT m.name, m.trade_name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type = 'activitor';
Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.|CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)|SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'|SELECT name, trade_name FROM medicine EXCEPT SELECT m.name, m.trade_name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id JOIN enzyme e ON mei.enzyme_id = e.id WHERE e.product = 'Heme';
How many distinct FDA approval statuses are there for the medicines?|CREATE TABLE medicine (FDA_approved VARCHAR)|SELECT COUNT(DISTINCT FDA_approved) FROM medicine|SELECT count(DISTINCT FDA_approved) FROM medicine
"Which enzyme names have the substring ""ALA""?"|CREATE TABLE enzyme (name VARCHAR)|"SELECT name FROM enzyme WHERE name LIKE ""%ALA%"""|SELECT name FROM enzyme WHERE name LIKE '%ALA%';
find the number of medicines offered by each trade.|CREATE TABLE medicine (trade_name VARCHAR)|SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name|SELECT trade_name, COUNT(*) AS number_of_medicines FROM medicine GROUP BY trade_name;
List all schools and their nicknames in the order of founded year.|CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)|SELECT school, nickname FROM university ORDER BY founded|SELECT school, nickname FROM university ORDER BY founded
List all public schools and their locations.|CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)|SELECT school, LOCATION FROM university WHERE affiliation = 'Public'|SELECT school, location FROM university WHERE affiliation = 'Public';
When was the school with the largest enrollment founded?|CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)|SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1|SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1
Find the founded year of the newest non public school.|CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)|SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1|SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1
How many schools are in the basketball match?|CREATE TABLE basketball_match (school_id VARCHAR)|SELECT COUNT(DISTINCT school_id) FROM basketball_match|SELECT count(*) FROM basketball_match
What is the highest acc percent score in the competition?|CREATE TABLE basketball_match (acc_percent VARCHAR)|SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1|SELECT MAX(acc_percent) FROM basketball_match
What is the primary conference of the school that has the lowest acc percent score in the competition?|CREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)|SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1|SELECT T2.Primary_conference FROM basketball_match AS T1 JOIN university AS T2 ON T1.school_id = T2.school_id ORDER BY T1.acc_percent ASC LIMIT 1
What is the team name and acc regular season score of the school that was founded for the longest time?|CREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)|SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1|SELECT T1.team_name, T1.ACC_Regular_Season FROM basketball_match AS T1 JOIN university AS T2 ON T1.school_id  =  T2.school_id ORDER BY T2.founded LIMIT 1
Find the location and all games score of the school that has Clemson as its team name.|CREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)|SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'|SELECT T1.location, T2.All_Games FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id WHERE T1.school_id = 'Clemson'
What are the average enrollment size of the universities that are founded before 1850?|CREATE TABLE university (enrollment INTEGER, founded INTEGER)|SELECT AVG(enrollment) FROM university WHERE founded < 1850|SELECT avg(enrollment) FROM university WHERE founded < 1850
Show the enrollment and primary_conference of the oldest college.|CREATE TABLE university (enrollment VARCHAR, primary_conference VARCHAR, founded VARCHAR)|SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1|SELECT enrollment, primary_conference FROM university ORDER BY founded ASC LIMIT 1
What is the total and minimum enrollment of all schools?|CREATE TABLE university (enrollment INTEGER)|SELECT SUM(enrollment), MIN(enrollment) FROM university|SELECT count(*), min(enrollment) FROM university
Find the total student enrollment for different affiliation type schools.|CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)|SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation|SELECT affiliation, SUM(enrollment) AS total_enrollment FROM university GROUP BY affiliation
How many schools do not participate in the basketball match?|CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)|SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)|SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);
Find the schools that were either founded after 1850 or public.|CREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)|SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'|SELECT school FROM university WHERE founded > '1850' OR affiliation = 'Public'
Find how many different affiliation types there are.|CREATE TABLE university (affiliation VARCHAR)|SELECT COUNT(DISTINCT affiliation) FROM university|SELECT count(DISTINCT affiliation) FROM university
Find how many school locations have the word 'NY'.|CREATE TABLE university (LOCATION VARCHAR)|"SELECT COUNT(*) FROM university WHERE LOCATION LIKE ""%NY%"""|SELECT count(*) FROM university WHERE LOCATION LIKE '%NY%';
Find the team names of the universities whose enrollments are smaller than the average enrollment size.|CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)|SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)|SELECT T1.team_name FROM basketball_match AS T1 JOIN university AS T2 ON T1.school_id  =  T2.school_id WHERE T2.enrollment  <  (SELECT avg(enrollment) FROM university)
Find the number of universities that have over a 20000 enrollment size for each affiliation type.|CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)|SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation|SELECT affiliation, COUNT(*) FROM university WHERE enrollment > 20000 GROUP BY affiliation
Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.|CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)|SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation|SELECT affiliation, SUM(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation
What is the maximum enrollment across all schools?|CREATE TABLE university (Enrollment INTEGER)|SELECT MAX(Enrollment) FROM university|SELECT MAX(Enrollment) FROM university
List all information regarding the basketball match.|CREATE TABLE basketball_match (Id VARCHAR)|SELECT * FROM basketball_match|SELECT * FROM basketball_match
List names of all teams in the basketball competition, ordered by all home scores in descending order.|CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)|SELECT team_name FROM basketball_match ORDER BY All_Home DESC|SELECT team_name FROM basketball_match ORDER BY All_Home DESC
the names of models that launched between 2002 and 2004.|CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)|SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004|SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004
Which model has the least amount of RAM? List the model name and the amount of RAM.|CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)|SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1|SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1
"What are the chip model and screen mode of the phone with hardware model name ""LG-P760""?"|CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)|"SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = ""LG-P760"""|SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = 'LG-P760';
"How many phone hardware models are produced by the company named ""Nokia Corporation""?"|CREATE TABLE phone (Company_name VARCHAR)|"SELECT COUNT(*) FROM phone WHERE Company_name = ""Nokia Corporation"""|SELECT count(*) FROM phone WHERE Company_name = 'Nokia Corporation'
"What is maximum and minimum RAM size of phone produced by company named ""Nokia Corporation""?"|CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)|"SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = ""Nokia Corporation"""|SELECT max(T1.RAM_MiB), min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name  =  'Nokia Corporation'
"What is the average ROM size of phones produced by the company named ""Nokia Corporation""?"|CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)|"SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = ""Nokia Corporation"""|"SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name  =  ""Nokia Corporation"""
List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.|CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)|SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32|SELECT Hardware_Model_name, Company_name FROM phone WHERE chip_model IN (SELECT Model_name FROM chip_model WHERE Launch_year = '2002' OR CAST(RAM_MiB AS INTEGER) > 32)
Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.|CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)|SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'|SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE '%Full%';
"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760""."|CREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)|"SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = ""LG-P760"""|SELECT T2.Char_cells, T2.Pixels, T2.Hardware_colours FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T1.Hardware_Model_name = 'LG-P760'
"List the hardware model name and company name for the phone whose screen mode type is ""Graphics."""|CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)|"SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = ""Graphics"""|SELECT Hardware_Model_name, Company_name FROM phone WHERE screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Graphics')
Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.|CREATE TABLE phone (Company_name VARCHAR)|SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1|SELECT Company_name, COUNT(*) AS num_models FROM phone GROUP BY Company_name ORDER BY num_models ASC LIMIT 1
List the name of the company that produced more than one phone model.|CREATE TABLE phone (Company_name VARCHAR)|SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1|SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1
List the maximum, minimum and average number of used kb in screen mode.|CREATE TABLE screen_mode (used_kb INTEGER)|SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode|SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode
List the name of the phone model launched in year 2002 and with the highest RAM size.|CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)|SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1|SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name WHERE T2.Launch_year = '2002' ORDER BY T2.RAM_MiB DESC LIMIT 1
"What are the wifi and screen mode type of the hardware model named ""LG-P760""?"|CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)|"SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = ""LG-P760"""|"SELECT T2.WiFi, T1.Type FROM screen_mode AS T1 JOIN chip_model AS T2 JOIN phone AS T3 ON T3.chip_model = T2.Model_name AND T1.Graphics_mode = T3.screen_mode WHERE T3.Hardware_Model_name = ""LG-P760"""
"List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32."|CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)|"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = ""Text"" OR T1.RAM_MiB > 32"|SELECT DISTINCT T1.Hardware_Model_name FROM phone AS T1 INNER JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name INNER JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T3.Type = 'Text' OR CAST(T2.RAM_MiB AS INTEGER) > 32
"List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics."""|CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)|"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = ""Graphics"" OR t2.Company_name = ""Nokia Corporation"""|SELECT Hardware_Model_name FROM phone WHERE Hardware_Model_name LIKE '%Nokia Corporation%' UNION SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type = 'Graphics'
"List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text."|CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)|"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = ""Nokia Corporation"" AND T1.Type <> ""Text"""|SELECT DISTINCT T1.Hardware_Model_name FROM phone AS T1 INNER JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type != 'Text'
List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.|CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)|SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15|SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 INNER JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.used_kb BETWEEN 10 AND 15
Find the number of phones for each accreditation type.|CREATE TABLE phone (Accreditation_type VARCHAR)|SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type|SELECT Accreditation_type, count(*) FROM phone GROUP BY Accreditation_type
Find the accreditation level that more than 3 phones use.|CREATE TABLE phone (Accreditation_level VARCHAR)|SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3|SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3
Find the details for all chip models.|CREATE TABLE chip_model (Id VARCHAR)|SELECT * FROM chip_model|SELECT Id FROM chip_model
How many models do not have the wifi function?|CREATE TABLE chip_model (wifi VARCHAR)|SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'|SELECT count(*) FROM chip_model WHERE wifi IS NULL OR wifi = 'N' OR wifi = 'No' OR wifi = 'False';
List all the model names sorted by their launch year.|CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)|SELECT model_name FROM chip_model ORDER BY launch_year|SELECT model_name FROM chip_model ORDER BY launch_year
Find the average ram mib size of the chip models that are never used by any phone.|CREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)|SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone)|SELECT AVG(RAM_MiB) FROM chip_model WHERE chip_model NOT IN (SELECT chip_model FROM phone)
Find the names of the chip models that are not used by any phone with full accreditation type.|CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)|SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'|SELECT DISTINCT chip_model FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'
Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.|CREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)|SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'|SELECT T2.pixels FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T1.Accreditation_type = 'Full' INTERSECT SELECT T2.pixels FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T1.Accreditation_type = 'Provisional'
How many countries are there in total?|CREATE TABLE country (Id VARCHAR)|SELECT COUNT(*) FROM country|SELECT count(*) FROM country
Show the country name and capital of all countries.|CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)|SELECT Country_name, Capital FROM country|SELECT Country_name, Capital FROM country
"Show all official native languages that contain the word ""English""."|CREATE TABLE country (Official_native_language VARCHAR)|"SELECT Official_native_language FROM country WHERE Official_native_language LIKE ""%English%"""|SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%';
Show all distinct positions of matches.|CREATE TABLE match_season (POSITION VARCHAR)|SELECT DISTINCT POSITION FROM match_season|SELECT DISTINCT POSITION FROM match_season
Show the players from college UCLA.|CREATE TABLE match_season (Player VARCHAR, College VARCHAR)|"SELECT Player FROM match_season WHERE College = ""UCLA"""|SELECT Player FROM match_season WHERE College = 'UCLA'
Show the distinct position of players from college UCLA or Duke.|CREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)|"SELECT DISTINCT POSITION FROM match_season WHERE College = ""UCLA"" OR College = ""Duke"""|SELECT DISTINCT position FROM match_season WHERE College IN ('UCLA', 'Duke')
Show the draft pick numbers and draft classes of players whose positions are defenders.|CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)|"SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = ""Defender"""|SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = 'defender'
How many distinct teams are involved in match seasons?|CREATE TABLE match_season (Team VARCHAR)|SELECT COUNT(DISTINCT Team) FROM match_season|SELECT count(DISTINCT Team) FROM match_season
Show the players and the years played.|CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)|SELECT Player, Years_Played FROM player|SELECT Player, Years_Played FROM player
Show all team names.|CREATE TABLE Team (Name VARCHAR)|SELECT Name FROM Team|SELECT Name FROM Team
Show the season, the player, and the name of the country that player belongs to.|CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)|SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country|"SELECT
  ms.Season,
  ms.Player,
  c.Country_name
FROM match_season AS ms
JOIN country AS c
  ON ms.Country = c.Country_id;"
Which players are from Indonesia?|CREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)|"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = ""Indonesia"""|SELECT Player FROM match_season WHERE Country = 'Indonesia';
What are the distinct positions of the players from a country whose capital is Dublin?|CREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)|"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = ""Dublin"""|SELECT DISTINCT T1.Position FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id WHERE T2.Capital = 'Dublin'
What are the official languages of the countries of players from Maryland or Duke college?|CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)|"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = ""Maryland"" OR T2.College = ""Duke"""|SELECT DISTINCT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'
How many distinct official languages are there among countries of players whose positions are defenders.|CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)|"SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Defender"""|SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'defender'
Show the season, the player, and the name of the team that players belong to.|CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)|SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id|SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
"Show the positions of the players from the team with name ""Ryley Goldner""."|CREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)|"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Ryley Goldner"""|SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Ryley Goldner'
"How many distinct colleges are associated with players from the team with name ""Columbus Crew""."|CREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)|"SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Columbus Crew"""|"SELECT count(DISTINCT College) FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = ""Columbus Crew"")"
"Show the players and years played for players from team ""Columbus Crew""."|CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)|"SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Columbus Crew"""|SELECT p.Player, p.Years_Played FROM player p JOIN team t ON p.Team = t.Team_id WHERE t.Name = 'Columbus Crew';
Show the position of players and the corresponding number of players.|CREATE TABLE match_season (POSITION VARCHAR)|SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION|SELECT POSITION, COUNT(*) AS NumberOfPlayers FROM match_season GROUP BY POSITION
Show the country names and the corresponding number of players.|CREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)|SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name|SELECT T1.Country_name, count(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_name = T2.Country GROUP BY T1.Country_name
Return all players sorted by college in ascending alphabetical order.|CREATE TABLE match_season (player VARCHAR, College VARCHAR)|SELECT player FROM match_season ORDER BY College|SELECT player FROM match_season ORDER BY College ASC
Show the most common position of players in match seasons.|CREATE TABLE match_season (POSITION VARCHAR)|SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1|SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1
Show the top 3 most common colleges of players in match seasons.|CREATE TABLE match_season (College VARCHAR)|SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3|SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3
Show the name of colleges that have at least two players.|CREATE TABLE match_season (College VARCHAR)|SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2|SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2
Show the name of colleges that have at least two players in descending alphabetical order.|CREATE TABLE match_season (College VARCHAR)|SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC|SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC
What are the names of teams that do no have match season record?|CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)|SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)|SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team_id FROM match_season);
What are the names of countries that have both players with position forward and players with position defender?|CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)|"SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Forward"" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Defender"""|SELECT DISTINCT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_name  =  T2.Country WHERE T2.Position  =  'forward' INTERSECT SELECT DISTINCT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_name  =  T2.Country WHERE T2.Position  =  'defender'
Which college have both players with position midfielder and players with position defender?|CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)|"SELECT College FROM match_season WHERE POSITION = ""Midfielder"" INTERSECT SELECT College FROM match_season WHERE POSITION = ""Defender"""|SELECT College FROM match_season WHERE POSITION = 'midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION = 'defender'
How many climbers are there?|CREATE TABLE climber (Id VARCHAR)|SELECT COUNT(*) FROM climber|SELECT count(*) FROM climber
List the names of climbers in descending order of points.|CREATE TABLE climber (Name VARCHAR, Points VARCHAR)|SELECT Name FROM climber ORDER BY Points DESC|SELECT Name FROM climber ORDER BY Points DESC
List the names of climbers whose country is not Switzerland.|CREATE TABLE climber (Name VARCHAR, Country VARCHAR)|"SELECT Name FROM climber WHERE Country <> ""Switzerland"""|SELECT Name FROM climber WHERE Country <> 'Switzerland'
What is the maximum point for climbers whose country is United Kingdom?|CREATE TABLE climber (Points INTEGER, Country VARCHAR)|"SELECT MAX(Points) FROM climber WHERE Country = ""United Kingdom"""|SELECT max(Points) FROM climber WHERE Country = 'United Kingdom'
How many distinct countries are the climbers from?|CREATE TABLE climber (Country VARCHAR)|SELECT COUNT(DISTINCT Country) FROM climber|SELECT count(DISTINCT Country) FROM climber
What are the names of mountains in ascending alphabetical order?|CREATE TABLE mountain (Name VARCHAR)|SELECT Name FROM mountain ORDER BY Name|SELECT Name FROM mountain ORDER BY Name ASC
What are the countries of mountains with height bigger than 5000?|CREATE TABLE mountain (Country VARCHAR, Height INTEGER)|SELECT Country FROM mountain WHERE Height > 5000|SELECT Country FROM mountain WHERE Height > 5000
What is the name of the highest mountain?|CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)|SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1|SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1
List the distinct ranges of the mountains with the top 3 prominence.|CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)|SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3|SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3
Show names of climbers and the names of mountains they climb.|CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)|SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID|SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID
Show the names of climbers and the heights of mountains they climb.|CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)|SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID|SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Show the height of the mountain climbed by the climber with the maximum points.|CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)|SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1|SELECT T1.Height FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Points DESC LIMIT 1
"Show the distinct names of mountains climbed by climbers from country ""West Germany""."|CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)|"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = ""West Germany"""|SELECT DISTINCT m.Name FROM mountain AS m JOIN climber AS c ON m.Mountain_ID = c.Mountain_ID WHERE c.Country = 'West Germany'
Show the times used by climbers to climb mountains in Country Uganda.|CREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)|"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = ""Uganda"""|SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = 'Uganda'
Please show the countries and the number of climbers from each country.|CREATE TABLE climber (Country VARCHAR)|SELECT Country, COUNT(*) FROM climber GROUP BY Country|SELECT Country, COUNT(*) AS NumberOfClimbers FROM climber GROUP BY Country;
List the countries that have more than one mountain.|CREATE TABLE mountain (Country VARCHAR)|SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1|SELECT Country FROM mountain GROUP BY Country HAVING count(*) > 1
List the names of mountains that do not have any climber.|CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)|SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)|SELECT Name FROM mountain EXCEPT SELECT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.|CREATE TABLE mountain (Country VARCHAR, Height INTEGER)|SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200|SELECT DISTINCT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT DISTINCT Country FROM mountain WHERE Height < 5200
Show the range that has the most number of mountains.|CREATE TABLE mountain (Range VARCHAR)|SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1|SELECT Range FROM mountain GROUP BY Range ORDER BY count(*) DESC LIMIT 1
Show the names of mountains with height more than 5000 or prominence more than 1000.|CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)|SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000|SELECT Name FROM mountain WHERE Height > '5000' OR Prominence > '1000';
How many body builders are there?|CREATE TABLE body_builder (Id VARCHAR)|SELECT COUNT(*) FROM body_builder|SELECT count(*) FROM body_builder
List the total scores of body builders in ascending order.|CREATE TABLE body_builder (Total VARCHAR)|SELECT Total FROM body_builder ORDER BY Total|SELECT Total FROM body_builder ORDER BY Total ASC
List the snatch score and clean jerk score of body builders in ascending order of snatch score.|CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)|SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch|SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC
What is the average snatch score of body builders?|CREATE TABLE body_builder (Snatch INTEGER)|SELECT AVG(Snatch) FROM body_builder|SELECT avg(Snatch) FROM body_builder
What are the clean and jerk score of the body builder with the highest total score?|CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)|SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1|SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1
What are the birthdays of people in ascending order of height?|CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)|SELECT Birth_Date FROM People ORDER BY Height|SELECT Birth_Date FROM People ORDER BY Height ASC
What are the names of body builders?|CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)|SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID|SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID
What are the names of body builders whose total score is higher than 300?|CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)|SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300|SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Total  >  300
What is the name of the body builder with the greatest body weight?|CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)|SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1|SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1
What are the birth date and birth place of the body builder with the highest total points?|CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)|SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1|SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1
What are the heights of body builders with total score smaller than 315?|CREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)|SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315|SELECT T1.Height FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total < 315
What is the average total score of body builders with height bigger than 200?|CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)|SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200|SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200
What are the names of body builders in descending order of total scores?|CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)|SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC|SELECT t1.Name FROM people AS t1 JOIN body_builder AS t2 ON t1.People_ID  =  t2.People_ID ORDER BY t2.Total DESC
List each birth place along with the number of people from there.|CREATE TABLE people (Birth_Place VARCHAR)|SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place|SELECT Birth_Place, COUNT(*) AS NumberOfPeople FROM people GROUP BY Birth_Place
What is the most common birth place of people?|CREATE TABLE people (Birth_Place VARCHAR)|SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1|SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1
What are the birth places that are shared by at least two people?|CREATE TABLE people (Birth_Place VARCHAR)|SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2|SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2
List the height and weight of people in descending order of height.|CREATE TABLE people (Height VARCHAR, Weight VARCHAR)|SELECT Height, Weight FROM people ORDER BY Height DESC|SELECT Height, Weight FROM people ORDER BY Height DESC
Show all information about each body builder.|CREATE TABLE body_builder (Id VARCHAR)|SELECT * FROM body_builder|SELECT * FROM body_builder
List the names and origins of people who are not body builders.|CREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)|SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id|SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id
How many distinct birth places are there?|CREATE TABLE people (Birth_Place VARCHAR)|SELECT COUNT(DISTINCT Birth_Place) FROM people|SELECT count(DISTINCT Birth_Place) FROM people
How many persons are not body builders?|CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)|SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)|SELECT count(*) FROM people WHERE People_ID NOT IN (SELECT People_ID FROM body_builder)
List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.|CREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)|SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200|SELECT T1.weight FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id WHERE T2.snatch  >  140 OR T1.height  >  200
"What are the total scores of the body builders whose birthday contains the string ""January"" ?"|CREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)|"SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE ""%January%"""|SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE '%January%';
What is the minimum snatch score?|CREATE TABLE body_builder (snatch INTEGER)|SELECT MIN(snatch) FROM body_builder|SELECT min(snatch) FROM body_builder
How many elections are there?|CREATE TABLE election (Id VARCHAR)|SELECT COUNT(*) FROM election|SELECT count(*) FROM election
List the votes of elections in descending order.|CREATE TABLE election (Votes VARCHAR)|SELECT Votes FROM election ORDER BY Votes DESC|SELECT Votes FROM election ORDER BY Votes DESC;
List the dates and vote percents of elections.|CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)|SELECT Date, Vote_Percent FROM election|SELECT Date, Vote_Percent FROM election
What are the minimum and maximum vote percents of elections?|CREATE TABLE election (Vote_Percent INTEGER)|SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election|SELECT min(Vote_Percent), max(Vote_Percent) FROM election
What are the names and parties of representatives?|CREATE TABLE representative (Name VARCHAR, Party VARCHAR)|SELECT Name, Party FROM representative|SELECT Name, Party FROM representative
"What are the names of representatives whose party is not ""Republican""?"|CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)|"SELECT Name FROM Representative WHERE Party <> ""Republican"""|SELECT Name FROM Representative WHERE Party <> 'Republican';
What are the life spans of representatives from New York state or Indiana state?|CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)|"SELECT Lifespan FROM representative WHERE State = ""New York"" OR State = ""Indiana"""|SELECT Lifespan FROM representative WHERE State IN ('New York', 'Indiana')
What are the names of representatives and the dates of elections they participated in.|CREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)|SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID|SELECT r.Name, e.Date FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID
What are the names of representatives with more than 10000 votes in election?|CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)|SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000|SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.votes  >  10000
What are the names of representatives in descending order of votes?|CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)|SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC|SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID  =  T2.Representative_ID GROUP BY T1.Name ORDER BY count(*) DESC
What is the party of the representative that has the smallest number of votes.|CREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)|SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes LIMIT 1|SELECT Party FROM representative WHERE Representative_ID IN (SELECT Representative_ID FROM election LIMIT 1)
What are the lifespans of representatives in descending order of vote percent?|CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)|SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC|SELECT T1.Lifespan FROM representative AS T1 INNER JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY T2.Representative_ID DESC
"What is the average number of votes of representatives from party ""Republican""?"|CREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)|"SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = ""Republican"""|SELECT avg(T1.Votes) FROM election AS T1 INNER JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  'Republican'
What are the different parties of representative? Show the party name and the number of representatives in each party.|CREATE TABLE representative (Party VARCHAR)|SELECT Party, COUNT(*) FROM representative GROUP BY Party|SELECT Party, COUNT(*) AS NumberOfRepresentatives FROM representative GROUP BY Party
What is the party that has the largest number of representatives?|CREATE TABLE representative (Party VARCHAR)|SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1|SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1
What parties have at least three representatives?|CREATE TABLE representative (Party VARCHAR)|SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3|SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3
What states have at least two representatives?|CREATE TABLE representative (State VARCHAR)|SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2|SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2
List the names of representatives that have not participated in elections listed here.|CREATE TABLE election (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)|SELECT Name FROM representative WHERE NOT Representative_ID IN (SELECT Representative_ID FROM election)|SELECT Name FROM representative EXCEPT SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID  =  T2.Representative_ID
Show the parties that have both representatives in New York state and representatives in Pennsylvania state.|CREATE TABLE representative (Party VARCHAR, State VARCHAR)|"SELECT Party FROM representative WHERE State = ""New York"" INTERSECT SELECT Party FROM representative WHERE State = ""Pennsylvania"""|SELECT Party FROM representative WHERE State = 'New York' INTERSECT SELECT Party FROM representative WHERE State = 'Pennsylvania';
How many distinct parties are there for representatives?|CREATE TABLE representative (Party VARCHAR)|SELECT COUNT(DISTINCT Party) FROM representative|SELECT count(DISTINCT Party) FROM representative
How many apartment bookings are there in total?|CREATE TABLE Apartment_Bookings (Id VARCHAR)|SELECT COUNT(*) FROM Apartment_Bookings|SELECT count(*) FROM Apartment_Bookings
Show the start dates and end dates of all the apartment bookings.|CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)|SELECT booking_start_date, booking_end_date FROM Apartment_Bookings|SELECT booking_start_date, booking_end_date FROM Apartment_Bookings
Show all distinct building descriptions.|CREATE TABLE Apartment_Buildings (building_description VARCHAR)|SELECT DISTINCT building_description FROM Apartment_Buildings|SELECT DISTINCT building_description FROM Apartment_Buildings
"Show the short names of the buildings managed by ""Emma""."|CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)|"SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = ""Emma"""|SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'
How many heads of the departments are older than 56 ?|CREATE TABLE head (age INTEGER)|SELECT COUNT(*) FROM head WHERE age > 56|SELECT count(*) FROM head WHERE age > 56
List the name, born state and age of the heads of departments ordered by age.|CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)|SELECT name, born_state, age FROM head ORDER BY age|SELECT name, born_state, age FROM head ORDER BY age
List the creation year, name and budget of each department.|CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)|SELECT creation, name, budget_in_billions FROM department|SELECT creation, name, budget_in_billions FROM department
What are the maximum and minimum budget of the departments?|CREATE TABLE department (budget_in_billions INTEGER)|SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department|SELECT max(budget_in_billions), min(budget_in_billions) FROM department
What is the average number of employees of the departments whose rank is between 10 and 15?|CREATE TABLE department (num_employees INTEGER, ranking INTEGER)|SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15|SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15
What are the names of the heads who are born outside the California state?|CREATE TABLE head (name VARCHAR, born_state VARCHAR)|SELECT name FROM head WHERE born_state <> 'California'|SELECT name FROM head WHERE born_state != 'California'
What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?|CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)|SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'|SELECT DISTINCT d.creation FROM department AS d JOIN management AS m ON d.department_id = m.department_id JOIN head AS h ON m.head_id = h.head_id WHERE h.born_state = 'Alabama'
What are the names of the states where at least 3 heads were born?|CREATE TABLE head (born_state VARCHAR)|SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3|SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3
In which year were most departments established?|CREATE TABLE department (creation VARCHAR)|SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1|SELECT SUBSTR(creation, 1, 4) AS establishment_year FROM department GROUP BY establishment_year ORDER BY COUNT(*) DESC LIMIT 1
Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?|CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)|SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'|SELECT d.name, d.num_employees FROM department d JOIN management m ON d.department_id = m.department_id WHERE m.temporary_acting = 'Yes';
How many acting statuses are there?|CREATE TABLE management (temporary_acting VARCHAR)|SELECT COUNT(DISTINCT temporary_acting) FROM management|SELECT count(DISTINCT temporary_acting) FROM management
How many departments are led by heads who are not mentioned?|CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)|SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)|SELECT count(*) FROM management WHERE department_id NOT IN (SELECT department_id FROM department)
What are the distinct ages of the heads who are acting?|CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)|SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'|SELECT DISTINCT h.age FROM head h JOIN management m ON h.head_id = m.head_id WHERE m.temporary_acting = 'TRUE'
List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.|CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)|SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'|SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Treasury' INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Homeland Security'
Which department has more than 1 head at a time? List the id, name and the number of heads.|CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)|SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1|SELECT d.department_id, d.name, COUNT(m.department_id) AS num_heads FROM department d JOIN management m ON d.department_id = m.department_id GROUP BY d.department_id, d.name HAVING COUNT(m.department_id) > 1
Which head's name has the substring 'Ha'? List the id and name.|CREATE TABLE head (head_id VARCHAR, name VARCHAR)|SELECT head_id, name FROM head WHERE name LIKE '%Ha%'|SELECT head_id, name FROM head WHERE name LIKE '%Ha%';
How many farms are there?|CREATE TABLE farm (Id VARCHAR)|SELECT COUNT(*) FROM farm|SELECT count(*) FROM farm
List the total number of horses on farms in ascending order.|CREATE TABLE farm (Total_Horses VARCHAR)|SELECT Total_Horses FROM farm ORDER BY Total_Horses|SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC
"What are the hosts of competitions whose theme is not ""Aliens""?"|CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)|SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'|SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'
What are the themes of farm competitions sorted by year in ascending order?|CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)|SELECT Theme FROM farm_competition ORDER BY YEAR|SELECT Theme FROM farm_competition ORDER BY YEAR ASC
What is the average number of working horses of farms with more than 5000 total number of horses?|CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)|SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000|SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000
What are the maximum and minimum number of cows across all farms.|CREATE TABLE farm (Cows INTEGER)|SELECT MAX(Cows), MIN(Cows) FROM farm|SELECT MAX(Cows), MIN(Cows) FROM farm
How many different statuses do cities have?|CREATE TABLE city (Status VARCHAR)|SELECT COUNT(DISTINCT Status) FROM city|SELECT count(DISTINCT Status) FROM city
List official names of cities in descending order of population.|CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)|SELECT Official_Name FROM city ORDER BY Population DESC|SELECT Official_Name FROM city ORDER BY Population DESC
List the official name and status of the city with the largest population.|CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)|SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1|SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1
Show the years and the official names of the host cities of competitions.|CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)|SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID|SELECT t1.Year, t2.Official_Name FROM farm_competition AS t1 JOIN city AS t2 ON t1.Host_city_ID  =  t2.City_ID
Show the official names of the cities that have hosted more than one competition.|CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)|SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1|SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T1.City_ID HAVING count(*)  >  1
Show the status of the city that has hosted the greatest number of competitions.|CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)|SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1|SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T1.City_ID ORDER BY count(*) DESC LIMIT 1
Please show the themes of competitions with host cities having populations larger than 1000.|CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)|SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000|SELECT DISTINCT T1.Theme FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID  =  T2.City_ID WHERE T2.Population  >  1000
Please show the different statuses of cities and the average population of cities with each status.|CREATE TABLE city (Status VARCHAR, Population INTEGER)|SELECT Status, AVG(Population) FROM city GROUP BY Status|SELECT Status, AVG(Population) FROM city GROUP BY Status
Please show the different statuses, ordered by the number of cities that have each.|CREATE TABLE city (Status VARCHAR)|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC
List the most common type of Status across cities.|CREATE TABLE city (Status VARCHAR)|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1
List the official names of cities that have not held any competition.|CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)|SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)|SELECT Official_Name FROM city EXCEPT SELECT Host_city_ID FROM farm_competition
Show the status shared by cities with population bigger than 1500 and smaller than 500.|CREATE TABLE city (Status VARCHAR, Population INTEGER)|SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500|SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500
Find the official names of cities with population bigger than 1500 or smaller than 500.|CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)|SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500|SELECT Official_Name FROM city WHERE Population > '1500' OR Population < '500'
"Show the census ranking of cities whose status are not ""Village""."|CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)|"SELECT Census_Ranking FROM city WHERE Status <> ""Village"""|SELECT Census_Ranking FROM city WHERE Status <> 'Village'
which course has most number of registered students?|CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)|SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT course_name FROM courses WHERE course_id IN (SELECT course_Id FROM student_course_registrations GROUP BY course_Id ORDER BY count(*) DESC LIMIT 1);
what is id of students who registered some courses but the least number of courses in these students?|CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1|SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) ASC LIMIT 1
what are the first name and last name of all candidates?|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)|SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id|SELECT T1.first_name, T1.last_name FROM people AS T1 INNER JOIN candidates AS T2 ON T1.person_id = T2.candidate_id
List the id of students who never attends courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)|SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)|SELECT student_id FROM students EXCEPT SELECT student_id FROM student_course_attendance
List the id of students who attended some courses?|CREATE TABLE student_course_attendance (student_id VARCHAR)|SELECT student_id FROM student_course_attendance|SELECT DISTINCT student_id FROM student_course_attendance
What are the ids of all students for courses and what are the names of those courses?|CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)|SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id|SELECT scr.student_id, c.course_name FROM student_course_registrations scr JOIN courses c ON scr.course_id = c.course_id
What is detail of the student who most recently registered course?|CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)|SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1|SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.registration_date DESC LIMIT 1
How many students attend course English?|CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English"""|SELECT count(*) FROM student_course_attendance AS t1 JOIN Courses AS t2 ON t1.course_id = t2.course_id WHERE t2.course_name = 'English'
How many courses do the student whose id is 171 attend?|CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)|SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171|SELECT COUNT(DISTINCT course_id) FROM student_course_attendance WHERE student_id = '171';
Find id of the candidate whose email is stanley.monahan@example.org?|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)|"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org"""|SELECT T1.candidate_id FROM candidates AS T1 INNER JOIN people AS T2 ON T1.candidate_id = T2.person_id WHERE T2.email_address = 'stanley.monahan@example.org'
Find id of the candidate who most recently accessed the course?|CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)|SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1|SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
What is detail of the student who registered the most number of courses?|CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
List the id of students who registered some courses and the number of their registered courses?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id|SELECT student_id, COUNT(*) AS num_registered_courses FROM student_course_registrations GROUP BY student_id
How many registed students do each course have? List course name and the number of their registered students?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)|SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id|SELECT c.course_name, COUNT(scr.student_id) AS num_registered_students FROM courses c JOIN student_course_registrations scr ON c.course_id = scr.course_id GROUP BY c.course_name
"Find id of candidates whose assessment code is ""Pass""?"|CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)|"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass"""|SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass';
"Find the cell mobile number of the candidates whose assessment code is ""Fail""?"|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)|"SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = ""Fail"""|SELECT T1.cell_mobile_number FROM people AS T1 INNER JOIN candidates AS T2 ON T1.person_id = T2.candidate_id INNER JOIN candidate_assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.asessment_outcome_code = 'Fail'
What are the id of students who registered course 301?|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)|SELECT student_id FROM student_course_attendance WHERE course_id = 301|SELECT student_id FROM student_course_attendance WHERE course_id = '301';
What is the id of the student who most recently registered course 301?|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)|SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1|SELECT student_id FROM student_course_attendance WHERE course_id = '301' ORDER BY date_of_attendance DESC LIMIT 1
Find distinct cities of addresses of people?|CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id
Find distinct cities of address of students?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id
List the names of courses in alphabetical order?|CREATE TABLE courses (course_name VARCHAR)|SELECT course_name FROM courses ORDER BY course_name|SELECT course_name FROM courses ORDER BY course_name ASC;
List the first names of people in alphabetical order?|CREATE TABLE people (first_name VARCHAR)|SELECT first_name FROM people ORDER BY first_name|SELECT first_name FROM people ORDER BY first_name ASC;
What are the id of students who registered courses or attended courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance|SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance
Find the id of courses which are registered or attended by student whose id is 121?|CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)|SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121|SELECT course_id FROM student_course_registrations WHERE student_id = '121' UNION SELECT course_id FROM student_course_attendance WHERE student_id = '121'
What are all info of students who registered courses but not attended courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)|SELECT DISTINCT r.student_id FROM student_course_registrations r WHERE NOT EXISTS (SELECT 1 FROM student_course_attendance a WHERE r.student_id = a.student_id)
List the id of students who registered course statistics in the order of registration date.|CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date"|SELECT student_id FROM student_course_registrations WHERE course_id = 'statistics' ORDER BY registration_date
List the id of students who attended  statistics courses in the order of attendance date.|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.date_of_attendance"|SELECT DISTINCT sca.student_id FROM student_course_attendance sca JOIN courses c ON sca.course_id = c.course_id WHERE c.course_name = 'Statistics' ORDER BY sca.date_of_attendance
Give me the dates when the max temperature was higher than 85.|CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)|SELECT date FROM weather WHERE max_temperature_f > 85|SELECT date FROM weather WHERE max_temperature_f > 85
What are the names of stations that have latitude lower than 37.5?|CREATE TABLE station (name VARCHAR, lat INTEGER)|SELECT name FROM station WHERE lat < 37.5|SELECT name FROM station WHERE lat < 37.5
For each city, return the highest latitude among its stations.|CREATE TABLE station (city VARCHAR, lat INTEGER)|SELECT city, MAX(lat) FROM station GROUP BY city|SELECT city, MAX(lat) FROM station GROUP BY city
Give me the start station and end station for the trips with the three oldest id.|CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)|SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3|SELECT start_station_name, end_station_name FROM trip ORDER BY id ASC LIMIT 3
What is the average latitude and longitude of stations located in San Jose city?|CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)|"SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose"""|SELECT AVG(lat), AVG(long) FROM station WHERE city = 'San Jose'
What is the id of the trip that has the shortest duration?|CREATE TABLE trip (id VARCHAR, duration VARCHAR)|SELECT id FROM trip ORDER BY duration LIMIT 1|SELECT id FROM trip ORDER BY duration ASC LIMIT 1
What is the total and maximum duration of trips with bike id 636?|CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)|SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636|SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = '636'
For each zip code, return the average mean temperature of August there.|CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)|"SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code"|SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE strftime('%m', date) = '08' GROUP BY zip_code;
From the trip record, find the number of unique bikes.|CREATE TABLE trip (bike_id VARCHAR)|SELECT COUNT(DISTINCT bike_id) FROM trip|SELECT COUNT(DISTINCT bike_id) FROM trip
What is the number of distinct cities the stations are located at?|CREATE TABLE station (city VARCHAR)|SELECT COUNT(DISTINCT city) FROM station|SELECT count(DISTINCT city) FROM station
How many stations does Mountain View city has?|CREATE TABLE station (city VARCHAR)|"SELECT COUNT(*) FROM station WHERE city = ""Mountain View"""|SELECT count(*) FROM station WHERE city = 'Mountain View'
Return the unique name for stations that have ever had 7 bikes available.|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)|SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7|SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = '7'
Which start station had the most trips starting from August? Give me the name and id of the station.|CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)|"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"|SELECT start_station_name, start_station_id FROM trip WHERE STRFTIME('%m', start_date) >= '08' GROUP BY start_station_name, start_station_id ORDER BY COUNT(*) DESC LIMIT 1;
Which bike traveled the most often in zip code 94002?|CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)|SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1
How many days had both mean humidity above 50 and mean visibility above 8?|CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)|SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8|SELECT count(*) FROM weather WHERE mean_humidity > '50' AND mean_visibility_miles > '8'
What is the latitude, longitude, city of the station from which the shortest trip started?|CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)|SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1|SELECT T2.lat, T2.long, T2.city FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T1.duration ASC LIMIT 1
What are the ids of stations that are located in San Francisco and have average bike availability above 10.|CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)|"SELECT id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10"|SELECT station_id FROM station WHERE city = 'San Francisco' GROUP BY station_id HAVING AVG(bikes_available) > 10
What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)|"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE ""12/%"""|SELECT DISTINCT s.name, s.id FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE strftime('%m', s.installation_date) = '12' UNION SELECT s.name, s.id FROM station AS s JOIN status AS st ON s.id = st.station_id GROUP BY s.id HAVING AVG(st.bikes_available) > 14
What is the 3 most common cloud cover rates in the region of zip code 94107?|CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)|SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3|SELECT cloud_cover FROM weather WHERE zip_code = '94107' GROUP BY cloud_cover ORDER BY count(*) DESC LIMIT 3
What is the zip code in which the average mean sea level pressure is the lowest?|CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1|SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1
What is the average bike availability in stations that are not located in Palo Alto?|CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)|"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = ""Palo Alto"")"|SELECT avg(bikes_available) FROM station WHERE city <> 'Palo Alto'
What is the average longitude of stations that never had bike availability more than 10?|CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)|SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)|SELECT AVG(long) FROM station EXCEPT SELECT AVG(long) FROM station WHERE bikes_available > 10
When and in what zip code did max temperature reach 80?|CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)|SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80|SELECT date, zip_code FROM weather WHERE max_temperature_f = '80'
Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.|CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)|SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60|SELECT DISTINCT t.id FROM trip t JOIN weather w ON t.zip_code = w.zip_code WHERE w.mean_temperature_f > 60
For each zip code, return how many times max wind speed reached 25?|CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)|SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code|SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph = '25' GROUP BY zip_code
On which day and in which zip code was the min dew point lower than any day in zip code 94107?|CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)|SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)|SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = '94107')
For each trip, return its ending station's installation date.|CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)|SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id|SELECT t1.installation_date FROM station AS t1 JOIN trip AS t2 ON t1.id  =  t2.end_station_id
Which trip started from the station with the largest dock count? Give me the trip id.|CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)|SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1|SELECT t.id FROM trip t JOIN station s ON t.start_station_id = s.id ORDER BY s.dock_count DESC LIMIT 1
Count the number of trips that did not end in San Francisco city.|CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)|"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> ""San Francisco"""|SELECT count(*) FROM trip WHERE end_station_id NOT IN (SELECT id FROM station WHERE city = 'San Francisco')
In zip code 94107, on which day neither Fog nor Rain was not observed?|CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)|"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> ""Fog"" AND EVENTS <> ""Rain"""|SELECT date FROM weather WHERE zip_code = '94107' EXCEPT SELECT date FROM weather WHERE zip_code = '94107' AND (EVENTS LIKE '%Fog%' OR EVENTS LIKE '%Rain%')
What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?|CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)|SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7|SELECT DISTINCT station_id FROM status WHERE lat > 37.4 EXCEPT SELECT DISTINCT station_id FROM status WHERE bikes_available < 7
What are names of stations that have average bike availability above 10 and are not located in San Jose city?|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)|"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = ""San Jose"""|SELECT name FROM station WHERE bikes_available > 10 AND city != 'San Jose';
What are the name, latitude, and city of the station with the lowest latitude?|CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)|SELECT name, lat, city FROM station ORDER BY lat LIMIT 1|SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1
What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?|CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)|SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3|SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
List the name and the number of stations for all the cities that have at least 15 stations.|CREATE TABLE station (city VARCHAR)|SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15|SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15
Find the ids and names of stations from which at least 200 trips started.|CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)|SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200|SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(*) >= 200
Find the zip code in which the average mean visibility is lower than 10.|CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10|SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10;
List all the cities in a decreasing order of each city's stations' highest latitude.|CREATE TABLE station (city VARCHAR, lat INTEGER)|SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC|SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC
What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.|CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)|SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5|SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5
What are the ids and durations of the trips with the top 3 durations?|CREATE TABLE trip (id VARCHAR, duration VARCHAR)|SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3|SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3
For each station, return its longitude and the average duration of trips that started from the station.|CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)|SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id|SELECT s.long, AVG(t.duration) AS average_duration FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.id, s.long
For each station, find its latitude and the minimum duration of trips that ended at the station.|CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)|SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id|SELECT s.lat, MIN(t.duration) FROM trip t JOIN station s ON t.end_station_id = s.id GROUP BY t.end_station_id
List all the distinct stations from which a trip of duration below 100 started.|CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)|SELECT DISTINCT start_station_name FROM trip WHERE duration < 100|SELECT DISTINCT start_station_name FROM trip WHERE duration < 100
Find all the zip codes in which the max dew point have never reached 70.|CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)|SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70|SELECT zip_code FROM weather EXCEPT SELECT zip_code FROM weather WHERE max_dew_point_f = '70'
Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.|CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)|SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)|SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')
What are the dates in which the mean sea level pressure was between 30.3 and 31?|CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)|SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31|SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31
Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.|CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)|SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1|SELECT date, (max_temperature_f - min_temperature_f) AS temperature_difference FROM weather ORDER BY temperature_difference ASC LIMIT 1
What are the id and name of the stations that have ever had more than 12 bikes available?|CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)|SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12|SELECT DISTINCT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12
Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.|CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100|SELECT zip_code FROM trip GROUP BY zip_code HAVING AVG(mean_humidity) < 70 AND COUNT(*) >= 100
What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?|CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)|"SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100"|SELECT s.name FROM station AS s WHERE s.city = 'Palo Alto' EXCEPT SELECT t.end_station_name FROM trip AS t WHERE t.city = 'Palo Alto' GROUP BY t.end_station_name HAVING count(*) > 100
How many trips started from Mountain View city and ended at Palo Alto city?|CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)|"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = ""Mountain View"" AND T3.city = ""Palo Alto"""|SELECT count(*) FROM trip AS t1 INNER JOIN station AS s1 ON t1.start_station_id = s1.id INNER JOIN station AS s2 ON t1.end_station_id = s2.id WHERE s1.city = 'Mountain View' AND s2.city = 'Palo Alto'
What is the average latitude and longitude of the starting points of all trips?|CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)|SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id|SELECT AVG(s.lat), AVG(s.long) FROM trip t JOIN station s ON t.start_station_id = s.id
How many books are there?|CREATE TABLE book (Id VARCHAR)|SELECT COUNT(*) FROM book|SELECT count(*) FROM book
List the writers of the books in ascending alphabetical order.|CREATE TABLE book (Writer VARCHAR)|SELECT Writer FROM book ORDER BY Writer|SELECT Writer FROM book ORDER BY Writer ASC
List the titles of the books in ascending order of issues.|CREATE TABLE book (Title VARCHAR, Issues VARCHAR)|SELECT Title FROM book ORDER BY Issues|SELECT Title FROM book ORDER BY Issues ASC
"What are the titles of the books whose writer is not ""Elaine Lee""?"|CREATE TABLE book (Title VARCHAR, Writer VARCHAR)|"SELECT Title FROM book WHERE Writer <> ""Elaine Lee"""|SELECT Title FROM book WHERE Writer != 'Elaine Lee';
What are the title and issues of the books?|CREATE TABLE book (Title VARCHAR, Issues VARCHAR)|SELECT Title, Issues FROM book|SELECT Title, Issues FROM book
What are the dates of publications in descending order of price?|CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)|SELECT Publication_Date FROM publication ORDER BY Price DESC|SELECT Publication_Date FROM publication ORDER BY Price DESC
What are the distinct publishers of publications with price higher than 5000000?|CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)|SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000|SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000
List the publisher of the publication with the highest price.|CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)|SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1|SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1
List the publication dates of publications with 3 lowest prices.|CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)|SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3|SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3
Show the title and publication dates of books.|CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)|SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID|SELECT b.Title, p.Publication_Date FROM book AS b JOIN publication AS p ON b.Book_ID = p.Book_ID
Show writers who have published a book with price more than 4000000.|CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)|SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000|SELECT DISTINCT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000
Show the titles of books in descending order of publication price.|CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)|SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC|SELECT b.Title FROM book b JOIN publication p ON b.Book_ID = p.Book_ID ORDER BY p.Price DESC;
Show publishers that have more than one publication.|CREATE TABLE publication (Publisher VARCHAR)|SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1|SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1
Show different publishers together with the number of publications they have.|CREATE TABLE publication (Publisher VARCHAR)|SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher|SELECT Publisher, COUNT(*) AS NumberOfPublications FROM publication GROUP BY Publisher
Please show the most common publication date.|CREATE TABLE publication (Publication_Date VARCHAR)|SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1|SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1
List the writers who have written more than one book.|CREATE TABLE book (Writer VARCHAR)|SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1|SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1
List the titles of books that are not published.|CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)|SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)|SELECT Title FROM book EXCEPT SELECT Title FROM publication
Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.|CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)|SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000|SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000
What is the number of distinct publication dates?|CREATE TABLE publication (Publication_Date VARCHAR)|SELECT COUNT(DISTINCT Publication_Date) FROM publication|SELECT count(DISTINCT Publication_Date) FROM publication
"Show the prices of publications whose publisher is either ""Person"" or ""Wiley"""|CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)|"SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley"""|SELECT Price FROM publication WHERE Publisher IN ('Person', 'Wiley')
How many actors are there?|CREATE TABLE actor (Id VARCHAR)|SELECT COUNT(*) FROM actor|SELECT count(*) FROM actor
List the name of actors in ascending alphabetical order.|CREATE TABLE actor (Name VARCHAR)|SELECT Name FROM actor ORDER BY Name|SELECT Name FROM actor ORDER BY Name ASC;
What are the characters and duration of actors?|CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)|SELECT Character, Duration FROM actor|SELECT Character, Duration FROM actor
List the name of actors whose age is not 20.|CREATE TABLE actor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM actor WHERE Age <> 20|SELECT Name FROM actor WHERE Age <> '20';
What are the characters of actors in descending order of age?|CREATE TABLE actor (Character VARCHAR, age VARCHAR)|SELECT Character FROM actor ORDER BY age DESC|SELECT Character FROM actor ORDER BY age DESC
What is the duration of the oldest actor?|CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)|SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1|SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1
"What are the names of musicals with nominee ""Bob Fosse""?"|CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)|"SELECT Name FROM musical WHERE Nominee = ""Bob Fosse"""|"SELECT Name FROM musical WHERE Nominee = ""Bob Fosse"""
"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?"|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT DISTINCT Nominee FROM musical WHERE Award <> ""Tony Award"""|SELECT DISTINCT Nominee FROM musical WHERE Award <> 'Tony Award'
Show names of actors and names of musicals they are in.|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID|SELECT t1.Name, t2.Name FROM actor AS t1 JOIN musical AS t2 ON t1.Musical_ID  =  t2.Musical_ID
"Show names of actors that have appeared in musical with name ""The Phantom of the Opera""."|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)|"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = ""The Phantom of the Opera"""|SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'
Show names of actors in descending order of the year their musical is awarded.|CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)|SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC|SELECT t1.Name FROM actor AS t1 JOIN musical AS t2 ON t1.Musical_ID = t2.Musical_ID ORDER BY t2.Year DESC
Show names of musicals and the number of actors who have appeared in the musicals.|CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID|SELECT m.Name, COUNT(a.Musical_ID) AS NumberOfActors FROM musical AS m JOIN actor AS a ON m.Musical_ID = a.Musical_ID GROUP BY m.Name
Show names of musicals which have at least three actors.|CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3|SELECT T1.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING count(*)  >=  3
Show different nominees and the number of musicals they have been nominated.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee|SELECT Nominee, COUNT(*) AS NumberOfNominations FROM musical GROUP BY Nominee
Please show the nominee who has been nominated the greatest number of times.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1|SELECT Nominee FROM musical GROUP BY Nominee ORDER BY count(*) DESC LIMIT 1
List the most common result of the musicals.|CREATE TABLE musical (RESULT VARCHAR)|SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1|SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1
List the nominees that have been nominated more than two musicals.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2|SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2
List the name of musicals that do not have actors.|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)|SELECT Name FROM musical EXCEPT SELECT T1.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID  =  T2.Musical_ID
"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award""."|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award"""|SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'
"Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks""."|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" OR Award = ""Cleavant Derricks"""|SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' OR Award = 'Cleavant Derricks';
"Find the emails of the user named ""Mary""."|CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)|SELECT email FROM user_profiles WHERE name = 'Mary'|SELECT email FROM user_profiles WHERE name = 'Mary';
"What is the partition id of the user named ""Iron Man""."|CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)|SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'|SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'
How many users are there?|CREATE TABLE user_profiles (Id VARCHAR)|SELECT COUNT(*) FROM user_profiles|SELECT count(*) FROM user_profiles
How many followers does each user have?|CREATE TABLE follows (Id VARCHAR)|SELECT COUNT(*) FROM follows|SELECT Id, COUNT(*) AS follower_count FROM follows GROUP BY Id
Find the number of followers for each user.|CREATE TABLE follows (f1 VARCHAR)|SELECT COUNT(*) FROM follows GROUP BY f1|SELECT f1, COUNT(*) AS follower_count FROM follows GROUP BY f1
Find the number of tweets in record.|CREATE TABLE tweets (Id VARCHAR)|SELECT COUNT(*) FROM tweets|SELECT count(*) FROM tweets
Find the number of users who posted some tweets.|CREATE TABLE tweets (UID VARCHAR)|SELECT COUNT(DISTINCT UID) FROM tweets|SELECT count(DISTINCT UID) FROM tweets
Find the name and email of the user whose name contains the word ‘Swift’.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)|SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'|SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%';
Find the names of users whose emails contain ‘superstar’ or ‘edu’.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)|SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'|SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%';
Return the text of tweets about the topic 'intern'.|CREATE TABLE tweets (text VARCHAR)|SELECT text FROM tweets WHERE text LIKE '%intern%'|SELECT text FROM tweets WHERE text LIKE '%intern%';
Find the name and email of the users who have more than 1000 followers.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)|SELECT name, email FROM user_profiles WHERE followers > 1000|SELECT name, email FROM user_profiles WHERE followers > 1000
"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift""."|CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')|SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T1.uid, T1.name HAVING count(T2.f1) > (SELECT count(T2.f1) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')
Find the name and email for the users who have more than one follower.|CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)|SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1|SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > 1
Find the names of users who have more than one tweet.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1|SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T1.uid HAVING count(*)  >  1
Find the id of users who are followed by Mary and Susan.|CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)|"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Susan"""|SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name = 'Mary' OR name = 'Susan')
Find the id of users who are followed by Mary or Susan.|CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)|"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" OR T1.name = ""Susan"""|SELECT DISTINCT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name = 'Mary' OR name = 'Susan')
Find the name of the user who has the largest number of followers.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1
Find the name and email of the user followed by the least number of people.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)|SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1|SELECT name, email FROM user_profiles ORDER BY followers ASC LIMIT 1
List the name and number of followers for each user, and sort the results by the number of followers in descending order.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name, followers FROM user_profiles ORDER BY followers DESC|SELECT name, followers FROM user_profiles ORDER BY followers DESC;
List the names of 5 users followed by the largest number of other users.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5|SELECT name FROM user_profiles ORDER BY CAST(followers AS UNSIGNED) DESC LIMIT 5
List the text of all tweets in the order of date.|CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)|SELECT text FROM tweets ORDER BY createdate|SELECT text FROM tweets ORDER BY createdate
Find the name of each user and number of tweets tweeted by each of them.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid|SELECT U.name, COUNT(T.uid) AS tweet_count FROM user_profiles U LEFT JOIN tweets T ON U.uid = T.uid GROUP BY U.name
Find the name and partition id for users who tweeted less than twice.|CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)|SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2|SELECT DISTINCT up.name, up.partitionid FROM user_profiles up JOIN tweets t ON up.uid = t.uid GROUP BY up.uid, up.name, up.partitionid HAVING COUNT(t.uid) < 2
Find the name of the user who tweeted more than once, and number of tweets tweeted by them.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1|SELECT T2.name, count(*) FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid  =  T2.uid GROUP BY T1.uid HAVING count(*)  >  1
Find the average number of followers for the users who do not have any tweet.|CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)|SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)|SELECT AVG(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)
Find the average number of followers for the users who had some tweets.|CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)|SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)|SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT DISTINCT UID FROM tweets)
Find the maximum and total number of followers of all users.|CREATE TABLE user_profiles (followers INTEGER)|SELECT MAX(followers), SUM(followers) FROM user_profiles|SELECT MAX(followers), SUM(followers) FROM user_profiles
Find the names of all the catalog entries.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)|SELECT DISTINCT (catalog_entry_name) FROM catalog_contents|SELECT catalog_entry_name FROM catalog_contents
Find the list of attribute data types possessed by more than 3 attribute definitions.|CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)|SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3|SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3
"What is the attribute data type of the attribute with name ""Green""?"|CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)|"SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green"""|SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green';
Find the name and level of catalog structure with level between 5 and 10.|CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)|SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10|SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10
"Find all the catalog publishers whose name contains ""Murray"""|CREATE TABLE catalogs (catalog_publisher VARCHAR)|"SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%"""|SELECT catalog_publisher FROM catalogs WHERE catalog_publisher LIKE '%Murray%';
Which catalog publisher has published the most catalogs?|CREATE TABLE catalogs (catalog_publisher VARCHAR)|SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1|SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1
Find the names and publication dates of all catalogs that have catalog level number greater than 5.|CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)|SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5|SELECT catalog_name, date_of_publication FROM catalogs
What are the entry names of catalog with the attribute possessed by most entries.|CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)|SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)|SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id GROUP BY T2.attribute_value ORDER BY count(*) DESC LIMIT 1
What is the entry name of the most expensive catalog (in USD)?|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
What is the level name of the cheapest catalog (in USD)?|CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)|SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1|SELECT T1.catalog_level_name FROM catalog_structure AS T1 JOIN catalog_contents AS T2 ON T1.catalog_level_number  =  T2.catalog_level_number ORDER BY T2.price_in_dollars ASC LIMIT 1
What are the average and minimum price (in Euro) of all products?|CREATE TABLE catalog_contents (price_in_euros INTEGER)|SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents|SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents
What is the product with the highest height? Give me the catalog entry name.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
Find the name of the product that has the smallest capacity.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1
"Find the names of all the products whose stock number starts with ""2""."|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)|"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%"""|SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%';
Find the names of catalog entries with level number 8.|CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)|"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = ""8"""|SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id  =  T2.catalog_entry_id WHERE T2.catalog_level_number  =  '8'
Find the names of the products with length smaller than 3 or height greater than 5.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)|SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5|SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < '3' OR width > '5'
Find the name and attribute ID of the attribute definitions with attribute value 0.|CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)|SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0|SELECT T1.attribute_name, T1.attribute_id FROM Attribute_Definitions AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = '0'
Find the name and capacity of products with price greater than 700 (in USD).|CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)|SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700|SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700
Find the dates on which more than one revisions were made.|CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)|SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1|SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1
How many products are there in the records?|CREATE TABLE catalog_contents (Id VARCHAR)|SELECT COUNT(*) FROM catalog_contents|SELECT count(*) FROM catalog_contents
Name all the products with next entry ID greater than 8.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)|SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8|SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8
How many aircrafts do we have?|CREATE TABLE Aircraft (Id VARCHAR)|SELECT COUNT(*) FROM Aircraft|SELECT count(*) FROM Aircraft
Show name and distance for all aircrafts.|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)|SELECT name, distance FROM Aircraft|SELECT name, distance FROM Aircraft
Show ids for all aircrafts with more than 1000 distance.|CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)|SELECT aid FROM Aircraft WHERE distance > 1000|SELECT aid FROM Aircraft WHERE distance > 1000
How many aircrafts have distance between 1000 and 5000?|CREATE TABLE Aircraft (distance INTEGER)|SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000|SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000
What is the name and distance for aircraft with id 12?|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)|SELECT name, distance FROM Aircraft WHERE aid = 12|SELECT name, distance FROM Aircraft WHERE aid = '12';
What is the minimum, average, and maximum distance of all aircrafts.|CREATE TABLE Aircraft (distance INTEGER)|SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft|SELECT min(distance), avg(distance), max(distance) FROM Aircraft
Show the id and name of the aircraft with the maximum distance.|CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)|SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1|SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1
Show the name of aircrafts with top three lowest distances.|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)|SELECT name FROM Aircraft ORDER BY distance LIMIT 3|SELECT name FROM Aircraft ORDER BY distance ASC LIMIT 3
Show names for all aircrafts with distances more than the average.|CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)|SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)|SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)
How many employees do we have?|CREATE TABLE Employee (Id VARCHAR)|SELECT COUNT(*) FROM Employee|SELECT count(*) FROM Employee
Show name and salary for all employees sorted by salary.|CREATE TABLE Employee (name VARCHAR, salary VARCHAR)|SELECT name, salary FROM Employee ORDER BY salary|SELECT name, salary FROM Employee ORDER BY salary
Show ids for all employees with at least 100000 salary.|CREATE TABLE Employee (eid VARCHAR, salary INTEGER)|SELECT eid FROM Employee WHERE salary > 100000|SELECT eid FROM Employee WHERE salary >= 100000;
How many employees have salary between 100000 and 200000?|CREATE TABLE Employee (salary INTEGER)|SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000|SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000;
What is the name and salary for employee with id 242518965?|CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)|SELECT name, salary FROM Employee WHERE eid = 242518965|SELECT name, salary FROM Employee WHERE eid = '242518965';
What is average and maximum salary of all employees.|CREATE TABLE Employee (salary INTEGER)|SELECT AVG(salary), MAX(salary) FROM Employee|SELECT AVG(salary), MAX(salary) FROM Employee
Show the id and name of the employee with maximum salary.|CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)|SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1|SELECT eid, name FROM Employee WHERE salary = (SELECT MAX(salary) FROM Employee)
Show the name of employees with three lowest salaries.|CREATE TABLE Employee (name VARCHAR, salary VARCHAR)|SELECT name FROM Employee ORDER BY salary LIMIT 3|SELECT name FROM Employee ORDER BY salary ASC LIMIT 3
Show names for all employees with salary more than the average.|CREATE TABLE Employee (name VARCHAR, salary INTEGER)|SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)|SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)
Show the id and salary of Mark Young.|CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)|SELECT eid, salary FROM Employee WHERE name = 'Mark Young'|SELECT eid, salary FROM Employee WHERE name = 'Mark Young'
How many flights do we have?|CREATE TABLE Flight (Id VARCHAR)|SELECT COUNT(*) FROM Flight|SELECT count(*) FROM Flight
Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.|CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)|SELECT flno, origin, destination FROM Flight ORDER BY origin|SELECT flno, origin, destination FROM Flight ORDER BY origin
Show all flight number from Los Angeles.|CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)|"SELECT flno FROM Flight WHERE origin = ""Los Angeles"""|SELECT flno FROM Flight WHERE origin = 'Los Angeles';
Show origins of all flights with destination Honolulu.|CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)|"SELECT origin FROM Flight WHERE destination = ""Honolulu"""|SELECT origin FROM Flight WHERE destination = 'Honolulu'
Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.|CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)|"SELECT departure_date, arrival_date FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""|SELECT departure_date, arrival_date FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
Show flight number for all flights with more than 2000 distance.|CREATE TABLE Flight (flno VARCHAR, distance INTEGER)|SELECT flno FROM Flight WHERE distance > 2000|SELECT flno FROM Flight WHERE distance > 2000
What is the average price for flights from Los Angeles to Honolulu.|CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)|"SELECT AVG(price) FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""|SELECT AVG(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
Show origin and destination for flights with price higher than 300.|CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)|SELECT origin, destination FROM Flight WHERE price > 300|SELECT origin, destination FROM Flight WHERE price > 300
Show the flight number and distance of the flight with maximum price.|CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)|SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1|SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1
Show the flight number of flights with three lowest distances.|CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)|SELECT flno FROM Flight ORDER BY distance LIMIT 3|SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3
What is the average distance and average price for flights from Los Angeles.|CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)|"SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = ""Los Angeles"""|SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = 'Los Angeles'
Show all origins and the number of flights from each origin.|CREATE TABLE Flight (origin VARCHAR)|SELECT origin, COUNT(*) FROM Flight GROUP BY origin|SELECT origin, COUNT(*) AS flight_count FROM Flight GROUP BY origin
Show all destinations and the number of flights to each destination.|CREATE TABLE Flight (destination VARCHAR)|SELECT destination, COUNT(*) FROM Flight GROUP BY destination|SELECT destination, COUNT(*) FROM Flight GROUP BY destination;
Which origin has most number of flights?|CREATE TABLE Flight (origin VARCHAR)|SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1|SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1
Which destination has least number of flights?|CREATE TABLE Flight (destination VARCHAR)|SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1|SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) ASC LIMIT 1
What is the aircraft name for the flight with number 99|CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)|SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99|SELECT T1.name FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid  =  T2.aid WHERE T2.flno  =  '99'
Show all flight numbers with aircraft Airbus A340-300.|CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ""Airbus A340-300"""|SELECT f.flno FROM Flight f JOIN Aircraft a ON f.aid = a.aid WHERE a.name = 'Airbus A340-300';
Show aircraft names and number of flights for each aircraft.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)|SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid|SELECT a.name, COUNT(f.aid) AS num_flights FROM Aircraft a LEFT JOIN Flight f ON a.aid = f.aid GROUP BY a.name;
Show names for all aircraft with at least two flights.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)|SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2|SELECT T1.name FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >=  2
How many employees have certificate.|CREATE TABLE Certificate (eid VARCHAR)|SELECT COUNT(DISTINCT eid) FROM Certificate|SELECT count(*) FROM Certificate
Show ids for all employees who don't have a certificate.|CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)|SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate|SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate;
Show names for all aircrafts of which John Williams has certificates.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)|"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = ""John Williams"""|SELECT DISTINCT A.name FROM Aircraft A JOIN Certificate C ON A.aid = C.aid JOIN Employee E ON C.eid = E.eid WHERE E.name = 'John Williams'
Show names for all employees who have certificate of Boeing 737-800.|CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""|SELECT E.name FROM Employee E JOIN Certificate C ON E.eid = C.eid JOIN Aircraft A ON C.aid = A.aid WHERE A.name = 'Boeing 737-800';
Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.|CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Airbus A340-300"""|SELECT e.name FROM Employee e WHERE e.eid IN (SELECT c.eid FROM Certificate c JOIN Aircraft a ON c.aid = a.aid WHERE a.name = 'Boeing 737-800' INTERSECT SELECT c.eid FROM Certificate c JOIN Aircraft a ON c.aid = a.aid WHERE a.name = 'Airbus A340-300')
Show names for all employees who do not have certificate of Boeing 737-800.|CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""|SELECT DISTINCT E.name FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Certificate C JOIN Aircraft A ON C.aid = A.aid WHERE A.name = 'Boeing 737-800' AND C.eid = E.eid)
Show the name of aircraft which fewest people have its certificate.|CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)|SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1|SELECT t1.name FROM Aircraft AS t1 JOIN Certificate AS t2 ON t1.aid  =  t2.aid GROUP BY t1.name ORDER BY count(*) ASC LIMIT 1
Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.|CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)|SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5|SELECT T1.name, T1.distance FROM Aircraft AS T1 JOIN Certificate AS T2 ON T1.aid = T2.aid WHERE T1.distance > 5000 GROUP BY T1.aid HAVING COUNT(*) >= 5
what is the salary and name of the employee who has the most number of aircraft certificates?|CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)|SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1|SELECT e.name, e.salary FROM Employee e JOIN Certificate c ON e.eid = c.eid GROUP BY e.eid, e.name, e.salary ORDER BY count(*) DESC LIMIT 1
What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?|CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)|SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1|SELECT E.name, E.salary FROM Employee E JOIN (SELECT eid FROM Certificate JOIN Aircraft A ON Certificate.aid = A.aid WHERE A.distance > 5000 GROUP BY eid ORDER BY COUNT(*) DESC LIMIT 1) AS TopEmployee ON E.eid = TopEmployee.eid;
How many allergies are there?|CREATE TABLE Allergy_type (allergy VARCHAR)|SELECT COUNT(DISTINCT allergy) FROM Allergy_type|SELECT count(*) FROM Allergy_type
How many different allergy types exist?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT COUNT(DISTINCT allergytype) FROM Allergy_type|SELECT count(DISTINCT allergytype) FROM Allergy_type
Show all allergy types.|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT DISTINCT allergytype FROM Allergy_type|SELECT allergytype FROM Allergy_type
Show all allergies and their types.|CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|SELECT allergy, allergytype FROM Allergy_type|SELECT allergy, allergytype FROM Allergy_type
Show all allergies with type food.|CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = ""food"""|SELECT allergy FROM Allergy_type WHERE allergytype = 'food'
What is the type of allergy Cat?|CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)|"SELECT allergytype FROM Allergy_type WHERE allergy = ""Cat"""|SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'
How many allergies have type animal?|CREATE TABLE Allergy_type (allergytype VARCHAR)|"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = ""animal"""|SELECT count(*) FROM Allergy_type WHERE allergytype = 'animal';
Show all allergy types and the number of allergies in each type.|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype|SELECT allergytype, COUNT(*) AS num_allergies FROM Allergy_type GROUP BY allergytype;
Which allergy type has most number of allergies?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1
Which allergy type has least number of allergies?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1
How many students are there?|CREATE TABLE Student (Id VARCHAR)|SELECT COUNT(*) FROM Student|SELECT count(*) FROM Student
Show first name and last name for all students.|CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)|SELECT Fname, Lname FROM Student|SELECT Fname, Lname FROM Student
How many different advisors are listed?|CREATE TABLE Student (advisor VARCHAR)|SELECT COUNT(DISTINCT advisor) FROM Student|SELECT count(DISTINCT advisor) FROM Student
Show all majors.|CREATE TABLE Student (Major VARCHAR)|SELECT DISTINCT Major FROM Student|SELECT DISTINCT Major FROM Student
Show all cities where students live.|CREATE TABLE Student (city_code VARCHAR)|SELECT DISTINCT city_code FROM Student|SELECT DISTINCT city_code FROM Student
Show first name, last name, age for all female students. Their sex is F.|CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)|SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'|SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'
Show student ids for all male students.|CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)|SELECT StuID FROM Student WHERE Sex = 'M'|SELECT StuID FROM Student WHERE Sex = 'M'
How many students are age 18?|CREATE TABLE Student (age VARCHAR)|SELECT COUNT(*) FROM Student WHERE age = 18|SELECT count(*) FROM Student WHERE age = '18';
Show all student ids who are older than 20.|CREATE TABLE Student (StuID VARCHAR, age INTEGER)|SELECT StuID FROM Student WHERE age > 20|SELECT StuID FROM Student WHERE age > 20
"Which city does the student whose last name is ""Kim"" live in?"|CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)|"SELECT city_code FROM Student WHERE LName = ""Kim"""|SELECT city_code FROM Student WHERE LName = 'Kim';
Who is the advisor of student with ID 1004?|CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)|SELECT Advisor FROM Student WHERE StuID = 1004|SELECT Advisor FROM Student WHERE StuID = '1004';
How many students live in HKG or CHI?|CREATE TABLE Student (city_code VARCHAR)|"SELECT COUNT(*) FROM Student WHERE city_code = ""HKG"" OR city_code = ""CHI"""|SELECT COUNT(*) FROM Student WHERE city_code IN ('HKG', 'CHI')
Show the minimum, average, and maximum age of all students.|CREATE TABLE Student (age INTEGER)|SELECT MIN(age), AVG(age), MAX(age) FROM Student|SELECT MIN(age), AVG(age), MAX(age) FROM Student
What is the last name of the youngest student?|CREATE TABLE Student (LName VARCHAR, age INTEGER)|SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)|SELECT LName FROM Student ORDER BY age ASC LIMIT 1
Show the student id of the oldest student.|CREATE TABLE Student (StuID VARCHAR, age INTEGER)|SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)|SELECT StuID FROM Student ORDER BY age DESC LIMIT 1
Show all majors and corresponding number of students.|CREATE TABLE Student (major VARCHAR)|SELECT major, COUNT(*) FROM Student GROUP BY major|SELECT major, COUNT(*) AS student_count FROM Student GROUP BY major
Which major has most number of students?|CREATE TABLE Student (major VARCHAR)|SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1|SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1
Show all ages and corresponding number of students.|CREATE TABLE Student (age VARCHAR)|SELECT age, COUNT(*) FROM Student GROUP BY age|SELECT age, COUNT(*) AS num_students FROM Student GROUP BY age
Show the average age for male and female students.|CREATE TABLE Student (sex VARCHAR, age INTEGER)|SELECT AVG(age), sex FROM Student GROUP BY sex|SELECT sex, AVG(age) FROM Student GROUP BY sex
Show all cities and corresponding number of students.|CREATE TABLE Student (city_code VARCHAR)|SELECT city_code, COUNT(*) FROM Student GROUP BY city_code|SELECT city_code, COUNT(*) AS num_students FROM Student GROUP BY city_code
Show all advisors and corresponding number of students.|CREATE TABLE Student (advisor VARCHAR)|SELECT advisor, COUNT(*) FROM Student GROUP BY advisor|SELECT advisor, COUNT(*) AS num_students FROM Student GROUP BY advisor
Which advisor has most number of students?|CREATE TABLE Student (advisor VARCHAR)|SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1|SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1
How many students have cat allergies?|CREATE TABLE Has_allergy (Allergy VARCHAR)|"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = ""Cat"""|SELECT count(*) FROM Has_allergy WHERE Allergy = 'Cat';
Show all student IDs who have at least two allergies.|CREATE TABLE Has_allergy (StuID VARCHAR)|SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2|SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2
What are the student ids of students who don't have any allergies?|CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)|SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy|SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy
How many female students have milk or egg allergies?|CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)|"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = ""F"" AND T1.allergy = ""Milk"" OR T1.allergy = ""Eggs"""|SELECT count(DISTINCT T1.StuID) FROM Student AS T1 JOIN has_allergy AS T2 ON T1.StuID  =  T2.StuID WHERE T1.sex  =  'F' AND (T2.allergy  =  'milk' OR T2.allergy  =  'egg')
How many students have a food allergy?|CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = ""food"""|SELECT count(*) FROM Has_allergy WHERE allergy IN (SELECT allergy FROM Allergy_type WHERE allergytype = 'food')
Which allergy has most number of students affected?|CREATE TABLE Has_allergy (Allergy VARCHAR)|SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1|SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1;
Show all allergies with number of students affected.|CREATE TABLE Has_allergy (Allergy VARCHAR)|SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy|SELECT Allergy, COUNT(*) AS NumberOfStudentsAffected FROM Has_allergy GROUP BY Allergy
Show all allergy type with number of students affected.|CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)|SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype|SELECT T1.allergytype, count(*) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.allergy = T2.allergy GROUP BY T1.allergytype
Find the last name and age of the student who has allergy to both milk and cat.|CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"|SELECT lname, age FROM Student WHERE Allergy = 'milk' INTERSECT SELECT lname, age FROM Student WHERE Allergy = 'cat'
What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.|CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)|"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = ""Lisa"" ORDER BY T1.Allergy"|SELECT T1.Allergy, T3.AllergyType FROM Has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_type AS T3 ON T1.Allergy  =  T3.Allergy WHERE T2.Fname  =  'Lisa' ORDER BY T1.Allergy
Find the first name and gender of the student who has allergy to milk but not cat.|CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"|SELECT fname, sex FROM Student WHERE Allergy = 'Milk' EXCEPT SELECT fname, sex FROM Student WHERE Allergy = 'Cat'
Find the average age of the students who have allergies with food and animal types.|CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)|"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""animal"")"|SELECT avg(T1.age) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.allergytype  =  'food' INTERSECT SELECT avg(T1.age) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.allergytype  =  'animal'
List the first and last name of the students who do not have any food type allergy.|CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"|SELECT fname, lname FROM Student EXCEPT SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.allergytype  =  'food'
Find the number of male (sex is 'M') students who have some food type allery.|CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)|"SELECT COUNT(*) FROM Student WHERE sex = ""M"" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"|SELECT count(DISTINCT T1.StuID) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.sex = 'M' AND T3.allergytype = 'food'
Find the different first names and cities of the students who have allergy to milk or cat.|CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)|"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = ""Milk"" OR T2.Allergy = ""Cat"""|SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 INNER JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'
Find the number of students who are older than 18 and do not have allergy to either food or animal.|CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)|"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" OR T2.allergytype = ""animal"")"|SELECT count(*) FROM Student WHERE age > 18 EXCEPT SELECT count(T1.StuID) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID  =  T2.Allergy JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.allergytype  =  'food' INTERSECT SELECT count(T1.StuID) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID  =  T2.Allergy JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.allergytype  =  'animal'
Find the first name and major of the students who are not allegry to soy.|CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Soy"")"|SELECT fname, major FROM Student WHERE Allergy <> 'Soy'
A list of the top 5 countries by number of invoices. List country name and number of invoices.|CREATE TABLE invoices (billing_country VARCHAR)|SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5|SELECT billing_country, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_country ORDER BY invoice_count DESC LIMIT 5
A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.|CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)|SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8|SELECT billing_country, SUM(total) AS gross_invoice_size FROM invoices GROUP BY billing_country ORDER BY gross_invoice_size DESC LIMIT 8
A list of the top 10 countries by average invoice size. List country name and average invoice size.|CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)|SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10|SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC LIMIT 10
Find out 5 customers who most recently purchased something. List customers' first and last name.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)|SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5|SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5
Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)|SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10|SELECT c.first_name, c.last_name, COUNT(i.customer_id) AS total_orders FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id, c.first_name, c.last_name ORDER BY total_orders DESC LIMIT 10
List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.|CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)|SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10|SELECT c.first_name, c.last_name, SUM(i.total) AS total_sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id, c.first_name, c.last_name ORDER BY total_sales DESC LIMIT 10
List the top 5 genres by number of tracks. List genres name and total tracks.|CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)|SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5|SELECT g.name, COUNT(t.genre_id) AS total_tracks FROM tracks t JOIN genres g ON t.genre_id = g.id GROUP BY g.name ORDER BY total_tracks DESC LIMIT 5
List every album's title.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums|SELECT title FROM albums
List every album ordered by album title in ascending order.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums ORDER BY title|SELECT title FROM albums ORDER BY title ASC;
List every album whose title starts with A in alphabetical order.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title|SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC
List the customers first and last name of 10 least expensive invoices.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)|SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10|SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id LIMIT 10
List total amount of  invoice from Chicago, IL.|CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)|"SELECT SUM(total) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""|SELECT total FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
List the number of invoices from Chicago, IL.|CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)|"SELECT COUNT(*) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""|SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
List the number of invoices from the US, grouped by state.|CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)|"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state"|SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'US' GROUP BY billing_state
List the state in the US with the most invoices.|CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)|"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"|SELECT billing_state FROM invoices WHERE billing_country = 'US' GROUP BY billing_state ORDER BY count(*) DESC LIMIT 1
List the number of invoices and the invoice total from California.|CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)|"SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = ""CA"""|SELECT COUNT(*), SUM(total) FROM invoices WHERE billing_state = 'California';
List Aerosmith's albums.|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)|"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Aerosmith"""|SELECT title FROM albums WHERE artist_id IN (SELECT id FROM artists WHERE name = 'Aerosmith');
How many albums does Billy Cobham has?|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)|"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Billy Cobham"""|"SELECT count(*) FROM albums AS ALB JOIN artists AS ART ON ART.id = ALB.artist_id WHERE ART.name = ""Billy Cobham"";"
Eduardo Martins is a customer at which company?|CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins"""|SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'
What is Astrid Gruber's email and phone number?|CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT email, phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"""|SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';
How many customers live in Prague city?|CREATE TABLE customers (city VARCHAR)|"SELECT COUNT(*) FROM customers WHERE city = ""Prague"""|SELECT count(*) FROM customers WHERE city = 'Prague'
How many customers in state of CA?|CREATE TABLE customers (state VARCHAR)|"SELECT COUNT(*) FROM customers WHERE state = ""CA"""|SELECT count(*) FROM customers WHERE state = 'CA';
What country does Roberto Almeida live?|CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"""|SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';
List the name of albums that are released by aritist whose name has 'Led'|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)|SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'|SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name LIKE '%Led%';
How many customers does Steve Johnson support?|CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)|"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson"""|SELECT count(*) FROM customers AS t1 JOIN employees AS t2 ON t1.support_rep_id = t2.id WHERE t2.first_name = 'Steve' AND t2.last_name = 'Johnson';
What is the title, phone and hire date of Nancy Edwards?|CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT title, phone, hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
find the full name of employees who report to Nancy Edwards?|CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)|"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = ""Nancy"" AND T1.last_name = ""Edwards"""|"SELECT e.first_name, e.last_name FROM employees e JOIN employees m ON e.reports_to = m.first_name || ' ' || m.last_name WHERE m.first_name = 'Nancy' AND m.last_name = 'Edwards';"
What is the address of employee Nancy Edwards?|CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
Find the full name of employee who supported the most number of customers.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)|SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1|SELECT e.first_name, e.last_name FROM employees e JOIN (SELECT c.support_rep_id, COUNT(*) AS customer_count FROM customers c GROUP BY c.support_rep_id ORDER BY customer_count DESC LIMIT 1) AS subquery ON e.id = subquery.support_rep_id;
How many employees are living in Canada?|CREATE TABLE employees (country VARCHAR)|"SELECT COUNT(*) FROM employees WHERE country = ""Canada"""|SELECT count(*) FROM employees WHERE country = 'Canada';
What is employee Nancy Edwards's phone number?|CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
Who is the youngest employee in the company? List employee's first and last name.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)|SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1|SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;
List top 10 employee work longest in the company. List employee's first and last name.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)|SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10|SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10
Find the number of employees whose title is IT Staff from each city?|CREATE TABLE employees (city VARCHAR, title VARCHAR)|SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city|SELECT city, COUNT(*) FROM employees WHERE title = 'IT Staff' GROUP BY city
Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)|SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1|SELECT e.first_name, e.last_name, COUNT(r.id) AS num_reports FROM employees e JOIN employees r ON e.id = r.reports_to GROUP BY e.id, e.first_name, e.last_name ORDER BY num_reports DESC LIMIT 1
How many orders does Lucas Mancini has?|CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""|SELECT COUNT(i.customer_id) FROM invoices AS i JOIN customers AS c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
What is the total amount of money spent by Lucas Mancini?|CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""|SELECT SUM(i.total) FROM invoices i JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
List all media types.|CREATE TABLE media_types (name VARCHAR)|SELECT name FROM media_types|SELECT name FROM media_types
List all different genre types.|CREATE TABLE genres (name VARCHAR)|SELECT DISTINCT name FROM genres|SELECT DISTINCT name FROM genres
List the name of all playlist.|CREATE TABLE playlists (name VARCHAR)|SELECT name FROM playlists|SELECT name FROM playlists;
Who is the composer of track Fast As a Shark?|CREATE TABLE tracks (composer VARCHAR, name VARCHAR)|"SELECT composer FROM tracks WHERE name = ""Fast As a Shark"""|SELECT composer FROM tracks WHERE name = 'Fast As a Shark'
How long does track Fast As a Shark has?|CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)|"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"""|SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'
What is the name of tracks whose genre is Rock?|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"""|SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id WHERE g.name = 'Rock'
What is title of album which track Balls to the Wall belongs to?|CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)|"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = ""Balls to the Wall"""|SELECT a.title FROM albums a JOIN tracks t ON a.id = t.genre_id WHERE t.name = 'Balls to the Wall';
List name of all tracks in Balls to the Wall.|CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)|"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall"""|SELECT t.name FROM tracks t JOIN albums a ON t.album_id = a.id WHERE a.title = 'Balls to the Wall';
List title of albums have the number of tracks greater than 10.|CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)|SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10|SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(*) > 10
List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" AND T3.name = ""MPEG audio file"""|SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG audio file'
List the name of tracks belongs to genre Rock or media type is MPEG audio file.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" OR T3.name = ""MPEG audio file"""|SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' OR m.name = 'MPEG audio file';
List the name of tracks belongs to genre Rock or genre Jazz.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"" OR T1.name = ""Jazz"""|SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id WHERE g.name = 'Rock' OR g.name = 'Jazz';
List the name of all tracks in the playlists of Movies.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = ""Movies"""|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies'
List the name of playlist which has number of tracks greater than 100.|CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)|SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100|SELECT p.name FROM playlists p JOIN playlist_tracks pt ON p.id = pt.playlist_id GROUP BY p.id, p.name HAVING COUNT(pt.track_id) > 100;
List all tracks bought by customer Daan Peeters.|CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters"""|SELECT DISTINCT t.name FROM tracks AS t JOIN invoice_lines AS il ON t.id = il.track_id JOIN invoices AS i ON il.invoice_id = i.id JOIN customers AS c ON i.customer_id = c.id WHERE c.first_name = 'Daan' AND c.last_name = 'Peeters';
How much is the track Fast As a Shark?|CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)|"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"""|SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'
Find the name of tracks which are in Movies playlist but not in music playlist.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT T.name FROM tracks AS T JOIN playlist_tracks AS PT ON T.id = PT.track_id JOIN playlists AS P ON PT.playlist_id = P.id WHERE P.name = 'Movies' EXCEPT SELECT T.name FROM tracks AS T JOIN playlist_tracks AS PT ON T.id = PT.track_id JOIN playlists AS P ON PT.playlist_id = P.id WHERE P.name = 'Music'
Find the name of tracks which are in both Movies and music playlists.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id WHERE p.name = 'Movies' INTERSECT SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id WHERE p.name = 'Music'
Find number of tracks in each genre?|CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)|SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name|SELECT g.name, COUNT(t.genre_id) FROM tracks t JOIN genres g ON t.genre_id = g.id GROUP BY g.name
How many editors are there?|CREATE TABLE editor (Id VARCHAR)|SELECT COUNT(*) FROM editor|SELECT count(*) FROM editor
List the names of editors in ascending order of age.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age|SELECT Name FROM editor ORDER BY Age ASC
What are the names and ages of editors?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name, Age FROM editor|SELECT Name, Age FROM editor
List the names of editors who are older than 25.|CREATE TABLE editor (Name VARCHAR, Age INTEGER)|SELECT Name FROM editor WHERE Age > 25|SELECT Name FROM editor WHERE Age > 25;
Show the names of editors of age either 24 or 25.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor WHERE Age = 24 OR Age = 25|SELECT Name FROM editor WHERE Age IN ('24', '25')
What is the name of the youngest editor?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age LIMIT 1|SELECT Name FROM editor ORDER BY Age ASC LIMIT 1
What are the different ages of editors? Show each age along with the number of editors of that age.|CREATE TABLE editor (Age VARCHAR)|SELECT Age, COUNT(*) FROM editor GROUP BY Age|SELECT Age, COUNT(*) AS NumberOfEditors FROM editor GROUP BY Age
Please show the most common age of editors.|CREATE TABLE editor (Age VARCHAR)|SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1|SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1
Show the distinct themes of journals.|CREATE TABLE journal (Theme VARCHAR)|SELECT DISTINCT Theme FROM journal|SELECT DISTINCT Theme FROM journal
Show the names of editors and the theme of journals for which they serve on committees.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID|SELECT T1.Name, T3.Theme FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID
Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme|SELECT T1.Name, T1.age, T3.Theme FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC
Show the names of editors that are on the committee of journals with sales bigger than 3000.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)|SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000|SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000
Show the id, name of each editor and the number of journal committees they are on.|CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id|SELECT e.editor_id, e.Name, COUNT(jc.Editor_ID) AS committee_count FROM editor e LEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID GROUP BY e.editor_id, e.Name;
Show the names of editors that are on at least two journal committees.|CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2|SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Editor_ID HAVING count(*)  >=  2
List the names of editors that are not on any journal committee.|CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)|SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)|SELECT Name FROM editor EXCEPT SELECT Name FROM journal_committee;
List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.|CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)|SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID|SELECT date, theme, sales FROM journal WHERE journal_ID NOT IN (SELECT journal_ID FROM journal_committee);
What is the average sales of the journals that have an editor whose work type is 'Photo'?|CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)|SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'|SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'
How many accounts do we have?|CREATE TABLE Accounts (Id VARCHAR)|SELECT COUNT(*) FROM Accounts|SELECT count(*) FROM Accounts
Show ids, customer ids, names for all accounts.|CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)|SELECT account_id, customer_id, account_name FROM Accounts|SELECT account_id, customer_id, account_name FROM Accounts
Show other account details for account with name 338.|CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)|"SELECT other_account_details FROM Accounts WHERE account_name = ""338"""|SELECT other_account_details FROM Accounts WHERE account_name = '338';
What is the first name, last name, and phone of the customer with account name 162?|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""162"""|SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 INNER JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name = '162'
How many accounts does the customer with first name Art and last name Turcotte have?|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|SELECT count(T1.customer_id) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'
Show all customer ids and the number of accounts for each customer.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id|SELECT customer_id, COUNT(*) AS num_accounts FROM Accounts GROUP BY customer_id
Show the customer id and number of accounts with most accounts.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1
What is the customer first, last name and id with least number of accounts.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT c.customer_first_name, c.customer_last_name, c.customer_id FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY count(*) ASC LIMIT 1
Show the number of all customers without an account.|CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)|SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.customer_id IS NULL;
Show the first names and last names of customers without any account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)|SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 INNER JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id
Show distinct first and last names for all customers with an account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT DISTINCT c.customer_first_name, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
How many customers have an account?|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(DISTINCT customer_id) FROM Accounts|SELECT count(customer_id) FROM Accounts
How many customers do we have?|CREATE TABLE Customers (Id VARCHAR)|SELECT COUNT(*) FROM Customers|SELECT count(*) FROM Customers
Show ids, first names, last names, and phones for all customers.|CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers
What is the phone and email for customer with first name Aniyah and last name Feest?|CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = ""Aniyah"" AND customer_last_name = ""Feest"""|SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
Show the number of customer cards.|CREATE TABLE Customers_cards (Id VARCHAR)|SELECT COUNT(*) FROM Customers_cards|SELECT count(*) FROM Customers_cards
Show ids, customer ids, card type codes, card numbers for all cards.|CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards
Show the date valid from and the date valid to for the card with card number '4560596484842'.|CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)|"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = ""4560596484842"""|SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = '4560596484842';
What is the first name, last name, and phone of the customer with card 4560596484842.|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = ""4560596484842"""|SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_number = '4560596484842'
How many cards does customer Art Turcotte have?|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|SELECT count(T1.customer_id) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte'
How many debit cards do we have?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = ""Debit"""|SELECT count(*) FROM Customers_cards WHERE card_type_code = 'debit';
How many credit cards does customer Blanche Huels have?|CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Blanche"" AND T2.customer_last_name = ""Huels"" AND T1.card_type_code = ""Credit"""|SELECT count(*) FROM Customers AS t1 JOIN Customers_cards AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_first_name  =  'Blanche' AND t1.customer_last_name  =  'Huels'
Show all customer ids and the number of cards owned by each customer.|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id|SELECT customer_id, COUNT(*) AS number_of_cards FROM Customers_cards GROUP BY customer_id
What is the customer id with most number of cards, and how many does he have?|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id, COUNT(*) AS num_cards FROM Customers_cards GROUP BY customer_id ORDER BY num_cards DESC LIMIT 1;
Show id, first and last names for all customers with at least two cards.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2|SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Customers_cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(cc.customer_id) >= 2
What is the customer id, first and last name with least number of accounts.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c LEFT JOIN Customers_cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY COUNT(cc.customer_id) ASC LIMIT 1
Show all card type codes and the number of cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code|SELECT card_type_code, COUNT(*) AS number_of_cards FROM Customers_cards GROUP BY card_type_code
What is the card type code with most number of cards?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1;
Show card type codes with at least 5 cards.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5
Show all card type codes and the number of customers holding cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)|SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code|SELECT card_type_code, COUNT(DISTINCT customer_id) AS num_customers FROM Customers_cards GROUP BY card_type_code
Show the customer ids and firstname without a credit card.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)|"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = ""Credit"""|SELECT c.customer_id, c.customer_first_name FROM Customers c LEFT JOIN Customers_cards cc ON c.customer_id = cc.customer_id WHERE cc.customer_id IS NULL
Show all card type codes.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT DISTINCT card_type_code FROM Customers_Cards|SELECT card_type_code FROM Customers_Cards
Show the number of card types.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards|SELECT count(DISTINCT card_type_code) FROM Customers_Cards
Show all transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT DISTINCT transaction_type FROM Financial_Transactions|SELECT transaction_type FROM Financial_Transactions
Show the number of transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions|SELECT count(DISTINCT transaction_type) FROM Financial_Transactions;
What is the average and total transaction amount?|CREATE TABLE Financial_transactions (transaction_amount INTEGER)|SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions|SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions
Show the card type codes and the number of transactions.|CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)|SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code|SELECT T2.card_type_code, count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code
Show the transaction type and the number of transactions.|CREATE TABLE Financial_transactions (transaction_type VARCHAR)|SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type|SELECT transaction_type, COUNT(*) AS number_of_transactions FROM Financial_transactions GROUP BY transaction_type
What is the transaction type that has processed the greatest total amount in transactions?|CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)|SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1|SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1
Show the account id and the number of transactions for each account|CREATE TABLE Financial_transactions (account_id VARCHAR)|SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id|SELECT account_id, COUNT(*) AS number_of_transactions FROM Financial_transactions GROUP BY account_id;
How many tracks do we have?|CREATE TABLE track (Id VARCHAR)|SELECT COUNT(*) FROM track|SELECT count(*) FROM track
Show the name and location for all tracks.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)|SELECT name, LOCATION FROM track|SELECT name, LOCATION FROM track
Show names and seatings, ordered by seating for all tracks opened after 2000.|CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)|SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating|SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating
What is the name, location and seating for the most recently opened track?|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)|SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1|SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1
What is the minimum, maximum, and average seating for all tracks.|CREATE TABLE track (seating INTEGER)|SELECT MIN(seating), MAX(seating), AVG(seating) FROM track|SELECT min(seating), max(seating), avg(seating) FROM track
Show the name, location, open year for all tracks with a seating higher than the average.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)|SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)|SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT avg(seating) FROM track)
What are distinct locations where tracks are located?|CREATE TABLE track (LOCATION VARCHAR)|SELECT DISTINCT LOCATION FROM track|SELECT DISTINCT LOCATION FROM track
How many races are there?|CREATE TABLE race (Id VARCHAR)|SELECT COUNT(*) FROM race|SELECT count(*) FROM race
What are the distinct classes that races can have?|CREATE TABLE race (CLASS VARCHAR)|SELECT DISTINCT CLASS FROM race|SELECT DISTINCT CLASS FROM race
Show name, class, and date for all races.|CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)|SELECT name, CLASS, date FROM race|SELECT name, CLASS, date FROM race
Show the race class and number of races in each class.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS|SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS
What is the race class with most number of races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1|SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1
List the race class with at least two races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2|SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2
What are the names for tracks without a race in class 'GT'.|CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'|SELECT name FROM track EXCEPT SELECT T1.name FROM track AS T1 JOIN race AS T2 ON T1.track_id = T2.track_id WHERE T2.class = 'GT'
Show all track names that have had no races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)|SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)|SELECT name FROM track EXCEPT SELECT T1.name FROM track AS T1 INNER JOIN race AS T2 ON T1.track_id = T2.track_id;
Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.|CREATE TABLE track (year_opened VARCHAR, seating INTEGER)|SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000|SELECT year_opened FROM track WHERE seating >= 5000 INTERSECT SELECT year_opened FROM track WHERE seating <= 4000
Show the name of track and the number of races in each track.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id|SELECT t.name, COUNT(r.track_id) AS num_races FROM track t JOIN race r ON t.track_id = r.track_id GROUP BY t.name
Show the name of track with most number of races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT t.name FROM track t JOIN (SELECT track_id FROM race GROUP BY track_id HAVING COUNT(*) = ( SELECT MAX(race_count) FROM (SELECT track_id, COUNT(*) AS race_count FROM race GROUP BY track_id) AS counts)) AS max_races ON t.track_id = max_races.track_id
Show the name and date for each race and its track name.|CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id|SELECT r.name, r.date, t.name FROM race r JOIN track t ON r.track_id = t.track_id
Show the name and location of track with 1 race.|CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)|SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1|SELECT t.name, t.location FROM track t JOIN race r ON t.track_id = r.track_id GROUP BY t.track_id, t.name, t.location HAVING COUNT(r.track_id) = 1
Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.|CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000
How many members have the black membership card?|CREATE TABLE member (Membership_card VARCHAR)|SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'|SELECT count(*) FROM member WHERE Membership_card = 'black'
Find the number of members living in each address.|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*), address FROM member GROUP BY address|SELECT address, COUNT(*) AS member_count FROM member GROUP BY address;
Give me the names of members whose address is in Harford or Waterbury.|CREATE TABLE member (name VARCHAR, address VARCHAR)|SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'|SELECT name FROM member WHERE address IN ('Harford', 'Waterbury')
Find the ids and names of members who are under age 30 or with black membership card.|CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)|SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30|SELECT member_id, name FROM member WHERE age < 30 OR Membership_card = 'black'
Find the purchase time, age and address of each member, and show the results in the order of purchase time.|CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase
Which membership card has more than 5 members?|CREATE TABLE member (Membership_card VARCHAR)|SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5|SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5;
Which address has both members younger than 30 and members older than 40?|CREATE TABLE member (address VARCHAR, age INTEGER)|SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40|SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40
What is the membership card held by both members living in Hartford and ones living in Waterbury address?|CREATE TABLE member (membership_card VARCHAR, address VARCHAR)|SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'|SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'
How many members are not living in Hartford?|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*) FROM member WHERE address <> 'Hartford'|SELECT count(*) FROM member WHERE address <> 'Hartford'
