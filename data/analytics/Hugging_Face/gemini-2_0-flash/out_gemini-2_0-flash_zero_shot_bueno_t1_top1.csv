question|context|answer|sql_generado
List all tracks bought by customer Daan Peeters.|CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters"""|SELECT T1.name FROM tracks AS T1 INNER JOIN invoice_lines AS T2 ON T1.id = T2.track_id INNER JOIN invoices AS T3 ON T2.invoice_id = T3.id INNER JOIN customers AS T4 ON T3.customer_id = T4.id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters'
How much is the track Fast As a Shark?|CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)|"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"""|SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'
Find the name of tracks which are in Movies playlist but not in music playlist.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'
Find the name of tracks which are in both Movies and music playlists.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'
Find number of tracks in each genre?|CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)|SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name|SELECT T2.name, COUNT(T1.genre_id) FROM tracks T1 INNER JOIN genres T2 ON T1.genre_id = T2.id GROUP BY T2.name
How many editors are there?|CREATE TABLE editor (Id VARCHAR)|SELECT COUNT(*) FROM editor|SELECT COUNT(DISTINCT Id) FROM editor
List the names of editors in ascending order of age.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age|SELECT Name FROM editor ORDER BY Age ASC
What are the names and ages of editors?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name, Age FROM editor|SELECT Name, Age FROM editor
List the names of editors who are older than 25.|CREATE TABLE editor (Name VARCHAR, Age INTEGER)|SELECT Name FROM editor WHERE Age > 25|SELECT Name FROM editor WHERE Age > 25
Show the names of editors of age either 24 or 25.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor WHERE Age = 24 OR Age = 25|SELECT Name FROM editor WHERE Age IN ('24', '25')
What is the name of the youngest editor?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age LIMIT 1|SELECT Name FROM editor ORDER BY Age ASC LIMIT 1
What are the different ages of editors? Show each age along with the number of editors of that age.|CREATE TABLE editor (Age VARCHAR)|SELECT Age, COUNT(*) FROM editor GROUP BY Age|SELECT Age, COUNT(*) FROM editor GROUP BY Age
Please show the most common age of editors.|CREATE TABLE editor (Age VARCHAR)|SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1|SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1
Show the distinct themes of journals.|CREATE TABLE journal (Theme VARCHAR)|SELECT DISTINCT Theme FROM journal|SELECT DISTINCT Theme FROM journal
Show the names of editors and the theme of journals for which they serve on committees.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID|SELECT DISTINCT T1.Name, T3.Theme FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID
Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme|SELECT T1.Name, T1.age, T3.Theme FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC
Show the names of editors that are on the committee of journals with sales bigger than 3000.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)|SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000|SELECT T1.Name FROM editor AS T1 INNER JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID INNER JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000
Show the id, name of each editor and the number of journal committees they are on.|CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id|SELECT T1.editor_id, T1.Name, COUNT(T2.Editor_ID) FROM editor AS T1 LEFT JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id, T1.Name
Show the names of editors that are on at least two journal committees.|CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2|SELECT T1.Name FROM editor AS T1 INNER JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Editor_ID HAVING COUNT(*)  >=  2
List the names of editors that are not on any journal committee.|CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)|SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)|SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)
List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.|CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)|SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID|SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 LEFT JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.journal_ID IS NULL
What is the average sales of the journals that have an editor whose work type is 'Photo'?|CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)|SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'|SELECT AVG(T1.sales) FROM journal AS T1 INNER JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'
How many accounts do we have?|CREATE TABLE Accounts (Id VARCHAR)|SELECT COUNT(*) FROM Accounts|SELECT COUNT(*) FROM Accounts
Show ids, customer ids, names for all accounts.|CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)|SELECT account_id, customer_id, account_name FROM Accounts|SELECT account_id, customer_id, account_name FROM Accounts
Show other account details for account with name 338.|CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)|"SELECT other_account_details FROM Accounts WHERE account_name = ""338"""|SELECT other_account_details FROM Accounts WHERE account_name = '338'
What is the first name, last name, and phone of the customer with account name 162?|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""162"""|SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 INNER JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name = '162'
How many accounts does the customer with first name Art and last name Turcotte have?|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|SELECT COUNT(T1.customer_id) FROM Accounts AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'
Show all customer ids and the number of accounts for each customer.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id
Show the customer id and number of accounts with most accounts.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id, COUNT(*) AS num_accounts FROM Accounts GROUP BY customer_id ORDER BY num_accounts DESC LIMIT 1
What is the customer first, last name and id with least number of accounts.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_id FROM Accounts AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(T1.customer_id) ASC LIMIT 1
Show the number of all customers without an account.|CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)|SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
Show the first names and last names of customers without any account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)|SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
Show distinct first and last names for all customers with an account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT DISTINCT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
How many customers have an account?|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(DISTINCT customer_id) FROM Accounts|SELECT COUNT(DISTINCT customer_id) FROM Accounts
How many customers do we have?|CREATE TABLE Customers (Id VARCHAR)|SELECT COUNT(*) FROM Customers|SELECT COUNT(*) FROM Customers
Show ids, first names, last names, and phones for all customers.|CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers
What is the phone and email for customer with first name Aniyah and last name Feest?|CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = ""Aniyah"" AND customer_last_name = ""Feest"""|SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'
Show the number of customer cards.|CREATE TABLE Customers_cards (Id VARCHAR)|SELECT COUNT(*) FROM Customers_cards|SELECT COUNT(*) FROM Customers_cards
Show ids, customer ids, card type codes, card numbers for all cards.|CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards
Show the date valid from and the date valid to for the card with card number '4560596484842'.|CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)|"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = ""4560596484842"""|SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = '4560596484842'
What is the first name, last name, and phone of the customer with card 4560596484842.|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = ""4560596484842"""|SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 INNER JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_number = '4560596484842'
How many cards does customer Art Turcotte have?|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|SELECT COUNT(T1.customer_id) FROM Customers_cards AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'
How many debit cards do we have?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = ""Debit"""|SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = 'debit'
How many credit cards does customer Blanche Huels have?|CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Blanche"" AND T2.customer_last_name = ""Huels"" AND T1.card_type_code = ""Credit"""|SELECT COUNT(T1.card_type_code) FROM Customers_cards AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' AND T2.customer_last_name = 'Huels'
Show all customer ids and the number of cards owned by each customer.|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id
What is the customer id with most number of cards, and how many does he have?|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id, COUNT(*) AS num_cards FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1
Show id, first and last names for all customers with at least two cards.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2|SELECT T1.customer_id, customer_first_name, customer_last_name FROM Customers AS T1 INNER JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id, customer_first_name, customer_last_name HAVING COUNT(T2.customer_id) >= 2
What is the customer id, first and last name with least number of accounts.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT T1.customer_id, customer_first_name, customer_last_name FROM Customers AS T1 INNER JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id, customer_first_name, customer_last_name ORDER BY COUNT(T2.customer_id) ASC LIMIT 1
Show all card type codes and the number of cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code|SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code
What is the card type code with most number of cards?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1
Show card type codes with at least 5 cards.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5
Show all card type codes and the number of customers holding cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)|SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code|SELECT card_type_code, COUNT(customer_id) FROM Customers_cards GROUP BY card_type_code
Show the customer ids and firstname without a credit card.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)|"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = ""Credit"""|SELECT T1.customer_id, T1.customer_first_name FROM Customers AS T1 LEFT JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IS NULL
Show all card type codes.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT DISTINCT card_type_code FROM Customers_Cards|SELECT card_type_code FROM Customers_Cards
Show the number of card types.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards|SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards
Show all transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT DISTINCT transaction_type FROM Financial_Transactions|SELECT DISTINCT transaction_type FROM Financial_Transactions
Show the number of transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions|SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions
What is the average and total transaction amount?|CREATE TABLE Financial_transactions (transaction_amount INTEGER)|SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions|SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions
Show the card type codes and the number of transactions.|CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)|SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code|SELECT T2.card_type_code, COUNT(T1.card_id) FROM Financial_transactions AS T1 INNER JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code
Show the transaction type and the number of transactions.|CREATE TABLE Financial_transactions (transaction_type VARCHAR)|SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type|SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type
What is the transaction type that has processed the greatest total amount in transactions?|CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)|SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1|SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1
Show the account id and the number of transactions for each account|CREATE TABLE Financial_transactions (account_id VARCHAR)|SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id|SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id
How many tracks do we have?|CREATE TABLE track (Id VARCHAR)|SELECT COUNT(*) FROM track|SELECT COUNT(*) FROM track
Show the name and location for all tracks.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)|SELECT name, LOCATION FROM track|SELECT name, LOCATION FROM track
Show names and seatings, ordered by seating for all tracks opened after 2000.|CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)|SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating|SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating
What is the name, location and seating for the most recently opened track?|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)|SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1|SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1
What is the minimum, maximum, and average seating for all tracks.|CREATE TABLE track (seating INTEGER)|SELECT MIN(seating), MAX(seating), AVG(seating) FROM track|SELECT MIN(seating), MAX(seating), AVG(seating) FROM track
Show the name, location, open year for all tracks with a seating higher than the average.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)|SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)|SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)
What are distinct locations where tracks are located?|CREATE TABLE track (LOCATION VARCHAR)|SELECT DISTINCT LOCATION FROM track|SELECT DISTINCT LOCATION FROM track
How many races are there?|CREATE TABLE race (Id VARCHAR)|SELECT COUNT(*) FROM race|SELECT COUNT(*) FROM race
What are the distinct classes that races can have?|CREATE TABLE race (CLASS VARCHAR)|SELECT DISTINCT CLASS FROM race|SELECT DISTINCT CLASS FROM race
Show name, class, and date for all races.|CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)|SELECT name, CLASS, date FROM race|SELECT name, CLASS, date FROM race
Show the race class and number of races in each class.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS|SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS
What is the race class with most number of races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1|SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1
List the race class with at least two races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2|SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2
What are the names for tracks without a race in class 'GT'.|CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'|SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race WHERE class = 'GT')
Show all track names that have had no races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)|SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)|SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)
Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.|CREATE TABLE track (year_opened VARCHAR, seating INTEGER)|SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000|SELECT year_opened FROM track WHERE seating >= 5000 INTERSECT SELECT year_opened FROM track WHERE seating <= 4000
Show the name of track and the number of races in each track.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id|SELECT T1.name, COUNT(T2.track_id) FROM track AS T1 INNER JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.name
Show the name of track with most number of races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT T1.name FROM track AS T1 INNER JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
Show the name and date for each race and its track name.|CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id|SELECT T1.name, T1.date, T2.name FROM race AS T1 INNER JOIN track AS T2 ON T1.track_id = T2.track_id
Show the name and location of track with 1 race.|CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)|SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1|SELECT T1.name, T1.location FROM track AS T1 INNER JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(T2.track_id) = 1
Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.|CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000
How many members have the black membership card?|CREATE TABLE member (Membership_card VARCHAR)|SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'|SELECT COUNT(*) FROM member WHERE Membership_card = 'black'
Find the number of members living in each address.|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*), address FROM member GROUP BY address|SELECT address, COUNT(*) FROM member GROUP BY address
Give me the names of members whose address is in Harford or Waterbury.|CREATE TABLE member (name VARCHAR, address VARCHAR)|SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'|SELECT name FROM member WHERE address IN ('Harford', 'Waterbury')
Find the ids and names of members who are under age 30 or with black membership card.|CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)|SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30|SELECT member_id, name FROM member WHERE age < 30 OR Membership_card = 'black'
Find the purchase time, age and address of each member, and show the results in the order of purchase time.|CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase
Which membership card has more than 5 members?|CREATE TABLE member (Membership_card VARCHAR)|SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5|SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5
Which address has both members younger than 30 and members older than 40?|CREATE TABLE member (address VARCHAR, age INTEGER)|SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40|SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40
What is the membership card held by both members living in Hartford and ones living in Waterbury address?|CREATE TABLE member (membership_card VARCHAR, address VARCHAR)|SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'|SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'
How many members are not living in Hartford?|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*) FROM member WHERE address <> 'Hartford'|SELECT COUNT(*) FROM member WHERE address <> 'Hartford';
Which address do not have any member with the black membership card?|CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)|SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'|SELECT DISTINCT address FROM member WHERE Membership_card <> 'black'
Show the shop addresses ordered by their opening year.|CREATE TABLE shop (address VARCHAR, open_year VARCHAR)|SELECT address FROM shop ORDER BY open_year|SELECT address FROM shop ORDER BY open_year
What are the average score and average staff number of all shops?|CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)|SELECT AVG(num_of_staff), AVG(score) FROM shop|SELECT AVG(score), AVG(num_of_staff) FROM shop
Find the id and address of the shops whose score is below the average score.|CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)
Find the address and staff number of the shops that do not have any happy hour.|CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)|SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)|SELECT address, num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)
What are the id and address of the shops which have a happy hour in May?|CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'|SELECT T1.shop_id, T1.address FROM shop T1 INNER JOIN happy_hour T2 ON T1.shop_id = T2.shop_id
which shop has happy hour most frequently? List its id and number of happy hours.|CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT shop_id, COUNT(*) AS num_happy_hours FROM happy_hour GROUP BY shop_id ORDER BY num_happy_hours DESC LIMIT 1
Which month has the most happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1|SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1
Which months have more than 2 happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2
How many albums are there?|CREATE TABLE ALBUM (Id VARCHAR)|SELECT COUNT(*) FROM ALBUM|SELECT COUNT(*) FROM ALBUM
List the names of all music genres.|CREATE TABLE GENRE (Name VARCHAR)|SELECT Name FROM GENRE|SELECT Name FROM GENRE
Find all the customer information in state NY.|CREATE TABLE CUSTOMER (State VARCHAR)|"SELECT * FROM CUSTOMER WHERE State = ""NY"""|SELECT * FROM CUSTOMER WHERE State = 'NY'
What are the first names and last names of the employees who live in Calgary city.|CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)|"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = ""Calgary"""|SELECT FirstName, LastName FROM EMPLOYEE WHERE City = 'Calgary'
What are the distinct billing countries of the invoices?|CREATE TABLE INVOICE (BillingCountry VARCHAR)|SELECT DISTINCT (BillingCountry) FROM INVOICE|SELECT DISTINCT BillingCountry FROM INVOICE
"Find the names of all artists that have ""a"" in their names."|CREATE TABLE ARTIST (Name VARCHAR)|"SELECT Name FROM ARTIST WHERE Name LIKE ""%a%"""|SELECT Name FROM ARTIST WHERE Name LIKE '%a%'
"Find the title of all the albums of the artist ""AC/DC""."|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""AC/DC"""|SELECT T1.Title FROM ALBUM AS T1 INNER JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'
"Hom many albums does the artist ""Metallica"" have?"|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""Metallica"""|SELECT COUNT(*) FROM ALBUM AS T1 INNER JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'
"Which artist does the album ""Balls to the Wall"" belong to?"|CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = ""Balls to the Wall"""|SELECT T2.Name FROM ALBUM AS T1 INNER JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Balls to the Wall'
Which artist has the most albums?|CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1|SELECT T1.Name FROM ARTIST AS T1 INNER JOIN ALBUM AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId ORDER BY COUNT(*) DESC LIMIT 1
"Find the names of all the tracks that contain the word ""you""."|CREATE TABLE TRACK (Name VARCHAR)|SELECT Name FROM TRACK WHERE Name LIKE '%you%'|SELECT Name FROM TRACK WHERE Name LIKE '%you%';
What is the average unit price of all the tracks?|CREATE TABLE TRACK (UnitPrice INTEGER)|SELECT AVG(UnitPrice) FROM TRACK|SELECT AVG(UnitPrice) FROM TRACK
What are the durations of the longest and the shortest tracks in milliseconds?|CREATE TABLE TRACK (Milliseconds INTEGER)|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK
Show the album names, ids and the number of tracks for each album.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)|SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID|SELECT T1.Title, T1.AlbumId, COUNT(T2.TrackId) FROM ALBUM AS T1 INNER JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T1.AlbumId, T1.Title
What is the name of the most common genre in all tracks?|CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)|SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1|SELECT T1.Name FROM GENRE AS T1 INNER JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is the least common media type in all tracks?|CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1|SELECT T1.Name FROM MEDIATYPE AS T1 INNER JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T1.Name ORDER BY COUNT(*) ASC LIMIT 1
Show the album names and ids for albums that contain tracks with unit price bigger than 1.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)|SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID|SELECT DISTINCT T1.Title, T1.AlbumId FROM ALBUM T1 INNER JOIN TRACK T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1
How many tracks belong to rock genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT COUNT(T1.GenreId) FROM TRACK AS T1 INNER JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Rock'
What is the average unit price of tracks that belong to Jazz genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Jazz"""|SELECT AVG(T1.UnitPrice) FROM TRACK T1 INNER JOIN GENRE T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Jazz'
"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?"|CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)|"SELECT FirstName, LastName FROM CUSTOMER WHERE Email = ""luisg@embraer.com.br"""|SELECT FirstName, LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br';
"How many customers have email that contains ""gmail.com""?"|CREATE TABLE CUSTOMER (Email VARCHAR)|"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%"""|SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%';
What is the first name and last name employee helps the customer with first name Leonie?|CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)|"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = ""Leonie"""|SELECT T1.FirstName, T1.LastName FROM EMPLOYEE AS T1 INNER JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.FirstName = 'Leonie'
What city does the employee who helps the customer with postal code 70174 live in?|CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)|"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = ""70174"""|SELECT T1.City FROM EMPLOYEE AS T1 INNER JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.PostalCode = '70174'
How many distinct cities does the employees live in?|CREATE TABLE EMPLOYEE (city VARCHAR)|SELECT COUNT(DISTINCT city) FROM EMPLOYEE|SELECT COUNT(DISTINCT city) FROM EMPLOYEE
Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.|CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)|"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = ""Astrid"" AND LastName = ""Gruber"""|SELECT T1.InvoiceDate FROM INVOICE AS T1 INNER JOIN CUSTOMER AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.FirstName = 'Astrid'
Find all the customer last names that do not have invoice totals larger than 20.|CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)|SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20|SELECT DISTINCT LastName FROM CUSTOMER WHERE CustomerId NOT IN (SELECT CustomerId FROM Invoice WHERE total > 20)
Find the first names of all customers that live in Brazil and have an invoice.|CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)|"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Brazil"""|SELECT T1.FirstName FROM CUSTOMER T1 INNER JOIN INVOICE T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Brazil'
Find the address of all customers that live in Germany and have invoice.|CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)|"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Germany"""|SELECT T1.Address FROM CUSTOMER AS T1 INNER JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'
List the phone numbers of all employees.|CREATE TABLE EMPLOYEE (Phone VARCHAR)|SELECT Phone FROM EMPLOYEE|SELECT Phone FROM EMPLOYEE
How many tracks are in the AAC audio file media type?|CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = ""AAC audio file"""|SELECT COUNT(*) FROM TRACK T1 INNER JOIN MEDIATYPE T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T2.Name = 'AAC audio file'
What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Latin"" OR T1.Name = ""Pop"""|SELECT AVG(milliseconds) FROM track AS T1 INNER JOIN genre AS T2 ON T1.genreid = T2.genreid WHERE T2.name IN ('Latin', 'Pop')
Please show the employee first names and ids of employees who serve at least 10 customers.|CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)|SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10|SELECT T2.FirstName, T2.EmployeeId FROM CUSTOMER AS T1 INNER JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T2.EmployeeId HAVING COUNT(T1.FirstName) >= 10
Please show the employee last names that serves no more than 20 customers.|CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)|SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20|SELECT T1.LastName FROM CUSTOMER AS T1 INNER JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20
Please list all album titles in alphabetical order.|CREATE TABLE ALBUM (Title VARCHAR)|SELECT Title FROM ALBUM ORDER BY Title|SELECT Title FROM ALBUM ORDER BY Title
Please list the name and id of all artists that have at least 3 albums in alphabetical order.|CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name|SELECT T1.Name, T1.ArtistID FROM ARTIST AS T1 INNER JOIN ALBUM AS T2 ON T1.ArtistID = T2.ArtistId GROUP BY T1.ArtistID HAVING COUNT(T2.ArtistId) >= 3 ORDER BY T1.Name
Find the names of artists that do not have any albums.|CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId|SELECT Name FROM ARTIST WHERE ArtistId NOT IN (SELECT ArtistId FROM ALBUM)
What is the average unit price of rock tracks?|CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)|"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT AVG(T1.UnitPrice) FROM TRACK AS T1 INNER JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Rock'
What are the duration of the longest and shortest pop tracks in milliseconds?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Pop"""|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK AS T1 INNER JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Pop'
What are the birth dates of employees living in Edmonton?|CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)|"SELECT BirthDate FROM EMPLOYEE WHERE City = ""Edmonton"""|SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'
What are the distinct unit prices of all tracks?|CREATE TABLE TRACK (UnitPrice VARCHAR)|SELECT DISTINCT (UnitPrice) FROM TRACK|SELECT DISTINCT UnitPrice FROM TRACK
How many artists do not have any album?|CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)|SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)|SELECT COUNT(DISTINCT artistid) FROM ARTIST WHERE artistid NOT IN (SELECT artistid FROM ALBUM)
What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?|CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)|SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'|SELECT DISTINCT T1.Title FROM Album AS T1 INNER JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT DISTINCT T1.Title FROM Album AS T1 INNER JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'
