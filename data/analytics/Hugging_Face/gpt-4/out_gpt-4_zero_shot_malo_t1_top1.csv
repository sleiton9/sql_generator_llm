question|context|answer|sql_generado
How many heads of the departments are older than 56 ?|CREATE TABLE head (age INTEGER)|SELECT COUNT(*) FROM head WHERE age > 56|SELECT COUNT(*) FROM head WHERE age > 56
List the name, born state and age of the heads of departments ordered by age.|CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)|SELECT name, born_state, age FROM head ORDER BY age|SELECT name, born_state, age FROM head ORDER BY age
List the creation year, name and budget of each department.|CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)|SELECT creation, name, budget_in_billions FROM department|SELECT creation, name, budget_in_billions FROM department
What are the maximum and minimum budget of the departments?|CREATE TABLE department (budget_in_billions INTEGER)|SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department|SELECT MAX(budget_in_billions) as Maximum_Budget, MIN(budget_in_billions) as Minimum_Budget FROM department
What is the average number of employees of the departments whose rank is between 10 and 15?|CREATE TABLE department (num_employees INTEGER, ranking INTEGER)|SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15|
What are the names of the heads who are born outside the California state?|CREATE TABLE head (name VARCHAR, born_state VARCHAR)|SELECT name FROM head WHERE born_state <> 'California'|SELECT name FROM head WHERE born_state != 'California'
What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?|CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)|SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'|SELECT DISTINCT d.creation FROM department d JOIN management m ON d.department_id = m.department_id JOIN head h ON m.head_id = h.head_id WHERE h.born_state = 'Alabama'
What are the names of the states where at least 3 heads were born?|CREATE TABLE head (born_state VARCHAR)|SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3|SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3
In which year were most departments established?|CREATE TABLE department (creation VARCHAR)|SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1|
Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?|CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)|SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'|SELECT department.name, department.num_employees FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 'Yes'
How many acting statuses are there?|CREATE TABLE management (temporary_acting VARCHAR)|SELECT COUNT(DISTINCT temporary_acting) FROM management|
How many departments are led by heads who are not mentioned?|CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)|SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)|SELECT COUNT(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management)
What are the distinct ages of the heads who are acting?|CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)|SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'|SELECT DISTINCT h.age FROM head h JOIN management m ON h.head_id = m.head_id WHERE m.temporary_acting = 'Yes'
List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.|CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)|SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'|SELECT t1.born_state AS treasury_head_born_state, t2.born_state AS homeland_security_head_born_state FROM ((SELECT head.born_state FROM head INNER JOIN management ON head.head_id = management.head_id INNER JOIN department ON management.department_id = department.department_id WHERE department.name = 'Treasury') t1 INNER JOIN (SELECT head.born_state FROM head INNER JOIN management ON head.head_id = management.head_id INNER JOIN department ON management.department_id = department.department_id WHERE department.name = 'Homeland Security') t2 ON t1.born_state = t2.born_state)
Which department has more than 1 head at a time? List the id, name and the number of heads.|CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)|SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1|SELECT d.department_id, d.name, COUNT(m.department_id) as number_of_heads FROM department d JOIN management m ON d.department_id = m.department_id GROUP BY d.department_id, d.name HAVING COUNT(m.department_id) > 1
Which head's name has the substring 'Ha'? List the id and name.|CREATE TABLE head (head_id VARCHAR, name VARCHAR)|SELECT head_id, name FROM head WHERE name LIKE '%Ha%'|
How many farms are there?|CREATE TABLE farm (Id VARCHAR)|SELECT COUNT(*) FROM farm|SELECT COUNT(Id) FROM farm
List the total number of horses on farms in ascending order.|CREATE TABLE farm (Total_Horses VARCHAR)|SELECT Total_Horses FROM farm ORDER BY Total_Horses|SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC
"What are the hosts of competitions whose theme is not ""Aliens""?"|CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)|SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'|
What are the themes of farm competitions sorted by year in ascending order?|CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)|SELECT Theme FROM farm_competition ORDER BY YEAR|SELECT Theme FROM farm_competition ORDER BY YEAR ASC
What is the average number of working horses of farms with more than 5000 total number of horses?|CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)|SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000|SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000
What are the maximum and minimum number of cows across all farms.|CREATE TABLE farm (Cows INTEGER)|SELECT MAX(Cows), MIN(Cows) FROM farm|
How many different statuses do cities have?|CREATE TABLE city (Status VARCHAR)|SELECT COUNT(DISTINCT Status) FROM city|
List official names of cities in descending order of population.|CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)|SELECT Official_Name FROM city ORDER BY Population DESC|SELECT Official_Name FROM city ORDER BY Population DESC
List the official name and status of the city with the largest population.|CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)|SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1|SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1
Show the years and the official names of the host cities of competitions.|CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)|SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID|SELECT fc.Year, c.Official_Name FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID
Show the official names of the cities that have hosted more than one competition.|CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)|SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1|SELECT city.Official_Name FROM city JOIN farm_competition ON city.City_ID=farm_competition.Host_city_ID GROUP BY city.Official_Name HAVING COUNT(*) > 1
Show the status of the city that has hosted the greatest number of competitions.|CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)|SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1|
Please show the themes of competitions with host cities having populations larger than 1000.|CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)|SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000|SELECT Theme FROM farm_competition WHERE Host_city_ID IN (SELECT City_ID FROM city WHERE Population > 1000)
Please show the different statuses of cities and the average population of cities with each status.|CREATE TABLE city (Status VARCHAR, Population INTEGER)|SELECT Status, AVG(Population) FROM city GROUP BY Status|
Please show the different statuses, ordered by the number of cities that have each.|CREATE TABLE city (Status VARCHAR)|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)|
List the most common type of Status across cities.|CREATE TABLE city (Status VARCHAR)|SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1|SELECT Status, COUNT(*) as count FROM city GROUP BY Status ORDER BY count DESC LIMIT 1
List the official names of cities that have not held any competition.|CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)|SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)|SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)
Show the status shared by cities with population bigger than 1500 and smaller than 500.|CREATE TABLE city (Status VARCHAR, Population INTEGER)|SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500|SELECT Status FROM city WHERE Population > 1500 AND Population < 500
Find the official names of cities with population bigger than 1500 or smaller than 500.|CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)|SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500|
"Show the census ranking of cities whose status are not ""Village""."|CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)|"SELECT Census_Ranking FROM city WHERE Status <> ""Village"""|SELECT Census_Ranking FROM city WHERE Status != 'Village'
which course has most number of registered students?|CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)|SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT course_name FROM courses JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
what is id of students who registered some courses but the least number of courses in these students?|CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1|
what are the first name and last name of all candidates?|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)|SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id|
List the id of students who never attends courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)|SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)|SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)
List the id of students who attended some courses?|CREATE TABLE student_course_attendance (student_id VARCHAR)|SELECT student_id FROM student_course_attendance|SELECT DISTINCT student_id FROM student_course_attendance
What are the ids of all students for courses and what are the names of those courses?|CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)|SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id|SELECT student_course_registrations.student_id, courses.course_name FROM courses INNER JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id
What is detail of the student who most recently registered course?|CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)|SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1|SELECT students.student_details FROM students JOIN (SELECT student_id, MAX(registration_date) as recent_date FROM student_course_registrations) AS most_recent ON students.student_id = most_recent.student_id
How many students attend course English?|CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English"""|
How many courses do the student whose id is 171 attend?|CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)|SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171|SELECT COUNT(course_id) FROM student_course_attendance WHERE student_id = '171'
Find id of the candidate whose email is stanley.monahan@example.org?|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)|"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org"""|SELECT candidate_id FROM candidates WHERE person_id IN (SELECT person_id FROM people WHERE email_address = 'stanley.monahan@example.org')
Find id of the candidate who most recently accessed the course?|CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)|SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1|SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
What is detail of the student who registered the most number of courses?|CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT s.student_details FROM students s JOIN student_course_registrations scr ON s.student_id = scr.student_id GROUP BY scr.student_id ORDER BY COUNT(*) DESC LIMIT 1
List the id of students who registered some courses and the number of their registered courses?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id|SELECT student_id, COUNT(*) as registered_courses FROM student_course_registrations GROUP BY student_id
How many registed students do each course have? List course name and the number of their registered students?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)|SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id|SELECT c.course_name, COUNT(sc.student_id) as num_students_registered FROM courses AS c LEFT JOIN student_course_registrations AS sc ON c.course_id = sc.course_id GROUP BY c.course_name
"Find id of candidates whose assessment code is ""Pass""?"|CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)|"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass"""|
"Find the cell mobile number of the candidates whose assessment code is ""Fail""?"|CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)|"SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = ""Fail"""|SELECT p.cell_mobile_number FROM candidates c JOIN candidate_assessments ca ON c.candidate_id = ca.candidate_id JOIN people p ON c.candidate_id = p.person_id WHERE ca.asessment_outcome_code = 'Fail'
What are the id of students who registered course 301?|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)|SELECT student_id FROM student_course_attendance WHERE course_id = 301|SELECT student_id FROM student_course_attendance WHERE course_id='301'
What is the id of the student who most recently registered course 301?|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)|SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1|
Find distinct cities of addresses of people?|CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id|SELECT DISTINCT city FROM addresses WHERE address_id IN (SELECT address_id FROM people_addresses)
Find distinct cities of address of students?|CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)|SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id|SELECT DISTINCT a.city FROM addresses a INNER JOIN people_addresses pa ON a.address_id = pa.address_id INNER JOIN students s ON pa.person_id = s.student_id
List the names of courses in alphabetical order?|CREATE TABLE courses (course_name VARCHAR)|SELECT course_name FROM courses ORDER BY course_name|
List the first names of people in alphabetical order?|CREATE TABLE people (first_name VARCHAR)|SELECT first_name FROM people ORDER BY first_name|SELECT first_name FROM people ORDER BY first_name ASC
What are the id of students who registered courses or attended courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance|SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance
Find the id of courses which are registered or attended by student whose id is 121?|CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)|SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121|
What are all info of students who registered courses but not attended courses?|CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)|SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)|SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)
List the id of students who registered course statistics in the order of registration date.|CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date"|SELECT student_course_registrations.student_id FROM student_course_registrations JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'statistics' ORDER BY student_course_registrations.registration_date
List the id of students who attended  statistics courses in the order of attendance date.|CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)|"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.date_of_attendance"|SELECT student_course_attendance.student_id FROM student_course_attendance INNER JOIN courses ON student_course_attendance.course_id=courses.course_id WHERE courses.course_name='statistics' ORDER BY student_course_attendance.date_of_attendance
Give me the dates when the max temperature was higher than 85.|CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)|SELECT date FROM weather WHERE max_temperature_f > 85|SELECT date FROM weather WHERE max_temperature_f > 85
What are the names of stations that have latitude lower than 37.5?|CREATE TABLE station (name VARCHAR, lat INTEGER)|SELECT name FROM station WHERE lat < 37.5|SELECT name FROM station WHERE lat < 37.5
For each city, return the highest latitude among its stations.|CREATE TABLE station (city VARCHAR, lat INTEGER)|SELECT city, MAX(lat) FROM station GROUP BY city|
Give me the start station and end station for the trips with the three oldest id.|CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)|SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3|
What is the average latitude and longitude of stations located in San Jose city?|CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)|"SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose"""|
What is the id of the trip that has the shortest duration?|CREATE TABLE trip (id VARCHAR, duration VARCHAR)|SELECT id FROM trip ORDER BY duration LIMIT 1|SELECT id FROM trip ORDER BY duration ASC LIMIT 1
What is the total and maximum duration of trips with bike id 636?|CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)|SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636|SELECT SUM(duration) as total_duration, MAX(duration) as max_duration FROM trip WHERE bike_id = '636'
For each zip code, return the average mean temperature of August there.|CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)|"SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code"|SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE strftime('%m', date) = '08' GROUP BY zip_code
From the trip record, find the number of unique bikes.|CREATE TABLE trip (bike_id VARCHAR)|SELECT COUNT(DISTINCT bike_id) FROM trip|SELECT COUNT(DISTINCT bike_id) FROM trip
What is the number of distinct cities the stations are located at?|CREATE TABLE station (city VARCHAR)|SELECT COUNT(DISTINCT city) FROM station|SELECT COUNT(DISTINCT city) FROM station
How many stations does Mountain View city has?|CREATE TABLE station (city VARCHAR)|"SELECT COUNT(*) FROM station WHERE city = ""Mountain View"""|SELECT COUNT(*) FROM station WHERE city = 'Mountain View'
Return the unique name for stations that have ever had 7 bikes available.|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)|SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7|SELECT DISTINCT s.name FROM station as s INNER JOIN status as st ON s.id = st.station_id WHERE st.bikes_available = 7
Which start station had the most trips starting from August? Give me the name and id of the station.|CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)|"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"|SELECT start_station_name, start_station_id, COUNT(*) as trip_count FROM trip WHERE start_date >= 'August' GROUP BY start_station_name, start_station_id ORDER BY trip_count DESC LIMIT 1
Which bike traveled the most often in zip code 94002?|CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)|SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT bike_id, COUNT(*) as travel_count FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY travel_count DESC LIMIT 1
How many days had both mean humidity above 50 and mean visibility above 8?|CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)|SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8|SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
What is the latitude, longitude, city of the station from which the shortest trip started?|CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)|SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1|SELECT s.lat, s.long, s.city FROM station s, (SELECT start_station_id FROM trip ORDER BY duration ASC LIMIT 1) t WHERE s.id = t.start_station_id
What are the ids of stations that are located in San Francisco and have average bike availability above 10.|CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)|"SELECT id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10"|SELECT s.station_id FROM status s JOIN station st ON s.station_id = st.station_id WHERE s.city = 'San Francisco' GROUP BY s.station_id HAVING AVG(s.bikes_available) > 10
What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)|"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE ""12/%"""|SELECT s.name, s.id FROM station s INNER JOIN (SELECT station_id, AVG(bikes_available) as bike_avg FROM status GROUP BY station_id HAVING bike_avg > 14) subq ON s.id = subq.station_id UNION SELECT s.name, s.id FROM station s WHERE strftime('%m', s.installation_date) = '12'
What is the 3 most common cloud cover rates in the region of zip code 94107?|CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)|SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3|
What is the zip code in which the average mean sea level pressure is the lowest?|CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1|SELECT zip_code, MIN(mean_sea_level_pressure_inches) FROM weather
What is the average bike availability in stations that are not located in Palo Alto?|CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)|"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = ""Palo Alto"")"|
What is the average longitude of stations that never had bike availability more than 10?|CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)|SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)|SELECT AVG(long) as Average_longitude FROM station WHERE station_id NOT IN (SELECT station_id from status WHERE bikes_available > 10)
When and in what zip code did max temperature reach 80?|CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)|SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80|SELECT date, zip_code FROM weather WHERE max_temperature_f = '80'
Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.|CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)|SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60|SELECT trip.id FROM trip INNER JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60
For each zip code, return how many times max wind speed reached 25?|CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)|SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code|
On which day and in which zip code was the min dew point lower than any day in zip code 94107?|CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)|SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)|SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = '94107')
For each trip, return its ending station's installation date.|CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)|SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id|SELECT trip.id, station.installation_date FROM trip INNER JOIN station ON trip.end_station_id = station.id
Which trip started from the station with the largest dock count? Give me the trip id.|CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)|SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1|SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1
Count the number of trips that did not end in San Francisco city.|CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)|"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> ""San Francisco"""|
In zip code 94107, on which day neither Fog nor Rain was not observed?|CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)|"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> ""Fog"" AND EVENTS <> ""Rain"""|
What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?|CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)|SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7|
What are names of stations that have average bike availability above 10 and are not located in San Jose city?|CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)|"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = ""San Jose"""|SELECT s.name FROM station s INNER JOIN status st ON s.id = st.station_id GROUP BY s.name HAVING AVG(s.bikes_available) > 10 AND s.city != 'San Jose'
What are the name, latitude, and city of the station with the lowest latitude?|CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)|SELECT name, lat, city FROM station ORDER BY lat LIMIT 1|SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1
What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?|CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)|SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3|SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
List the name and the number of stations for all the cities that have at least 15 stations.|CREATE TABLE station (city VARCHAR)|SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15|SELECT city, COUNT(*) AS number_of_stations FROM station GROUP BY city HAVING COUNT(*) >= 15
Find the ids and names of stations from which at least 200 trips started.|CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)|SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200|SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(*) >= 200
Find the zip code in which the average mean visibility is lower than 10.|CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10|SELECT zip_code FROM weather WHERE mean_visibility_miles < 10
List all the cities in a decreasing order of each city's stations' highest latitude.|CREATE TABLE station (city VARCHAR, lat INTEGER)|SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC|SELECT city FROM station ORDER BY lat DESC
What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.|CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)|SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5|
What are the ids and durations of the trips with the top 3 durations?|CREATE TABLE trip (id VARCHAR, duration VARCHAR)|SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3|
For each station, return its longitude and the average duration of trips that started from the station.|CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)|SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id|SELECT station.long, AVG(trip.duration) FROM station JOIN trip ON station.id = trip.start_station_id GROUP BY station.id
For each station, find its latitude and the minimum duration of trips that ended at the station.|CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)|SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id|SELECT station.name, station.lat, MIN(trip.duration) FROM station INNER JOIN trip ON station.id = trip.end_station_id GROUP BY station.id, station.lat
List all the distinct stations from which a trip of duration below 100 started.|CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)|SELECT DISTINCT start_station_name FROM trip WHERE duration < 100|
Find all the zip codes in which the max dew point have never reached 70.|CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)|SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70|SELECT zip_code FROM weather WHERE max_dew_point_f < 70
Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.|CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)|SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)|
What are the dates in which the mean sea level pressure was between 30.3 and 31?|CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)|SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31|SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31
Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.|CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)|SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1|SELECT date, (max_temperature_f - min_temperature_f) AS TemperatureDifference FROM weather ORDER BY TemperatureDifference ASC LIMIT 1
What are the id and name of the stations that have ever had more than 12 bikes available?|CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)|SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12|SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status WHERE bikes_available > 12)
Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.|CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)|SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100|
What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?|CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)|"SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100"|SELECT station.name FROM station LEFT JOIN trip ON station.name = trip.end_station_name WHERE station.city = 'Palo Alto' GROUP BY station.name HAVING COUNT(trip.name) < 100
How many trips started from Mountain View city and ended at Palo Alto city?|CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)|"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = ""Mountain View"" AND T3.city = ""Palo Alto"""|SELECT COUNT(*) FROM (SELECT t1.id FROM station as s1, trip as t1 WHERE s1.id = t1.start_station_id AND s1.city = 'Mountain View') AS subquery1, station as s2, trip as t2 WHERE s2.id = subquery1.id AND s2.city = 'Palo Alto' AND t2.end_station_id = s2.id
What is the average latitude and longitude of the starting points of all trips?|CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)|SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id|SELECT AVG(station.lat) AS avg_lat, AVG(station.long) AS avg_long FROM trip INNER JOIN station ON trip.start_station_id = station.id
How many books are there?|CREATE TABLE book (Id VARCHAR)|SELECT COUNT(*) FROM book|
List the writers of the books in ascending alphabetical order.|CREATE TABLE book (Writer VARCHAR)|SELECT Writer FROM book ORDER BY Writer|SELECT Writer FROM book ORDER BY Writer ASC
List the titles of the books in ascending order of issues.|CREATE TABLE book (Title VARCHAR, Issues VARCHAR)|SELECT Title FROM book ORDER BY Issues|SELECT Title FROM book ORDER BY Issues ASC
"What are the titles of the books whose writer is not ""Elaine Lee""?"|CREATE TABLE book (Title VARCHAR, Writer VARCHAR)|"SELECT Title FROM book WHERE Writer <> ""Elaine Lee"""|SELECT Title FROM book WHERE Writer <> 'Elaine Lee'
What are the title and issues of the books?|CREATE TABLE book (Title VARCHAR, Issues VARCHAR)|SELECT Title, Issues FROM book|SELECT Title, Issues FROM book
What are the dates of publications in descending order of price?|CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)|SELECT Publication_Date FROM publication ORDER BY Price DESC|SELECT Publication_Date FROM publication ORDER BY Price DESC
What are the distinct publishers of publications with price higher than 5000000?|CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)|SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000|SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000
List the publisher of the publication with the highest price.|CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)|SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1|
List the publication dates of publications with 3 lowest prices.|CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)|SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3|
Show the title and publication dates of books.|CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)|SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID|SELECT book.Title, publication.Publication_Date FROM book JOIN publication ON book.Book_ID = publication.Book_ID
Show writers who have published a book with price more than 4000000.|CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)|SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000|SELECT b.Writer FROM book b JOIN publication p ON b.Book_ID = p.Book_ID WHERE p.Price > 4000000
Show the titles of books in descending order of publication price.|CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)|SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC|
Show publishers that have more than one publication.|CREATE TABLE publication (Publisher VARCHAR)|SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1|SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1
Show different publishers together with the number of publications they have.|CREATE TABLE publication (Publisher VARCHAR)|SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher|SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher
Please show the most common publication date.|CREATE TABLE publication (Publication_Date VARCHAR)|SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1|
List the writers who have written more than one book.|CREATE TABLE book (Writer VARCHAR)|SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1|
List the titles of books that are not published.|CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)|SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)|SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)
Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.|CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)|SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000|SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000
What is the number of distinct publication dates?|CREATE TABLE publication (Publication_Date VARCHAR)|SELECT COUNT(DISTINCT Publication_Date) FROM publication|SELECT COUNT(DISTINCT Publication_Date) FROM publication
"Show the prices of publications whose publisher is either ""Person"" or ""Wiley"""|CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)|"SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley"""|SELECT Price FROM publication WHERE Publisher IN ('Person', 'Wiley')
How many actors are there?|CREATE TABLE actor (Id VARCHAR)|SELECT COUNT(*) FROM actor|SELECT COUNT(Id) FROM actor
List the name of actors in ascending alphabetical order.|CREATE TABLE actor (Name VARCHAR)|SELECT Name FROM actor ORDER BY Name|SELECT Name FROM actor ORDER BY Name ASC
What are the characters and duration of actors?|CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)|SELECT Character, Duration FROM actor|SELECT Character, Duration FROM actor
List the name of actors whose age is not 20.|CREATE TABLE actor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM actor WHERE Age <> 20|SELECT Name FROM actor WHERE Age != '20'
What are the characters of actors in descending order of age?|CREATE TABLE actor (Character VARCHAR, age VARCHAR)|SELECT Character FROM actor ORDER BY age DESC|SELECT Character FROM actor ORDER BY age DESC
What is the duration of the oldest actor?|CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)|SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1|SELECT Duration FROM actor WHERE Age = (SELECT MAX(Age) FROM actor)
"What are the names of musicals with nominee ""Bob Fosse""?"|CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)|"SELECT Name FROM musical WHERE Nominee = ""Bob Fosse"""|SELECT Name FROM musical WHERE Nominee='Bob Fosse'
"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?"|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT DISTINCT Nominee FROM musical WHERE Award <> ""Tony Award"""|SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award'
Show names of actors and names of musicals they are in.|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID|SELECT actor.Name AS actor_name, musical.Name AS musical_name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID
"Show names of actors that have appeared in musical with name ""The Phantom of the Opera""."|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)|"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = ""The Phantom of the Opera"""|SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID WHERE musical.Name = 'The Phantom of the Opera'
Show names of actors in descending order of the year their musical is awarded.|CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)|SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC|SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID ORDER BY musical.Year DESC
Show names of musicals and the number of actors who have appeared in the musicals.|CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID|SELECT m.Name, COUNT(DISTINCT a.Musical_ID) as Number_of_Actors FROM actor a JOIN musical m ON a.Musical_ID = m.Musical_ID GROUP BY m.Name ORDER BY Number_of_Actors DESC
Show names of musicals which have at least three actors.|CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3|
Show different nominees and the number of musicals they have been nominated.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee|
Please show the nominee who has been nominated the greatest number of times.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1|SELECT Nominee, COUNT(Nominee) as Total FROM musical GROUP BY Nominee ORDER BY Total DESC LIMIT 1
List the most common result of the musicals.|CREATE TABLE musical (RESULT VARCHAR)|SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1|
List the nominees that have been nominated more than two musicals.|CREATE TABLE musical (Nominee VARCHAR)|SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2|SELECT Nominee, COUNT(*) as frequency FROM musical GROUP BY Nominee HAVING frequency > 2
List the name of musicals that do not have actors.|CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)|SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)|SELECT m.Name FROM musical m LEFT JOIN actor a ON m.Musical_ID = a.Musical_ID WHERE a.Name IS NULL
"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award""."|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award"""|SELECT t1.Nominee FROM musical t1 JOIN musical t2 ON t1.Nominee = t2.Nominee WHERE t1.Award = 'Tony Award' AND t2.Award = 'Drama Desk Award'
"Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks""."|CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)|"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" OR Award = ""Cleavant Derricks"""|SELECT Nominee FROM musical WHERE Award='Bob Fosse' OR Award='Cleavant Derricks'
"Find the emails of the user named ""Mary""."|CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)|SELECT email FROM user_profiles WHERE name = 'Mary'|SELECT email FROM user_profiles WHERE name = 'Mary'
"What is the partition id of the user named ""Iron Man""."|CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)|SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'|SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'
How many users are there?|CREATE TABLE user_profiles (Id VARCHAR)|SELECT COUNT(*) FROM user_profiles|SELECT COUNT(Id) FROM user_profiles
How many followers does each user have?|CREATE TABLE follows (Id VARCHAR)|SELECT COUNT(*) FROM follows|
Find the number of followers for each user.|CREATE TABLE follows (f1 VARCHAR)|SELECT COUNT(*) FROM follows GROUP BY f1|SELECT f1 as user, COUNT(*) as followers FROM follows GROUP BY f1
Find the number of tweets in record.|CREATE TABLE tweets (Id VARCHAR)|SELECT COUNT(*) FROM tweets|SELECT COUNT(Id) FROM tweets
Find the number of users who posted some tweets.|CREATE TABLE tweets (UID VARCHAR)|SELECT COUNT(DISTINCT UID) FROM tweets|SELECT COUNT(DISTINCT UID) FROM tweets
Find the name and email of the user whose name contains the word ‘Swift’.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)|SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'|SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'
Find the names of users whose emails contain ‘superstar’ or ‘edu’.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)|SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'|SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'
Return the text of tweets about the topic 'intern'.|CREATE TABLE tweets (text VARCHAR)|SELECT text FROM tweets WHERE text LIKE '%intern%'|SELECT text FROM tweets WHERE text LIKE '%intern%'
Find the name and email of the users who have more than 1000 followers.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)|SELECT name, email FROM user_profiles WHERE followers > 1000|SELECT name, email FROM user_profiles WHERE followers > 1000
"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift""."|CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')|
Find the name and email for the users who have more than one follower.|CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)|SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1|
Find the names of users who have more than one tweet.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1|SELECT up.name FROM user_profiles up INNER JOIN (SELECT uid FROM tweets GROUP BY uid HAVING COUNT(uid) > 1) t ON up.uid = t.uid
Find the id of users who are followed by Mary and Susan.|CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)|"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Susan"""|SELECT user_profiles.uid FROM user_profiles JOIN follows as f1 ON user_profiles.uid = f1.f2 JOIN follows as f2 ON user_profiles.uid = f2.f2 WHERE f1.f1 = 'Mary' AND f2.f1 = 'Susan'
Find the id of users who are followed by Mary or Susan.|CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)|"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" OR T1.name = ""Susan"""|SELECT f1 AS uid FROM follows WHERE f2 IN ('Mary', 'Susan')
Find the name of the user who has the largest number of followers.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1
Find the name and email of the user followed by the least number of people.|CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)|SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1|SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1
List the name and number of followers for each user, and sort the results by the number of followers in descending order.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name, followers FROM user_profiles ORDER BY followers DESC|
List the names of 5 users followed by the largest number of other users.|CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5|SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5
List the text of all tweets in the order of date.|CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)|SELECT text FROM tweets ORDER BY createdate|SELECT text FROM tweets ORDER BY createdate
Find the name of each user and number of tweets tweeted by each of them.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid|SELECT user_profiles.name, COUNT(tweets.uid) AS number_of_tweets FROM user_profiles LEFT JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY user_profiles.name
Find the name and partition id for users who tweeted less than twice.|CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)|SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2|SELECT up.name, up.partitionid FROM user_profiles up JOIN (SELECT uid, COUNT(*) as tweet_count FROM tweets GROUP BY uid) t ON up.uid = t.uid WHERE t.tweet_count < 2
Find the name of the user who tweeted more than once, and number of tweets tweeted by them.|CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)|SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1|SELECT user_profiles.name, COUNT(tweets.uid) as number_of_tweets FROM user_profiles JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY user_profiles.name HAVING COUNT(tweets.uid) > 1
Find the average number of followers for the users who do not have any tweet.|CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)|SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)|
Find the average number of followers for the users who had some tweets.|CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)|SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)|SELECT AVG(user_profiles.followers) FROM user_profiles INNER JOIN tweets ON user_profiles.UID = tweets.UID
Find the maximum and total number of followers of all users.|CREATE TABLE user_profiles (followers INTEGER)|SELECT MAX(followers), SUM(followers) FROM user_profiles|SELECT MAX(followers) as maximum_followers, SUM(followers) as total_followers FROM user_profiles
Find the names of all the catalog entries.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)|SELECT DISTINCT (catalog_entry_name) FROM catalog_contents|SELECT catalog_entry_name FROM catalog_contents
Find the list of attribute data types possessed by more than 3 attribute definitions.|CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)|SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3|SELECT attribute_data_type, COUNT(attribute_data_type) as count FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_data_type) > 3
"What is the attribute data type of the attribute with name ""Green""?"|CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)|"SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green"""|SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'
Find the name and level of catalog structure with level between 5 and 10.|CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)|SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10|
"Find all the catalog publishers whose name contains ""Murray"""|CREATE TABLE catalogs (catalog_publisher VARCHAR)|"SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%"""|SELECT * FROM catalogs WHERE catalog_publisher LIKE '%Murray%'
Which catalog publisher has published the most catalogs?|CREATE TABLE catalogs (catalog_publisher VARCHAR)|SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1|
Find the names and publication dates of all catalogs that have catalog level number greater than 5.|CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)|SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5|
What are the entry names of catalog with the attribute possessed by most entries.|CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)|SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)|SELECT c.catalog_entry_name FROM Catalog_Contents c JOIN Catalog_Contents_Additional_Attributes a ON c.catalog_entry_id = a.catalog_entry_id WHERE a.attribute_value = (SELECT attribute_value FROM (SELECT attribute_value , COUNT(*) as cnt FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY cnt DESC LIMIT 1))
What is the entry name of the most expensive catalog (in USD)?|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
What is the level name of the cheapest catalog (in USD)?|CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)|SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1|SELECT catalog_structure.catalog_level_name FROM catalog_structure JOIN catalog_contents ON catalog_structure.catalog_level_number = catalog_contents.catalog_level_number ORDER BY CAST(catalog_contents.price_in_dollars AS FLOAT) ASC LIMIT 1
What are the average and minimum price (in Euro) of all products?|CREATE TABLE catalog_contents (price_in_euros INTEGER)|SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents|
What is the product with the highest height? Give me the catalog entry name.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
Find the name of the product that has the smallest capacity.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)|SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1|SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1
"Find the names of all the products whose stock number starts with ""2""."|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)|"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%"""|SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'
Find the names of catalog entries with level number 8.|CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)|"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = ""8"""|SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents INNER JOIN Catalog_Contents_Additional_Attributes ON Catalog_Contents_Additional_Attributes.catalog_entry_id = Catalog_Contents.catalog_entry_id WHERE Catalog_Contents_Additional_Attributes.catalog_level_number = '8'
Find the names of the products with length smaller than 3 or height greater than 5.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)|SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5|SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < '3' OR width > '5'
Find the name and attribute ID of the attribute definitions with attribute value 0.|CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)|SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0|SELECT Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_id FROM Attribute_Definitions JOIN Catalog_Contents_Additional_Attributes ON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id WHERE Catalog_Contents_Additional_Attributes.attribute_value = '0'
Find the name and capacity of products with price greater than 700 (in USD).|CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)|SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700|SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700
Find the dates on which more than one revisions were made.|CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)|SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1|SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(date_of_latest_revision) > 1
How many products are there in the records?|CREATE TABLE catalog_contents (Id VARCHAR)|SELECT COUNT(*) FROM catalog_contents|SELECT COUNT(Id) FROM catalog_contents
Name all the products with next entry ID greater than 8.|CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)|SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8|SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8
How many aircrafts do we have?|CREATE TABLE Aircraft (Id VARCHAR)|SELECT COUNT(*) FROM Aircraft|SELECT COUNT(*) FROM Aircraft
Show name and distance for all aircrafts.|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)|SELECT name, distance FROM Aircraft|SELECT name, distance FROM Aircraft
Show ids for all aircrafts with more than 1000 distance.|CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)|SELECT aid FROM Aircraft WHERE distance > 1000|
How many aircrafts have distance between 1000 and 5000?|CREATE TABLE Aircraft (distance INTEGER)|SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000|SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000
What is the name and distance for aircraft with id 12?|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)|SELECT name, distance FROM Aircraft WHERE aid = 12|SELECT name, distance FROM Aircraft WHERE aid = '12'
What is the minimum, average, and maximum distance of all aircrafts.|CREATE TABLE Aircraft (distance INTEGER)|SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft|
Show the id and name of the aircraft with the maximum distance.|CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)|SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1|
Show the name of aircrafts with top three lowest distances.|CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)|SELECT name FROM Aircraft ORDER BY distance LIMIT 3|SELECT name FROM (SELECT name, distance FROM Aircraft ORDER BY distance ASC LIMIT 3)
Show names for all aircrafts with distances more than the average.|CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)|SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)|SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)
How many employees do we have?|CREATE TABLE Employee (Id VARCHAR)|SELECT COUNT(*) FROM Employee|SELECT COUNT(*) FROM Employee
Show name and salary for all employees sorted by salary.|CREATE TABLE Employee (name VARCHAR, salary VARCHAR)|SELECT name, salary FROM Employee ORDER BY salary|SELECT name, salary FROM Employee ORDER BY salary
Show ids for all employees with at least 100000 salary.|CREATE TABLE Employee (eid VARCHAR, salary INTEGER)|SELECT eid FROM Employee WHERE salary > 100000|SELECT eid FROM Employee WHERE salary >= 100000
How many employees have salary between 100000 and 200000?|CREATE TABLE Employee (salary INTEGER)|SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000|SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000
What is the name and salary for employee with id 242518965?|CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)|SELECT name, salary FROM Employee WHERE eid = 242518965|SELECT name, salary FROM Employee WHERE eid = '242518965'
What is average and maximum salary of all employees.|CREATE TABLE Employee (salary INTEGER)|SELECT AVG(salary), MAX(salary) FROM Employee|SELECT AVG(salary) as average_salary, MAX(salary) as maximum_salary FROM Employee
Show the id and name of the employee with maximum salary.|CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)|SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1|
Show the name of employees with three lowest salaries.|CREATE TABLE Employee (name VARCHAR, salary VARCHAR)|SELECT name FROM Employee ORDER BY salary LIMIT 3|SELECT name FROM (SELECT name, salary FROM Employee ORDER BY salary ASC LIMIT 3)
Show names for all employees with salary more than the average.|CREATE TABLE Employee (name VARCHAR, salary INTEGER)|SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)|SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)
Show the id and salary of Mark Young.|CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)|SELECT eid, salary FROM Employee WHERE name = 'Mark Young'|SELECT eid, salary FROM Employee WHERE name = 'Mark Young'
How many flights do we have?|CREATE TABLE Flight (Id VARCHAR)|SELECT COUNT(*) FROM Flight|SELECT COUNT(Id) FROM Flight
Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.|CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)|SELECT flno, origin, destination FROM Flight ORDER BY origin|SELECT flno, origin, destination FROM Flight ORDER BY origin
Show all flight number from Los Angeles.|CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)|"SELECT flno FROM Flight WHERE origin = ""Los Angeles"""|SELECT flno FROM Flight WHERE origin = 'Los Angeles'
Show origins of all flights with destination Honolulu.|CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)|"SELECT origin FROM Flight WHERE destination = ""Honolulu"""|SELECT origin FROM Flight WHERE destination = 'Honolulu'
Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.|CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)|"SELECT departure_date, arrival_date FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""|SELECT departure_date, arrival_date FROM Flight WHERE origin='Los Angeles' AND destination='Honolulu'
Show flight number for all flights with more than 2000 distance.|CREATE TABLE Flight (flno VARCHAR, distance INTEGER)|SELECT flno FROM Flight WHERE distance > 2000|
What is the average price for flights from Los Angeles to Honolulu.|CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)|"SELECT AVG(price) FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""|SELECT AVG(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'
Show origin and destination for flights with price higher than 300.|CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)|SELECT origin, destination FROM Flight WHERE price > 300|SELECT origin, destination FROM Flight WHERE price > 300
Show the flight number and distance of the flight with maximum price.|CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)|SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1|SELECT flno, distance FROM Flight WHERE price = (SELECT MAX(price) FROM Flight)
Show the flight number of flights with three lowest distances.|CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)|SELECT flno FROM Flight ORDER BY distance LIMIT 3|SELECT flno FROM Flight ORDER BY CAST(distance AS INTEGER) ASC LIMIT 3
What is the average distance and average price for flights from Los Angeles.|CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)|"SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = ""Los Angeles"""|SELECT AVG(distance) as average_distance, AVG(price) as average_price FROM Flight WHERE origin = 'Los Angeles'
Show all origins and the number of flights from each origin.|CREATE TABLE Flight (origin VARCHAR)|SELECT origin, COUNT(*) FROM Flight GROUP BY origin|
Show all destinations and the number of flights to each destination.|CREATE TABLE Flight (destination VARCHAR)|SELECT destination, COUNT(*) FROM Flight GROUP BY destination|SELECT destination, COUNT(*) AS number_of_flights FROM Flight GROUP BY destination
Which origin has most number of flights?|CREATE TABLE Flight (origin VARCHAR)|SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1|
Which destination has least number of flights?|CREATE TABLE Flight (destination VARCHAR)|SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1|
What is the aircraft name for the flight with number 99|CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)|SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99|
Show all flight numbers with aircraft Airbus A340-300.|CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ""Airbus A340-300"""|
Show aircraft names and number of flights for each aircraft.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)|SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid|SELECT a.name, COUNT(f.aid) as number_of_flights FROM Aircraft a, Flight f WHERE a.aid = f.aid GROUP BY a.name
Show names for all aircraft with at least two flights.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)|SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2|
How many employees have certificate.|CREATE TABLE Certificate (eid VARCHAR)|SELECT COUNT(DISTINCT eid) FROM Certificate|SELECT COUNT(eid) FROM Certificate
Show ids for all employees who don't have a certificate.|CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)|SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate|SELECT eid FROM Employee WHERE eid NOT IN (SELECT eid FROM Certificate)
Show names for all aircrafts of which John Williams has certificates.|CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)|"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = ""John Williams"""|SELECT Aircraft.name FROM Aircraft INNER JOIN Certificate ON Aircraft.aid = Certificate.aid INNER JOIN Employee ON Certificate.eid = Employee.eid WHERE Employee.name = 'John Williams'
Show names for all employees who have certificate of Boeing 737-800.|CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""|SELECT Employee.name FROM Employee JOIN Certificate ON Employee.eid = Certificate.eid JOIN Aircraft ON Certificate.aid = Aircraft.aid WHERE Aircraft.name = 'Boeing 737-800'
Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.|CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Airbus A340-300"""|SELECT E.name FROM Employee E JOIN Certificate C ON E.eid = C.eid JOIN Aircraft A ON C.aid = A.aid WHERE A.name IN ('Boeing 737-800', 'Airbus A340-300') GROUP BY E.name HAVING COUNT(DISTINCT A.name) = 2
Show names for all employees who do not have certificate of Boeing 737-800.|CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)|"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""|SELECT name FROM Employee WHERE eid NOT IN (SELECT eid FROM Certificate WHERE aid IN (SELECT aid FROM Aircraft WHERE name = 'Boeing 737-800'))
Show the name of aircraft which fewest people have its certificate.|CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)|SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1|SELECT Aircraft.name FROM Aircraft INNER JOIN (SELECT aid, COUNT(aid) AS count FROM Certificate GROUP BY aid ORDER BY count ASC LIMIT 1) AS FewestCertificates ON Aircraft.aid = FewestCertificates.aid
Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.|CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)|SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5|SELECT a.name, a.distance FROM Aircraft a JOIN (SELECT c.aid FROM Certificate c GROUP BY c.aid HAVING COUNT(*) >= 5) b ON a.aid = b.aid WHERE a.distance > 5000
what is the salary and name of the employee who has the most number of aircraft certificates?|CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)|SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1|SELECT E.name, E.salary FROM Employee E INNER JOIN (SELECT eid, COUNT(*) as cert_count FROM Certificate GROUP BY eid ORDER BY cert_count DESC LIMIT 1) C on E.eid = C.eid
What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?|CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)|SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1|SELECT E.name, E.salary FROM Employee E INNER JOIN (SELECT C.eid, COUNT(*) AS certificate_count FROM Certificate C WHERE C.aid IN (SELECT A.aid FROM Aircraft A WHERE A.distance > 5000) GROUP BY C.eid ORDER BY certificate_count DESC LIMIT 1) AS R ON E.eid = R.eid
How many allergies are there?|CREATE TABLE Allergy_type (allergy VARCHAR)|SELECT COUNT(DISTINCT allergy) FROM Allergy_type|SELECT COUNT(DISTINCT allergy) FROM Allergy_type
How many different allergy types exist?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT COUNT(DISTINCT allergytype) FROM Allergy_type|SELECT COUNT(DISTINCT allergytype) FROM Allergy_type
Show all allergy types.|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT DISTINCT allergytype FROM Allergy_type|SELECT * FROM Allergy_type
Show all allergies and their types.|CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|SELECT allergy, allergytype FROM Allergy_type|SELECT * FROM Allergy_type
Show all allergies with type food.|CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = ""food"""|SELECT * FROM Allergy_type WHERE allergytype = 'food'
What is the type of allergy Cat?|CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)|"SELECT allergytype FROM Allergy_type WHERE allergy = ""Cat"""|SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'
How many allergies have type animal?|CREATE TABLE Allergy_type (allergytype VARCHAR)|"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = ""animal"""|SELECT COUNT(*) FROM Allergy_type WHERE allergytype='animal'
Show all allergy types and the number of allergies in each type.|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype|
Which allergy type has most number of allergies?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1|SELECT allergytype, COUNT(allergytype) AS count FROM Allergy_type GROUP BY allergytype ORDER BY count DESC LIMIT 1
Which allergy type has least number of allergies?|CREATE TABLE Allergy_type (allergytype VARCHAR)|SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1|
How many students are there?|CREATE TABLE Student (Id VARCHAR)|SELECT COUNT(*) FROM Student|
Show first name and last name for all students.|CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)|SELECT Fname, Lname FROM Student|SELECT Fname, Lname FROM Student
How many different advisors are listed?|CREATE TABLE Student (advisor VARCHAR)|SELECT COUNT(DISTINCT advisor) FROM Student|SELECT COUNT(DISTINCT advisor) FROM Student
Show all majors.|CREATE TABLE Student (Major VARCHAR)|SELECT DISTINCT Major FROM Student|SELECT Major FROM Student
Show all cities where students live.|CREATE TABLE Student (city_code VARCHAR)|SELECT DISTINCT city_code FROM Student|SELECT DISTINCT city_code FROM Student
Show first name, last name, age for all female students. Their sex is F.|CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)|SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'|SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'
Show student ids for all male students.|CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)|SELECT StuID FROM Student WHERE Sex = 'M'|SELECT StuID FROM Student WHERE Sex = 'Male'
How many students are age 18?|CREATE TABLE Student (age VARCHAR)|SELECT COUNT(*) FROM Student WHERE age = 18|SELECT COUNT(*) FROM Student WHERE age = '18'
Show all student ids who are older than 20.|CREATE TABLE Student (StuID VARCHAR, age INTEGER)|SELECT StuID FROM Student WHERE age > 20|SELECT StuID FROM Student WHERE age > 20
"Which city does the student whose last name is ""Kim"" live in?"|CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)|"SELECT city_code FROM Student WHERE LName = ""Kim"""|SELECT city_code FROM Student WHERE LName = 'Kim'
Who is the advisor of student with ID 1004?|CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)|SELECT Advisor FROM Student WHERE StuID = 1004|
How many students live in HKG or CHI?|CREATE TABLE Student (city_code VARCHAR)|"SELECT COUNT(*) FROM Student WHERE city_code = ""HKG"" OR city_code = ""CHI"""|
Show the minimum, average, and maximum age of all students.|CREATE TABLE Student (age INTEGER)|SELECT MIN(age), AVG(age), MAX(age) FROM Student|SELECT MIN(age) as Minimum_age, AVG(age) as Average_age, MAX(age) as Maximum_age FROM Student
What is the last name of the youngest student?|CREATE TABLE Student (LName VARCHAR, age INTEGER)|SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)|
Show the student id of the oldest student.|CREATE TABLE Student (StuID VARCHAR, age INTEGER)|SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)|SELECT StuID FROM Student ORDER BY age DESC LIMIT 1
Show all majors and corresponding number of students.|CREATE TABLE Student (major VARCHAR)|SELECT major, COUNT(*) FROM Student GROUP BY major|SELECT major, COUNT(*) as number_of_students FROM Student GROUP BY major
Which major has most number of students?|CREATE TABLE Student (major VARCHAR)|SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1|SELECT major, COUNT(*) AS count FROM Student GROUP BY major ORDER BY count DESC LIMIT 1
Show all ages and corresponding number of students.|CREATE TABLE Student (age VARCHAR)|SELECT age, COUNT(*) FROM Student GROUP BY age|SELECT age, COUNT(*) AS number_of_students FROM Student GROUP BY age
Show the average age for male and female students.|CREATE TABLE Student (sex VARCHAR, age INTEGER)|SELECT AVG(age), sex FROM Student GROUP BY sex|SELECT sex, AVG(age) from Student GROUP BY sex
Show all cities and corresponding number of students.|CREATE TABLE Student (city_code VARCHAR)|SELECT city_code, COUNT(*) FROM Student GROUP BY city_code|
Show all advisors and corresponding number of students.|CREATE TABLE Student (advisor VARCHAR)|SELECT advisor, COUNT(*) FROM Student GROUP BY advisor|SELECT advisor, COUNT(*) AS numberOfStudents FROM Student GROUP BY advisor
Which advisor has most number of students?|CREATE TABLE Student (advisor VARCHAR)|SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1|
How many students have cat allergies?|CREATE TABLE Has_allergy (Allergy VARCHAR)|"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = ""Cat"""|SELECT COUNT(*) FROM Has_allergy WHERE Allergy='cat'
Show all student IDs who have at least two allergies.|CREATE TABLE Has_allergy (StuID VARCHAR)|SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2|SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(StuID) >= 2
What are the student ids of students who don't have any allergies?|CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)|SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy|SELECT Student.StuID FROM Student LEFT JOIN Has_allergy ON Student.StuID = Has_allergy.StuID WHERE Has_allergy.StuID IS NULL
How many female students have milk or egg allergies?|CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)|"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = ""F"" AND T1.allergy = ""Milk"" OR T1.allergy = ""Eggs"""|SELECT COUNT(DISTINCT s.StuID) FROM Student s INNER JOIN has_allergy h ON s.StuID = h.StuID WHERE s.sex = 'female' AND (h.allergy = 'milk' OR h.allergy = 'egg')
How many students have a food allergy?|CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)|"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = ""food"""|
Which allergy has most number of students affected?|CREATE TABLE Has_allergy (Allergy VARCHAR)|SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1|SELECT Allergy, COUNT(*) as count FROM Has_allergy GROUP BY Allergy ORDER BY count DESC LIMIT 1
Show all allergies with number of students affected.|CREATE TABLE Has_allergy (Allergy VARCHAR)|SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy|
Show all allergy type with number of students affected.|CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)|SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype|
Find the last name and age of the student who has allergy to both milk and cat.|CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"|SELECT lname, age FROM (SELECT lname, age FROM Has_allergy WHERE Allergy = 'milk') AS milk_allergy INNER JOIN (SELECT lname, age FROM Has_allergy WHERE Allergy = 'cat') AS cat_allergy ON milk_allergy.lname = cat_allergy.lname AND milk_allergy.age = cat_allergy.age
What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.|CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)|"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = ""Lisa"" ORDER BY T1.Allergy"|SELECT ha.Allergy, at.AllergyType FROM Has_allergy ha JOIN Student s ON ha.StuID = s.StuID JOIN Allergy_type at ON ha.Allergy = at.Allergy WHERE s.Fname = 'Lisa' ORDER BY ha.Allergy
Find the first name and gender of the student who has allergy to milk but not cat.|CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"|
Find the average age of the students who have allergies with food and animal types.|CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)|"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""animal"")"|SELECT AVG(Student.age) FROM Student INNER JOIN Has_allergy ON Student.StuID = Has_allergy.StuID INNER JOIN Allergy_Type ON Has_allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.allergytype IN ('food', 'animal')
List the first and last name of the students who do not have any food type allergy.|CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"|SELECT Student.fname, Student.lname FROM Student WHERE Student.StuID NOT IN (SELECT Has_allergy.StuID FROM Has_allergy INNER JOIN Allergy_Type On Has_allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.allergytype = 'food')
Find the number of male (sex is 'M') students who have some food type allery.|CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)|"SELECT COUNT(*) FROM Student WHERE sex = ""M"" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"|SELECT COUNT(DISTINCT s.StuID) FROM Student s JOIN Has_allergy h ON s.StuID = h.StuID JOIN Allergy_Type a ON h.Allergy = a.Allergy WHERE s.sex = 'M' AND a.allergytype = 'food'
Find the different first names and cities of the students who have allergy to milk or cat.|CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)|"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = ""Milk"" OR T2.Allergy = ""Cat"""|SELECT DISTINCT s.fname, s.city_code FROM Student s INNER JOIN Has_Allergy h ON s.stuid = h.stuid WHERE h.Allergy IN ('milk', 'cat')
Find the number of students who are older than 18 and do not have allergy to either food or animal.|CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)|"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" OR T2.allergytype = ""animal"")"|SELECT COUNT(*) FROM (Student LEFT JOIN Has_allergy ON Student.StuID = Has_allergy.Allergy) WHERE Student.age > 18 AND (Has_allergy.Allergy != 'food' AND Has_allergy.Allergy != 'animal')
Find the first name and major of the students who are not allegry to soy.|CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)|"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Soy"")"|
A list of the top 5 countries by number of invoices. List country name and number of invoices.|CREATE TABLE invoices (billing_country VARCHAR)|SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5|
A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.|CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)|SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8|
A list of the top 10 countries by average invoice size. List country name and average invoice size.|CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)|SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10|SELECT billing_country, AVG(total) as average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC LIMIT 10
Find out 5 customers who most recently purchased something. List customers' first and last name.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)|SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5|SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5
Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)|SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10|
List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.|CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)|SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10|SELECT c.first_name, c.last_name, SUM(i.total) AS total_gross_sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_gross_sales DESC LIMIT 10
List the top 5 genres by number of tracks. List genres name and total tracks.|CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)|SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5|SELECT g.name, COUNT(*) as total_tracks FROM tracks t JOIN genres g ON t.genre_id = g.id GROUP BY g.name ORDER BY total_tracks DESC LIMIT 5
List every album's title.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums|
List every album ordered by album title in ascending order.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums ORDER BY title|SELECT * FROM albums ORDER BY title ASC
List every album whose title starts with A in alphabetical order.|CREATE TABLE albums (title VARCHAR)|SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title|SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC
List the customers first and last name of 10 least expensive invoices.|CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)|SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10|
List total amount of  invoice from Chicago, IL.|CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)|"SELECT SUM(total) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""|SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'
List the number of invoices from Chicago, IL.|CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)|"SELECT COUNT(*) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""|
List the number of invoices from the US, grouped by state.|CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)|"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state"|
List the state in the US with the most invoices.|CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)|"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"|SELECT billing_state, COUNT(*) as count FROM invoices WHERE billing_country = 'US' GROUP BY billing_state ORDER BY count DESC LIMIT 1
List the number of invoices and the invoice total from California.|CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)|"SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = ""CA"""|SELECT COUNT(*), SUM(total) FROM invoices WHERE billing_state = 'California'
List Aerosmith's albums.|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)|"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Aerosmith"""|SELECT albums.title FROM albums INNER JOIN artists ON albums.artist_id = artists.id WHERE artists.name = 'Aerosmith'
How many albums does Billy Cobham has?|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)|"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Billy Cobham"""|
Eduardo Martins is a customer at which company?|CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins"""|SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'
What is Astrid Gruber's email and phone number?|CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT email, phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"""|SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'
How many customers live in Prague city?|CREATE TABLE customers (city VARCHAR)|"SELECT COUNT(*) FROM customers WHERE city = ""Prague"""|SELECT COUNT(*) FROM customers WHERE city = 'Prague'
How many customers in state of CA?|CREATE TABLE customers (state VARCHAR)|"SELECT COUNT(*) FROM customers WHERE state = ""CA"""|SELECT COUNT(*) FROM customers WHERE state = 'CA'
What country does Roberto Almeida live?|CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"""|SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'
List the name of albums that are released by aritist whose name has 'Led'|CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)|SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'|SELECT a.title FROM albums a JOIN artists ar ON a.artist_id = ar.id WHERE ar.name LIKE '%Led%'
How many customers does Steve Johnson support?|CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)|"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson"""|SELECT COUNT(*) AS number_of_customers FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson')
What is the title, phone and hire date of Nancy Edwards?|CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT title, phone, hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'
find the full name of employees who report to Nancy Edwards?|CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)|"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = ""Nancy"" AND T1.last_name = ""Edwards"""|SELECT first_name, last_name FROM employees WHERE reports_to = 'Nancy Edwards'
What is the address of employee Nancy Edwards?|CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'
Find the full name of employee who supported the most number of customers.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)|SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1|SELECT employees.first_name, employees.last_name FROM employees JOIN customers on employees.id=customers.support_rep_id GROUP BY employees.id ORDER BY COUNT(customers.support_rep_id) DESC LIMIT 1
How many employees are living in Canada?|CREATE TABLE employees (country VARCHAR)|"SELECT COUNT(*) FROM employees WHERE country = ""Canada"""|SELECT count(*) FROM employees WHERE country = 'Canada'
What is employee Nancy Edwards's phone number?|CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""|SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'
Who is the youngest employee in the company? List employee's first and last name.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)|SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1|
List top 10 employee work longest in the company. List employee's first and last name.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)|SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10|
Find the number of employees whose title is IT Staff from each city?|CREATE TABLE employees (city VARCHAR, title VARCHAR)|SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city|SELECT city, COUNT(*) FROM employees WHERE title = 'IT Staff' GROUP BY city
Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.|CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)|SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1|SELECT e1.first_name, e1.last_name, COUNT(e2.reports_to) as number_of_reports FROM employees e1 JOIN employees e2 ON e1.id = e2.reports_to GROUP BY e1.first_name, e1.last_name ORDER BY number_of_reports DESC LIMIT 1
How many orders does Lucas Mancini has?|CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""|SELECT COUNT(invoices.customer_id) AS number_of_orders FROM invoices JOIN customers ON invoices.customer_id = customers.id WHERE customers.first_name = 'Lucas' AND customers.last_name = 'Mancini'
What is the total amount of money spent by Lucas Mancini?|CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""|SELECT SUM(invoices.total) FROM invoices INNER JOIN customers ON invoices.customer_id = customers.id WHERE customers.first_name = 'Lucas' AND customers.last_name = 'Mancini'
List all media types.|CREATE TABLE media_types (name VARCHAR)|SELECT name FROM media_types|SELECT name FROM media_types
List all different genre types.|CREATE TABLE genres (name VARCHAR)|SELECT DISTINCT name FROM genres|SELECT DISTINCT name FROM genres
List the name of all playlist.|CREATE TABLE playlists (name VARCHAR)|SELECT name FROM playlists|SELECT name FROM playlists
Who is the composer of track Fast As a Shark?|CREATE TABLE tracks (composer VARCHAR, name VARCHAR)|"SELECT composer FROM tracks WHERE name = ""Fast As a Shark"""|
How long does track Fast As a Shark has?|CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)|"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"""|
What is the name of tracks whose genre is Rock?|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"""|SELECT tracks.name FROM tracks INNER JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock'
What is title of album which track Balls to the Wall belongs to?|CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)|"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = ""Balls to the Wall"""|SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.id WHERE tracks.name = 'Balls to the Wall'
List name of all tracks in Balls to the Wall.|CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)|"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall"""|SELECT name FROM tracks INNER JOIN albums ON albums.id = tracks.genre_id WHERE albums.title = 'Balls to the Wall'
List title of albums have the number of tracks greater than 10.|CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)|SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10|SELECT a.title FROM (SELECT album_id, COUNT(*) as track_count FROM tracks GROUP BY album_id) t INNER JOIN albums a ON t.album_id=a.id WHERE t.track_count > 10
List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" AND T3.name = ""MPEG audio file"""|SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id JOIN media_types ON tracks.media_type_id = media_types.id WHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio file'
List the name of tracks belongs to genre Rock or media type is MPEG audio file.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" OR T3.name = ""MPEG audio file"""|SELECT t.name FROM tracks t LEFT JOIN genres g ON t.genre_id = g.id LEFT JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' OR m.name = 'MPEG audio file'
List the name of tracks belongs to genre Rock or genre Jazz.|CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)|"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"" OR T1.name = ""Jazz"""|SELECT tracks.name FROM tracks INNER JOIN genres ON tracks.genre_id = genres.id WHERE genres.name IN ('Rock', 'Jazz')
List the name of all tracks in the playlists of Movies.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = ""Movies"""|SELECT tracks.name FROM ((playlists INNER JOIN playlist_tracks ON playlists.id=playlist_tracks.playlist_id) INNER JOIN tracks ON playlist_tracks.track_id=tracks.id) WHERE playlists.name='Movies'
List the name of playlist which has number of tracks greater than 100.|CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)|SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100|SELECT p.name FROM playlists p JOIN playlist_tracks pt ON p.id = pt.playlist_id GROUP BY p.name HAVING COUNT(pt.track_id) > 100
List all tracks bought by customer Daan Peeters.|CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)|"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters"""|SELECT t.name FROM tracks AS t JOIN invoice_lines as il ON t.id = il.track_id JOIN invoices as i ON il.invoice_id = i.id JOIN customers as c ON i.customer_id = c.id WHERE c.first_name = 'Daan' AND c.last_name = 'Peeters'
How much is the track Fast As a Shark?|CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)|"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"""|SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'
Find the name of tracks which are in Movies playlist but not in music playlist.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Movies' AND tracks.id NOT IN (SELECT track_id FROM playlist_tracks INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'music')
Find the name of tracks which are in both Movies and music playlists.|CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)|SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'|SELECT t1.name FROM (SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Movies') AS t1 INNER JOIN (SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Music') AS t2 ON t1.name = t2.name
Find number of tracks in each genre?|CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)|SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name|SELECT genres.name, COUNT(tracks.genre_id) as number_of_tracks FROM tracks INNER JOIN genres on tracks.genre_id = genres.id GROUP BY genres.name
How many editors are there?|CREATE TABLE editor (Id VARCHAR)|SELECT COUNT(*) FROM editor|
List the names of editors in ascending order of age.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age|SELECT Name FROM editor ORDER BY Age ASC
What are the names and ages of editors?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name, Age FROM editor|SELECT Name, Age FROM editor
List the names of editors who are older than 25.|CREATE TABLE editor (Name VARCHAR, Age INTEGER)|SELECT Name FROM editor WHERE Age > 25|
Show the names of editors of age either 24 or 25.|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor WHERE Age = 24 OR Age = 25|SELECT Name FROM editor WHERE Age IN ('24', '25')
What is the name of the youngest editor?|CREATE TABLE editor (Name VARCHAR, Age VARCHAR)|SELECT Name FROM editor ORDER BY Age LIMIT 1|
What are the different ages of editors? Show each age along with the number of editors of that age.|CREATE TABLE editor (Age VARCHAR)|SELECT Age, COUNT(*) FROM editor GROUP BY Age|SELECT Age, COUNT(*) as number_of_editors FROM editor GROUP BY Age
Please show the most common age of editors.|CREATE TABLE editor (Age VARCHAR)|SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1|SELECT Age, COUNT(Age) AS frequency FROM editor GROUP BY Age ORDER BY frequency DESC LIMIT 1
Show the distinct themes of journals.|CREATE TABLE journal (Theme VARCHAR)|SELECT DISTINCT Theme FROM journal|SELECT DISTINCT Theme FROM journal
Show the names of editors and the theme of journals for which they serve on committees.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID|SELECT editor.Name, journal.Theme FROM journal_committee JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID
Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)|SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme|SELECT E.Name, E.age, J.Theme FROM editor E JOIN journal_committee JC ON E.Editor_ID = JC.Editor_ID JOIN journal J ON JC.Journal_ID = J.Journal_ID ORDER BY J.Theme
Show the names of editors that are on the committee of journals with sales bigger than 3000.|CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)|SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000|SELECT e.Name FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID WHERE j.Sales > 3000
Show the id, name of each editor and the number of journal committees they are on.|CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id|SELECT editor.editor_id, editor.Name, COUNT(journal_committee.Editor_ID) as num_committees FROM editor LEFT JOIN journal_committee ON editor.editor_id = journal_committee.Editor_ID GROUP BY editor.editor_id, editor.Name
Show the names of editors that are on at least two journal committees.|CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)|SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2|
List the names of editors that are not on any journal committee.|CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)|SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)|SELECT e.Name FROM editor e LEFT JOIN journal_committee j ON e.editor_id = j.editor_id WHERE j.editor_id IS NULL
List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.|CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)|SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID|SELECT date, theme, sales FROM journal WHERE journal_ID NOT IN (SELECT journal_ID FROM journal_committee)
What is the average sales of the journals that have an editor whose work type is 'Photo'?|CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)|SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'|SELECT AVG(j.sales) FROM journal AS j INNER JOIN journal_committee AS jc ON j.journal_ID = jc.journal_ID WHERE jc.work_type = 'Photo'
How many accounts do we have?|CREATE TABLE Accounts (Id VARCHAR)|SELECT COUNT(*) FROM Accounts|SELECT COUNT(*) FROM Accounts
Show ids, customer ids, names for all accounts.|CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)|SELECT account_id, customer_id, account_name FROM Accounts|SELECT account_id, customer_id, account_name FROM Accounts
Show other account details for account with name 338.|CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)|"SELECT other_account_details FROM Accounts WHERE account_name = ""338"""|SELECT other_account_details FROM Accounts WHERE account_name = '338'
What is the first name, last name, and phone of the customer with account name 162?|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""162"""|SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '162'
How many accounts does the customer with first name Art and last name Turcotte have?|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|
Show all customer ids and the number of accounts for each customer.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id|SELECT customer_id, COUNT(*) as number_of_accounts FROM Accounts GROUP BY customer_id
Show the customer id and number of accounts with most accounts.|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id, COUNT(customer_id) AS Number_of_accounts FROM Accounts GROUP BY customer_id ORDER BY Number_of_accounts DESC LIMIT 1
What is the customer first, last name and id with least number of accounts.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_id FROM Customers INNER JOIN (SELECT customer_id, COUNT(*) AS num_accounts FROM Accounts GROUP BY customer_id ORDER BY num_accounts LIMIT 1) AS account_counts ON Customers.customer_id = account_counts.customer_id
Show the number of all customers without an account.|CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)|
Show the first names and last names of customers without any account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)|SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
Show distinct first and last names for all customers with an account.|CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id|SELECT DISTINCT Customers.customer_first_name, Customers.customer_last_name FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id
How many customers have an account?|CREATE TABLE Accounts (customer_id VARCHAR)|SELECT COUNT(DISTINCT customer_id) FROM Accounts|
How many customers do we have?|CREATE TABLE Customers (Id VARCHAR)|SELECT COUNT(*) FROM Customers|
Show ids, first names, last names, and phones for all customers.|CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers|SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers
What is the phone and email for customer with first name Aniyah and last name Feest?|CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = ""Aniyah"" AND customer_last_name = ""Feest"""|SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'
Show the number of customer cards.|CREATE TABLE Customers_cards (Id VARCHAR)|SELECT COUNT(*) FROM Customers_cards|
Show ids, customer ids, card type codes, card numbers for all cards.|CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards|SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards
Show the date valid from and the date valid to for the card with card number '4560596484842'.|CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)|"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = ""4560596484842"""|SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number='4560596484842'
What is the first name, last name, and phone of the customer with card 4560596484842.|CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)|"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = ""4560596484842"""|SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone FROM Customers JOIN Customers_cards ON Customers.customer_id = Customers_cards.customer_id WHERE Customers_cards.card_number = '4560596484842'
How many cards does customer Art Turcotte have?|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""|SELECT COUNT(Customers_cards.customer_id) FROM Customers_cards JOIN Customers ON Customers_cards.customer_id = Customers.customer_id WHERE Customers.customer_first_name = 'Art' AND Customers.customer_last_name = 'Turcotte'
How many debit cards do we have?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = ""Debit"""|SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = 'debit'
How many credit cards does customer Blanche Huels have?|CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)|"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Blanche"" AND T2.customer_last_name = ""Huels"" AND T1.card_type_code = ""Credit"""|SELECT COUNT(*) FROM Customers_cards WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Blanche' AND customer_last_name = 'Huels')
Show all customer ids and the number of cards owned by each customer.|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id|SELECT customer_id, COUNT(customer_id) as number_of_cards FROM Customers_cards GROUP BY customer_id
What is the customer id with most number of cards, and how many does he have?|CREATE TABLE Customers_cards (customer_id VARCHAR)|SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT customer_id, COUNT(*) as count FROM Customers_cards GROUP BY customer_id ORDER BY count DESC LIMIT 1
Show id, first and last names for all customers with at least two cards.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2|SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers AS c JOIN (SELECT cc.customer_id FROM Customers_cards AS cc GROUP BY cc.customer_id HAVING COUNT(cc.customer_id) >= 2) AS subq ON c.customer_id = subq.customer_id
What is the customer id, first and last name with least number of accounts.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)|SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1|SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers LEFT JOIN Customers_cards ON Customers.customer_id = Customers_cards.customer_id GROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name ORDER BY COUNT(Customers_cards.customer_id) ASC LIMIT 1
Show all card type codes and the number of cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code|SELECT card_type_code, COUNT(*) as number_of_cards FROM Customers_cards GROUP BY card_type_code
What is the card type code with most number of cards?|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1|SELECT card_type_code, COUNT(*) as count FROM Customers_cards GROUP BY card_type_code ORDER BY count DESC LIMIT 1
Show card type codes with at least 5 cards.|CREATE TABLE Customers_cards (card_type_code VARCHAR)|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5|SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5
Show all card type codes and the number of customers holding cards in each type.|CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)|SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code|
Show the customer ids and firstname without a credit card.|CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)|"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = ""Credit"""|SELECT Customers.customer_id, Customers.customer_first_name FROM Customers LEFT JOIN Customers_cards ON Customers.customer_id = Customers_cards.customer_id WHERE Customers_cards.customer_id IS NULL
Show all card type codes.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT DISTINCT card_type_code FROM Customers_Cards|SELECT card_type_code FROM Customers_Cards
Show the number of card types.|CREATE TABLE Customers_Cards (card_type_code VARCHAR)|SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards|SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards
Show all transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT DISTINCT transaction_type FROM Financial_Transactions|
Show the number of transaction types.|CREATE TABLE Financial_Transactions (transaction_type VARCHAR)|SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions|SELECT transaction_type, COUNT(transaction_type) as num_transaction_types FROM Financial_Transactions GROUP BY transaction_type
What is the average and total transaction amount?|CREATE TABLE Financial_transactions (transaction_amount INTEGER)|SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions|SELECT AVG(transaction_amount) as average_transaction_amount, SUM(transaction_amount) as total_transaction_amount FROM Financial_transactions
Show the card type codes and the number of transactions.|CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)|SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code|SELECT cc.card_type_code, COUNT(ft.card_id) as number_of_transactions FROM Customers_cards cc JOIN Financial_transactions ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code
Show the transaction type and the number of transactions.|CREATE TABLE Financial_transactions (transaction_type VARCHAR)|SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type|SELECT transaction_type, COUNT(*) as number_of_transactions FROM Financial_transactions GROUP BY transaction_type
What is the transaction type that has processed the greatest total amount in transactions?|CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)|SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1|SELECT transaction_type, SUM(transaction_amount) as total_amount FROM Financial_transactions GROUP BY transaction_type ORDER BY total_amount DESC LIMIT 1
Show the account id and the number of transactions for each account|CREATE TABLE Financial_transactions (account_id VARCHAR)|SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id|SELECT account_id, COUNT(*) as number_of_transactions FROM Financial_transactions GROUP BY account_id
How many tracks do we have?|CREATE TABLE track (Id VARCHAR)|SELECT COUNT(*) FROM track|SELECT COUNT(*) FROM track
Show the name and location for all tracks.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)|SELECT name, LOCATION FROM track|SELECT name, location FROM track
Show names and seatings, ordered by seating for all tracks opened after 2000.|CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)|SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating|
What is the name, location and seating for the most recently opened track?|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)|SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1|SELECT name, location, seating FROM track ORDER BY year_opened DESC LIMIT 1
What is the minimum, maximum, and average seating for all tracks.|CREATE TABLE track (seating INTEGER)|SELECT MIN(seating), MAX(seating), AVG(seating) FROM track|
Show the name, location, open year for all tracks with a seating higher than the average.|CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)|SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)|SELECT name, location, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)
What are distinct locations where tracks are located?|CREATE TABLE track (LOCATION VARCHAR)|SELECT DISTINCT LOCATION FROM track|SELECT DISTINCT LOCATION FROM track
How many races are there?|CREATE TABLE race (Id VARCHAR)|SELECT COUNT(*) FROM race|SELECT COUNT(Id) FROM race
What are the distinct classes that races can have?|CREATE TABLE race (CLASS VARCHAR)|SELECT DISTINCT CLASS FROM race|SELECT DISTINCT CLASS FROM race
Show name, class, and date for all races.|CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)|SELECT name, CLASS, date FROM race|SELECT name, CLASS, date FROM race
Show the race class and number of races in each class.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS|
What is the race class with most number of races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1|SELECT CLASS, COUNT(*) as count FROM race GROUP BY CLASS ORDER BY count DESC LIMIT 1
List the race class with at least two races.|CREATE TABLE race (CLASS VARCHAR)|SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2|
What are the names for tracks without a race in class 'GT'.|CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'|SELECT t.name FROM track as t WHERE t.track_id NOT IN (SELECT r.track_id  FROM race as r WHERE r.class = 'GT')
Show all track names that have had no races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)|SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)|SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)
Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.|CREATE TABLE track (year_opened VARCHAR, seating INTEGER)|SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000|SELECT year_opened FROM track WHERE seating >= 5000 UNION SELECT year_opened FROM track WHERE seating <= 4000
Show the name of track and the number of races in each track.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id|
Show the name of track with most number of races.|CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)|SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT track.name FROM track INNER JOIN race ON track.track_id = race.track_id GROUP BY track.track_id ORDER BY COUNT(race.track_id) DESC LIMIT 1
Show the name and date for each race and its track name.|CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)|SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id|SELECT race.name, race.date, track.name FROM race JOIN track ON race.track_id = track.track_id
Show the name and location of track with 1 race.|CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)|SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1|SELECT t.name, t.location FROM track t LEFT JOIN race r ON t.track_id = r.track_id GROUP BY r.track_id HAVING COUNT(*) = 1
Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.|CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000|SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000
How many members have the black membership card?|CREATE TABLE member (Membership_card VARCHAR)|SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'|SELECT COUNT(*) FROM member WHERE Membership_card = 'black'
Find the number of members living in each address.|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*), address FROM member GROUP BY address|
Give me the names of members whose address is in Harford or Waterbury.|CREATE TABLE member (name VARCHAR, address VARCHAR)|SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'|
Find the ids and names of members who are under age 30 or with black membership card.|CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)|SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30|SELECT name, member_id FROM member WHERE age < 30 OR Membership_card = 'black'
Find the purchase time, age and address of each member, and show the results in the order of purchase time.|CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase|SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase
Which membership card has more than 5 members?|CREATE TABLE member (Membership_card VARCHAR)|SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5|SELECT Membership_card, COUNT(*) AS Members_Count FROM member GROUP BY Membership_card HAVING COUNT(*) > 5
Which address has both members younger than 30 and members older than 40?|CREATE TABLE member (address VARCHAR, age INTEGER)|SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40|SELECT address FROM member WHERE address IN (SELECT address FROM member WHERE age < 30) AND address IN (SELECT address FROM member WHERE age > 40)
What is the membership card held by both members living in Hartford and ones living in Waterbury address?|CREATE TABLE member (membership_card VARCHAR, address VARCHAR)|SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'|SELECT membership_card FROM member WHERE address IN ('Hartford', 'Waterbury')
How many members are not living in Hartford?|CREATE TABLE member (address VARCHAR)|SELECT COUNT(*) FROM member WHERE address <> 'Hartford'|SELECT COUNT(*) FROM member WHERE address != 'Hartford'
Which address do not have any member with the black membership card?|CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)|SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'|SELECT address FROM member WHERE address NOT IN (SELECT address FROM member WHERE Membership_card = 'black')
Show the shop addresses ordered by their opening year.|CREATE TABLE shop (address VARCHAR, open_year VARCHAR)|SELECT address FROM shop ORDER BY open_year|SELECT address FROM shop ORDER BY open_year
What are the average score and average staff number of all shops?|CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)|SELECT AVG(num_of_staff), AVG(score) FROM shop|
Find the id and address of the shops whose score is below the average score.|CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)|SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)
Find the address and staff number of the shops that do not have any happy hour.|CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)|SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)|SELECT s.address, s.num_of_staff FROM shop s WHERE s.shop_id NOT IN (SELECT h.shop_id FROM happy_hour h)
What are the id and address of the shops which have a happy hour in May?|CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'|SELECT shop.shop_id, shop.address FROM shop JOIN happy_hour ON shop.shop_id = happy_hour.shop_id WHERE DATE_FORMAT(happy_hour.date, '%m') = 05
which shop has happy hour most frequently? List its id and number of happy hours.|CREATE TABLE happy_hour (shop_id VARCHAR)|SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1|SELECT shop_id, COUNT(*) as number_of_happy_hours FROM happy_hour GROUP BY shop_id ORDER BY number_of_happy_hours DESC LIMIT 1
Which month has the most happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1|
Which months have more than 2 happy hours?|CREATE TABLE happy_hour (MONTH VARCHAR)|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2|SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2
How many albums are there?|CREATE TABLE ALBUM (Id VARCHAR)|SELECT COUNT(*) FROM ALBUM|SELECT COUNT(Id) FROM ALBUM
List the names of all music genres.|CREATE TABLE GENRE (Name VARCHAR)|SELECT Name FROM GENRE|SELECT Name FROM GENRE
Find all the customer information in state NY.|CREATE TABLE CUSTOMER (State VARCHAR)|"SELECT * FROM CUSTOMER WHERE State = ""NY"""|SELECT * FROM CUSTOMER WHERE State = 'NY'
What are the first names and last names of the employees who live in Calgary city.|CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)|"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = ""Calgary"""|SELECT FirstName, LastName FROM EMPLOYEE WHERE City = 'Calgary'
What are the distinct billing countries of the invoices?|CREATE TABLE INVOICE (BillingCountry VARCHAR)|SELECT DISTINCT (BillingCountry) FROM INVOICE|SELECT DISTINCT BillingCountry FROM INVOICE
"Find the names of all artists that have ""a"" in their names."|CREATE TABLE ARTIST (Name VARCHAR)|"SELECT Name FROM ARTIST WHERE Name LIKE ""%a%"""|SELECT * FROM ARTIST WHERE Name LIKE '%a%'
"Find the title of all the albums of the artist ""AC/DC""."|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""AC/DC"""|SELECT ALBUM.Title FROM ARTIST INNER JOIN ALBUM ON ARTIST.ArtistId = ALBUM.ArtistId WHERE ARTIST.Name = 'AC/DC'
"Hom many albums does the artist ""Metallica"" have?"|CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""Metallica"""|SELECT COUNT(*) FROM ALBUM WHERE ArtistId = (SELECT ArtistId FROM ARTIST WHERE Name = 'Metallica')
"Which artist does the album ""Balls to the Wall"" belong to?"|CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = ""Balls to the Wall"""|SELECT ARTIST.Name FROM ALBUM INNER JOIN ARTIST ON ALBUM.ArtistId = ARTIST.ArtistId WHERE ALBUM.Title = 'Balls to the Wall'
Which artist has the most albums?|CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1|SELECT a.Name, COUNT(*) as album_count FROM ARTIST a JOIN ALBUM b ON a.ArtistId = b.ArtistId GROUP BY a.Name ORDER BY album_count DESC LIMIT 1
"Find the names of all the tracks that contain the word ""you""."|CREATE TABLE TRACK (Name VARCHAR)|SELECT Name FROM TRACK WHERE Name LIKE '%you%'|
What is the average unit price of all the tracks?|CREATE TABLE TRACK (UnitPrice INTEGER)|SELECT AVG(UnitPrice) FROM TRACK|SELECT AVG(UnitPrice) FROM TRACK
What are the durations of the longest and the shortest tracks in milliseconds?|CREATE TABLE TRACK (Milliseconds INTEGER)|SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK|
Show the album names, ids and the number of tracks for each album.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)|SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID|
What is the name of the most common genre in all tracks?|CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)|SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1|SELECT Name FROM (SELECT Name, COUNT(*) as count FROM GENRE JOIN TRACK ON GENRE.GenreId = TRACK.GenreId GROUP BY Name) ORDER BY count DESC LIMIT 1
What is the least common media type in all tracks?|CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1|
Show the album names and ids for albums that contain tracks with unit price bigger than 1.|CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)|SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID|SELECT A.Title, A.AlbumId FROM ALBUM A INNER JOIN TRACK T ON A.AlbumId = T.AlbumId WHERE T.UnitPrice > 1
How many tracks belong to rock genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT COUNT(*) FROM TRACK JOIN GENRE ON TRACK.GenreId = GENRE.GenreId WHERE GENRE.Name = 'Rock';
What is the average unit price of tracks that belong to Jazz genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Jazz"""|
"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?"|CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)|"SELECT FirstName, LastName FROM CUSTOMER WHERE Email = ""luisg@embraer.com.br"""|SELECT FirstName, LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br'
"How many customers have email that contains ""gmail.com""?"|CREATE TABLE CUSTOMER (Email VARCHAR)|"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%"""|
What is the first name and last name employee helps the customer with first name Leonie?|CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)|"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = ""Leonie"""|SELECT E.FirstName, E.LastName FROM EMPLOYEE E INNER JOIN CUSTOMER C ON E.EmployeeId = C.SupportRepId WHERE C.FirstName = 'Leonie';
What city does the employee who helps the customer with postal code 70174 live in?|CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)|"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = ""70174"""|
How many distinct cities does the employees live in?|CREATE TABLE EMPLOYEE (city VARCHAR)|SELECT COUNT(DISTINCT city) FROM EMPLOYEE|SELECT COUNT(DISTINCT city) FROM EMPLOYEE
Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.|CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)|"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = ""Astrid"" AND LastName = ""Gruber"""|SELECT INVOICE.InvoiceDate FROM INVOICE JOIN CUSTOMER ON INVOICE.CustomerId = CUSTOMER.CustomerId WHERE CUSTOMER.FirstName = 'Astrid' AND CUSTOMER.LastName = 'Gruber';
Find all the customer last names that do not have invoice totals larger than 20.|CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)|SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20|
Find the first names of all customers that live in Brazil and have an invoice.|CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)|"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Brazil"""|SELECT CUSTOMER.FirstName FROM CUSTOMER JOIN INVOICE ON CUSTOMER.CustomerId = INVOICE.CustomerId WHERE CUSTOMER.country = 'Brazil'
Find the address of all customers that live in Germany and have invoice.|CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)|"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Germany"""|SELECT Customer.Address FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CustomerId = INVOICE.CustomerId WHERE CUSTOMER.country = 'Germany'
List the phone numbers of all employees.|CREATE TABLE EMPLOYEE (Phone VARCHAR)|SELECT Phone FROM EMPLOYEE|SELECT Phone FROM EMPLOYEE
How many tracks are in the AAC audio file media type?|CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)|"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = ""AAC audio file"""|SELECT COUNT(*) FROM MEDIATYPE INNER JOIN TRACK ON MEDIATYPE.MediaTypeId = TRACK.MediaTypeId WHERE MEDIATYPE.Name = 'AAC audio file'
What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Latin"" OR T1.Name = ""Pop"""|SELECT AVG(TRACK.Milliseconds) FROM TRACK INNER JOIN GENRE ON TRACK.GenreId = GENRE.GenreId WHERE GENRE.Name IN ('Latin', 'Pop')
Please show the employee first names and ids of employees who serve at least 10 customers.|CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)|SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10|
Please show the employee last names that serves no more than 20 customers.|CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)|SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20|SELECT e.EmployeeId AS Employee, COUNT(c.SupportRepId) AS CustomerCount FROM EMPLOYEE e JOIN CUSTOMER c ON e.EmployeeId = c.SupportRepId GROUP BY Employee HAVING COUNT(c.SupportRepId) <= 20
Please list all album titles in alphabetical order.|CREATE TABLE ALBUM (Title VARCHAR)|SELECT Title FROM ALBUM ORDER BY Title|SELECT Title FROM ALBUM ORDER BY Title ASC
Please list the name and id of all artists that have at least 3 albums in alphabetical order.|CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)|SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name|SELECT a.Name, a.ArtistID FROM ARTIST a INNER JOIN ALBUM b ON a.ArtistID = b.ArtistID GROUP BY a.ArtistID HAVING COUNT(b.ArtistID) >= 3 ORDER BY a.Name ASC
Find the names of artists that do not have any albums.|CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)|SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId|
What is the average unit price of rock tracks?|CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)|"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock"""|SELECT AVG(UnitPrice) FROM TRACK t INNER JOIN GENRE g ON t.GenreId = g.GenreId WHERE g.Name = 'rock'
What are the duration of the longest and shortest pop tracks in milliseconds?|CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)|"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Pop"""|SELECT MAX(TRACK.Milliseconds) AS LONGEST_POP_TRACK, MIN(TRACK.Milliseconds) AS SHORTEST_POP_TRACK FROM TRACK INNER JOIN GENRE ON TRACK.GenreId = GENRE.GenreId WHERE GENRE.Name = 'Pop';
What are the birth dates of employees living in Edmonton?|CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)|"SELECT BirthDate FROM EMPLOYEE WHERE City = ""Edmonton"""|SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'
What are the distinct unit prices of all tracks?|CREATE TABLE TRACK (UnitPrice VARCHAR)|SELECT DISTINCT (UnitPrice) FROM TRACK|SELECT DISTINCT UnitPrice FROM TRACK
How many artists do not have any album?|CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)|SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)|SELECT COUNT(*) FROM ARTIST LEFT JOIN ALBUM ON ARTIST.artistid = ALBUM.artistid WHERE ALBUM.artistid IS NULL
What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?|CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)|SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'|SELECT DISTINCT Album.Title FROM Album INNER JOIN Track ON Track.AlbumId = Album.AlbumId INNER JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name IN ('Reggae', 'Rock') GROUP BY Album.Title HAVING COUNT(DISTINCT Genre.Name) = 2
Find all the phone numbers.|CREATE TABLE available_policies (customer_phone VARCHAR)|SELECT customer_phone FROM available_policies|SELECT customer_phone FROM available_policies
"What are the customer phone numbers under the policy ""Life Insurance""?"|CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)|"SELECT customer_phone FROM available_policies WHERE policy_type_code = ""Life Insurance"""|SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'
Which policy type has the most records in the database?|CREATE TABLE available_policies (policy_type_code VARCHAR)|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1|
What are all the customer phone numbers under the most popular policy type?|CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)|SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)|SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)
Find the policy type used by more than 4 customers.|CREATE TABLE available_policies (policy_type_code VARCHAR)|SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4|SELECT policy_type_code FROM (SELECT policy_type_code, COUNT(*) as count FROM customers GROUP BY policy_type_code) WHERE count > 4
Find the total and average amount of settlements.|CREATE TABLE settlements (settlement_amount INTEGER)|SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements|SELECT SUM(settlement_amount) AS total_settlements, AVG(settlement_amount) AS average_settlements FROM settlements
