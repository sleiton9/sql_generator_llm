#!/usr/bin/env python3
"""
This module connects to the Gemini API using the Google genai client,
sends a prompt to the model, and prints the generated response.
"""
import logging
from logs.config_logging import setup_logging
from config.config_yaml_loader import load_config

from google import genai
from google.genai import types

# Setup the logs
setup_logging()
logger = logging.getLogger(__name__)


# Load configuration settings from a YAML file.
config = load_config()
GEMINI_API_KEY = config.get("gemini_api_key")
GEMINI_MODEL = config.get("gemini_model")
GEMINI_DEFAULT_CONTEXT = config.get("gemini_default_context")

# Initialize the Gemini API client and Chat.
client_gemini = genai.Client(api_key=GEMINI_API_KEY)
chat = client_gemini.chats.create(model=GEMINI_MODEL, 
                                  config=types.GenerateContentConfig(system_instruction=GEMINI_DEFAULT_CONTEXT))



def send_prompt(chat: genai.chats.Chat, prompt: str) -> str:
    """
    Sends a prompt to the Gemini model via the provided chat client and returns the generated response text.

    Parameters:
        chat (genai.Chat): The chat client instance used to interact with the Gemini API.
        prompt (str): The prompt message to be sent to the Gemini model.

    Returns:
        str: The text response generated by the Gemini model.
    """
    logger.info("Sending prompt to LLM model")
    response = chat.send_message(prompt)
    logger.info("Response from LLM model: " + response.text)
    return response.text


def main() -> None:
    """
    Main function to test the Gemini API connection by sending a sample prompt.
    """
    logger.info("----------------------------Start main function------------------------------------")

    test_prompt = "Tengo dos perros en mi casa"
    send_prompt(chat, test_prompt)

    test_prompt = "Cuentos perros tengo en mi casa?"
    send_prompt(chat, test_prompt)

    logger.info("----------------------------End main function--------------------------------------")



if __name__ == "__main__":
    main()

