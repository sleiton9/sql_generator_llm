question	context	answer	sql_generado	metrica_etm	exactitud_sintactica	failed_rules
How many heads of the departments are older than 56 ?	CREATE TABLE head (age INTEGER)	SELECT COUNT(*) FROM head WHERE age > 56	SELECT count(*) FROM head WHERE age > 56	0,8888888888888888	True	[]
List the name, born state and age of the heads of departments ordered by age.	CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)	SELECT name, born_state, age FROM head ORDER BY age	SELECT name, born_state, age FROM head ORDER BY age	1,0	True	[]
List the creation year, name and budget of each department.	CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)	SELECT creation, name, budget_in_billions FROM department	SELECT creation, name, budget_in_billions FROM department	1,0	True	[]
What are the maximum and minimum budget of the departments?	CREATE TABLE department (budget_in_billions INTEGER)	SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department	SELECT max(budget_in_billions), min(budget_in_billions) FROM department	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 33), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
What is the average number of employees of the departments whose rank is between 10 and 15?	CREATE TABLE department (num_employees INTEGER, ranking INTEGER)	SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15	SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15	0,9090909090909091	True	[]
What are the names of the heads who are born outside the California state?	CREATE TABLE head (name VARCHAR, born_state VARCHAR)	SELECT name FROM head WHERE born_state <> 'California'	SELECT name FROM head WHERE born_state != 'California'	0,8888888888888888	True	[]
What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?	CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)	SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'	SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 117), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 147), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 79), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 164), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 134), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 112), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 34), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>]
What are the names of the states where at least 3 heads were born?	CREATE TABLE head (born_state VARCHAR)	SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3	SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3	0,9090909090909091	True	[]
In which year were most departments established?	CREATE TABLE department (creation VARCHAR)	SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1	SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	True	[]
Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?	CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)	SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'	SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 103), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 56), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many acting statuses are there?	CREATE TABLE management (temporary_acting VARCHAR)	SELECT COUNT(DISTINCT temporary_acting) FROM management	SELECT count(*) FROM management	0,7272727272727273	True	[]
How many departments are led by heads who are not mentioned?	CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)	SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)	SELECT count(T1.department_id) FROM department AS T1 LEFT JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.department_id IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 129), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the distinct ages of the heads who are acting?	CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)	SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'	SELECT DISTINCT T1.age FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 29), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 40), #fixes: 1, description: Join clauses should be fully qualified.>>]
List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.	CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)	SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'	SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Treasury' INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Homeland Security'	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 263), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 195), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 211), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 222), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 341), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 318), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 79), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 38), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 87), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 157), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 250), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 276), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 134), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 299), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 227), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 271), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 175), #fixes: 1, description: Set operators should always have a line break both before and after.>>]
Which department has more than 1 head at a time? List the id, name and the number of heads.	CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)	SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1	SELECT T1.department_id, T1.name, count(T2.department_id) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.name HAVING count(T2.department_id) > 1	0,95	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 86), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 154), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 172), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 29), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 193), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 35), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 81), #fixes: 1, description: Join clauses should be fully qualified.>>]
Which head's name has the substring 'Ha'? List the id and name.	CREATE TABLE head (head_id VARCHAR, name VARCHAR)	SELECT head_id, name FROM head WHERE name LIKE '%Ha%'	SELECT head_id, name FROM head WHERE name LIKE '%Ha%'	1,0	True	[]
How many farms are there?	CREATE TABLE farm (Id VARCHAR)	SELECT COUNT(*) FROM farm	SELECT count(*) FROM farm	0,8	True	[]
List the total number of horses on farms in ascending order.	CREATE TABLE farm (Total_Horses VARCHAR)	SELECT Total_Horses FROM farm ORDER BY Total_Horses	SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC	0,9333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
"What are the hosts of competitions whose theme is not ""Aliens""?"	CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)	SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'	SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the themes of farm competitions sorted by year in ascending order?	CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)	SELECT Theme FROM farm_competition ORDER BY YEAR	SELECT Theme FROM farm_competition ORDER BY YEAR ASC	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the average number of working horses of farms with more than 5000 total number of horses?	CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)	SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000	SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 12), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the maximum and minimum number of cows across all farms.	CREATE TABLE farm (Cows INTEGER)	SELECT MAX(Cows), MIN(Cows) FROM farm	SELECT max(Cows), min(Cows) FROM farm	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 34), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 19), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
How many different statuses do cities have?	CREATE TABLE city (Status VARCHAR)	SELECT COUNT(DISTINCT Status) FROM city	SELECT count(DISTINCT Status) FROM city	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List official names of cities in descending order of population.	CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)	SELECT Official_Name FROM city ORDER BY Population DESC	SELECT Official_Name FROM city ORDER BY Population DESC	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the official name and status of the city with the largest population.	CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)	SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1	SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 49), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the years and the official names of the host cities of competitions.	CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)	SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID	SELECT T1.Year, T2.Official_Name FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID = T2.City_ID	0,7333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 62), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 102), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the official names of the cities that have hosted more than one competition.	CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)	SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1	SELECT T2.Official_Name FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID = T2.City_ID GROUP BY T1.Host_city_ID, T2.Official_Name HAVING count(*) > 1	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 130), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 53), #fixes: 1, description: Join clauses should be fully qualified.>>]
Show the status of the city that has hosted the greatest number of competitions.	CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)	SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID, T1.Status ORDER BY count(*) DESC LIMIT 1	0,9523809523809523	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>]
Please show the themes of competitions with host cities having populations larger than 1000.	CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)	SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000	SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Please show the different statuses of cities and the average population of cities with each status.	CREATE TABLE city (Status VARCHAR, Population INTEGER)	SELECT Status, AVG(Population) FROM city GROUP BY Status	SELECT Status, avg(Population) FROM city GROUP BY Status	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 16), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Please show the different statuses, ordered by the number of cities that have each.	CREATE TABLE city (Status VARCHAR)	SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)	SELECT Status FROM city GROUP BY Status ORDER BY count(*) DESC	0,8421052631578947	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the most common type of Status across cities.	CREATE TABLE city (Status VARCHAR)	SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1	SELECT Status FROM city GROUP BY Status ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the official names of cities that have not held any competition.	CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)	SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)	SELECT T1.Official_Name FROM city AS T1 LEFT JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T2.Host_city_ID IS NULL	0,3333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the status shared by cities with population bigger than 1500 and smaller than 500.	CREATE TABLE city (Status VARCHAR, Population INTEGER)	SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500	SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 49), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Find the official names of cities with population bigger than 1500 or smaller than 500.	CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)	SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500	SELECT Official_Name FROM city WHERE Population > '1500' OR Population < '500'	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
"Show the census ranking of cities whose status are not ""Village""."	CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)	"SELECT Census_Ranking FROM city WHERE Status <> ""Village"""	SELECT Census_Ranking FROM city WHERE Status != 'Village'	0,7777777777777778	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
which course has most number of registered students?	CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)	SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1	0,9523809523809523	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 125), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 103), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 42), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 47), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
what is id of students who registered some courses but the least number of courses in these students?	CREATE TABLE student_course_registrations (student_id VARCHAR)	SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1	SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) ASC LIMIT 1	0,8695652173913043	True	[]
what are the first name and last name of all candidates?	CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)	SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id	SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 58), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the id of students who never attends courses?	CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)	SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)	SELECT T1.student_id FROM students AS T1 LEFT JOIN student_course_attendance AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id IS NULL	0,37037037037037035	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 52), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the id of students who attended some courses?	CREATE TABLE student_course_attendance (student_id VARCHAR)	SELECT student_id FROM student_course_attendance	SELECT DISTINCT student_id FROM student_course_attendance	0,9090909090909091	True	[]
What are the ids of all students for courses and what are the names of those courses?	CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)	SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id	SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 118), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 103), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 78), #fixes: 1, description: Join clauses should be fully qualified.>>]
What is detail of the student who most recently registered course?	CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)	SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1	SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 67), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many students attend course English?	CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)	"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English"""	SELECT count(T1.course_id) FROM student_course_attendance AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'English'	0,8235294117647058	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 105), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 124), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 65), #fixes: 1, description: Join clauses should be fully qualified.>>]
How many courses do the student whose id is 171 attend?	CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)	SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171	SELECT count(course_id) FROM student_course_attendance WHERE student_id = '171'	0,46153846153846156	True	[]
Find id of the candidate whose email is stanley.monahan@example.org?	CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)	"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org"""	SELECT T1.candidate_id FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id WHERE T2.email_address = 'stanley.monahan@example.org'	0,75	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 29), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 46), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find id of the candidate who most recently accessed the course?	CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)	SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1	SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1	1,0	True	[]
What is detail of the student who registered the most number of courses?	CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)	SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id, T1.student_details ORDER BY count(*) DESC LIMIT 1	0,9523809523809523	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 47), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 147), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 52), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the id of students who registered some courses and the number of their registered courses?	CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)	SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	SELECT student_id, count(*) FROM student_course_registrations GROUP BY student_id	0,5	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 20), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
How many registed students do each course have? List course name and the number of their registered students?	CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)	SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id	SELECT T2.course_name, count(T1.student_id) FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_name	0,7368421052631579	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 85), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 125), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 50), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 147), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 24), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 110), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
"Find id of candidates whose assessment code is ""Pass""?"	CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)	"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass"""	SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'	0,8888888888888888	True	[]
"Find the cell mobile number of the candidates whose assessment code is ""Fail""?"	CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)	"SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = ""Fail"""	SELECT T2.cell_mobile_number FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id JOIN candidate_assessments AS T3 ON T1.candidate_id = T3.candidate_id WHERE T3.asessment_outcome_code = 'Fail'	0,75	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 183), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 52), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 104), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 161), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 143), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the id of students who registered course 301?	CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)	SELECT student_id FROM student_course_attendance WHERE course_id = 301	SELECT student_id FROM student_course_attendance WHERE course_id = '301'	0,8888888888888888	True	[]
What is the id of the student who most recently registered course 301?	CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)	SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1	SELECT student_id FROM student_course_attendance WHERE course_id = '301' ORDER BY date_of_attendance DESC LIMIT 1	0,9333333333333333	True	[]
Find distinct cities of addresses of people?	CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 46), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find distinct cities of address of students?	CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 148), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 107), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 46), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 133), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 112), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the names of courses in alphabetical order?	CREATE TABLE courses (course_name VARCHAR)	SELECT course_name FROM courses ORDER BY course_name	SELECT course_name FROM courses ORDER BY course_name ASC	0,9333333333333333	True	[]
List the first names of people in alphabetical order?	CREATE TABLE people (first_name VARCHAR)	SELECT first_name FROM people ORDER BY first_name	SELECT first_name FROM people ORDER BY first_name ASC	0,9333333333333333	True	[]
What are the id of students who registered courses or attended courses?	CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)	SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance	SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 53), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM02 pos:(1, 53), #fixes: 1, description: 'UNION [DISTINCT|ALL]' is preferred over just 'UNION'.>>]
Find the id of courses which are registered or attended by student whose id is 121?	CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)	SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121	SELECT course_id FROM student_course_registrations WHERE student_id = '121' UNION SELECT course_id FROM student_course_attendance WHERE student_id = '121'	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM02 pos:(1, 77), #fixes: 1, description: 'UNION [DISTINCT|ALL]' is preferred over just 'UNION'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 77), #fixes: 1, description: Set operators should always have a line break both before and after.>>]
What are all info of students who registered courses but not attended courses?	CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)	SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)	SELECT T1.student_id FROM student_course_registrations AS T1 LEFT JOIN student_course_attendance AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id IS NULL	0,35714285714285715	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 146), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 110), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the id of students who registered course statistics in the order of registration date.	CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)	"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date"	SELECT T1.student_id FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'Statistics' ORDER BY T1.registration_date	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 160), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 121), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 102), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 62), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the id of students who attended  statistics courses in the order of attendance date.	CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)	"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.date_of_attendance"	SELECT T1.student_id FROM student_course_attendance AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'Statistics' ORDER BY T1.date_of_attendance	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 118), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 157), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 59), #fixes: 1, description: Join clauses should be fully qualified.>>]
Give me the dates when the max temperature was higher than 85.	CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)	SELECT date FROM weather WHERE max_temperature_f > 85	SELECT date FROM weather WHERE max_temperature_f > 85	1,0	True	[]
What are the names of stations that have latitude lower than 37.5?	CREATE TABLE station (name VARCHAR, lat INTEGER)	SELECT name FROM station WHERE lat < 37.5	SELECT name FROM station WHERE lat < 37.5	1,0	True	[]
For each city, return the highest latitude among its stations.	CREATE TABLE station (city VARCHAR, lat INTEGER)	SELECT city, MAX(lat) FROM station GROUP BY city	SELECT city, max(lat) FROM station GROUP BY city	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 14), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Give me the start station and end station for the trips with the three oldest id.	CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)	SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3	SELECT start_station_name, end_station_name FROM trip ORDER BY id DESC LIMIT 3	0,9565217391304348	True	[]
What is the average latitude and longitude of stations located in San Jose city?	CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)	"SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose"""	SELECT avg(lat), avg(long) FROM station WHERE city = 'San Jose'	0,6363636363636364	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 18), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
What is the id of the trip that has the shortest duration?	CREATE TABLE trip (id VARCHAR, duration VARCHAR)	SELECT id FROM trip ORDER BY duration LIMIT 1	SELECT id FROM trip ORDER BY duration ASC LIMIT 1	0,9523809523809523	True	[]
What is the total and maximum duration of trips with bike id 636?	CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)	SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636	SELECT sum(duration), max(duration) FROM trip WHERE bike_id = '636'	0,7	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 23), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
For each zip code, return the average mean temperature of August there.	CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)	"SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code"	SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE strftime('%m', date) = '08' GROUP BY zip_code	0,64	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 18), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
From the trip record, find the number of unique bikes.	CREATE TABLE trip (bike_id VARCHAR)	SELECT COUNT(DISTINCT bike_id) FROM trip	SELECT count(DISTINCT bike_id) FROM trip	0,8333333333333334	True	[]
What is the number of distinct cities the stations are located at?	CREATE TABLE station (city VARCHAR)	SELECT COUNT(DISTINCT city) FROM station	SELECT count(DISTINCT city) FROM station	0,8333333333333334	True	[]
How many stations does Mountain View city has?	CREATE TABLE station (city VARCHAR)	"SELECT COUNT(*) FROM station WHERE city = ""Mountain View"""	SELECT count(*) FROM station WHERE city = 'Mountain View'	0,7	True	[]
Return the unique name for stations that have ever had 7 bikes available.	CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)	SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7	SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = '7'	0,9444444444444444	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 44), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 49), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Which start station had the most trips starting from August? Give me the name and id of the station.	CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)	"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"	SELECT start_station_name, start_station_id FROM trip WHERE strftime('%m', start_date) = '08' GROUP BY start_station_name, start_station_id ORDER BY count(*) DESC LIMIT 1	0,7428571428571429	True	[]
Which bike traveled the most often in zip code 94002?	CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)	SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1	SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY count(*) DESC LIMIT 1	0,875	True	[]
How many days had both mean humidity above 50 and mean visibility above 8?	CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)	SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8	SELECT count(*) FROM weather WHERE CAST(mean_humidity AS REAL) > 50 AND CAST(mean_visibility_miles AS REAL) > 8	0,6923076923076923	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP03 pos:(1, 36), #fixes: 1, description: Function names must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP03 pos:(1, 73), #fixes: 1, description: Function names must be consistently lower case.>>]
What is the latitude, longitude, city of the station from which the shortest trip started?	CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)	SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1	SELECT T2.lat, T2.long, T2.city FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T1.duration ASC LIMIT 1	0,6976744186046512	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 54), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 111), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 49), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the ids of stations that are located in San Francisco and have average bike availability above 10.	CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)	"SELECT id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10"	SELECT station_id FROM status WHERE city = 'San Francisco' GROUP BY station_id HAVING avg(bikes_available) > 10	0,7428571428571429	True	[]
What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?	CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)	"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE ""12/%"""	SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.name, T1.id HAVING avg(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE strftime('%m', installation_date) = '12'	0,8518518518518519	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 158), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 47), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 145), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 164), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 201), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM02 pos:(1, 145), #fixes: 1, description: 'UNION [DISTINCT|ALL]' is preferred over just 'UNION'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 123), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 42), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 172), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the 3 most common cloud cover rates in the region of zip code 94107?	CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)	SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3	SELECT cloud_cover FROM weather WHERE zip_code = '94107' GROUP BY cloud_cover ORDER BY count(*) DESC LIMIT 3	0,875	True	[]
What is the zip code in which the average mean sea level pressure is the lowest?	CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)	SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1	SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) ASC LIMIT 1	0,8695652173913043	True	[]
What is the average bike availability in stations that are not located in Palo Alto?	CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)	"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = ""Palo Alto"")"	SELECT avg(bikes_available) FROM status WHERE city != 'Palo Alto'	0,46153846153846156	True	[]
What is the average longitude of stations that never had bike availability more than 10?	CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)	SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)	SELECT avg(T1.long) FROM station AS T1 JOIN status AS T2 ON T1.id = T2.id WHERE T2.bikes_available <= 10	0,3333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 40), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
When and in what zip code did max temperature reach 80?	CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)	SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80	SELECT date, zip_code FROM weather WHERE max_temperature_f = '80'	0,8	True	[]
Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.	CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)	SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60	SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.id, T1.zip_code HAVING avg(T2.mean_temperature_f) > 60	0,95	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 30), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 120), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
For each zip code, return how many times max wind speed reached 25?	CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)	SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code	SELECT zip_code, count(*) FROM weather WHERE max_wind_Speed_mph = '25' GROUP BY zip_code	0,75	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 18), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
On which day and in which zip code was the min dew point lower than any day in zip code 94107?	CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)	SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)	SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = '94107')	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 108), #fixes: 0, description: Unqualified reference 'zip_code' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 72), #fixes: 0, description: Unqualified reference 'min_dew_point_f' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL04 pos:(1, 28), #fixes: 0, description: Duplicate table alias 'weather'. Table aliases should be unique.>>]
For each trip, return its ending station's installation date.	CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)	SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id	SELECT T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id	0,9655172413793104	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 34), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 45), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 50), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Which trip started from the station with the largest dock count? Give me the trip id.	CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)	SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1	SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 30), #fixes: 1, description: Join clauses should be fully qualified.>>]
Count the number of trips that did not end in San Francisco city.	CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)	"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> ""San Francisco"""	SELECT count(T1.end_station_id) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'	0,7894736842105263	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 54), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 49), #fixes: 1, description: Join clauses should be fully qualified.>>]
In zip code 94107, on which day neither Fog nor Rain was not observed?	CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)	"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> ""Fog"" AND EVENTS <> ""Rain"""	SELECT date FROM weather WHERE zip_code = '94107' AND EVENTS NOT IN ('Fog', 'Rain')	0,6896551724137931	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?	CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)	SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7	SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.id WHERE T1.lat > 37.4 EXCEPT SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.id WHERE T2.bikes_available < 7	0,5641025641025641	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 127), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 88), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 171), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 159), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 105), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 151), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are names of stations that have average bike availability above 10 and are not located in San Jose city?	CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)	"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = ""San Jose"""	SELECT name FROM station WHERE city != 'San Jose' AND bikes_available > 10	0,45	True	[]
What are the name, latitude, and city of the station with the lowest latitude?	CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)	SELECT name, lat, city FROM station ORDER BY lat LIMIT 1	SELECT name, lat, city FROM station ORDER BY CAST(lat AS REAL) ASC LIMIT 1	0,8461538461538461	True	[]
What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?	CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)	SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3	SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY CAST(max_gust_speed_mph AS REAL) DESC LIMIT 3	0,8571428571428571	True	[]
List the name and the number of stations for all the cities that have at least 15 stations.	CREATE TABLE station (city VARCHAR)	SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15	SELECT city, count(*) FROM station GROUP BY city HAVING count(*) >= 15	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 14), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Find the ids and names of stations from which at least 200 trips started.	CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)	SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200	SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id, start_station_name HAVING count(*) >= 200	0,9166666666666666	True	[]
Find the zip code in which the average mean visibility is lower than 10.	CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)	SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10	SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10	0,9090909090909091	True	[]
List all the cities in a decreasing order of each city's stations' highest latitude.	CREATE TABLE station (city VARCHAR, lat INTEGER)	SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC	SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC	0,9	True	[]
What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.	CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)	SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5	SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5	1,0	True	[]
What are the ids and durations of the trips with the top 3 durations?	CREATE TABLE trip (id VARCHAR, duration VARCHAR)	SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3	SELECT id, duration FROM trip ORDER BY CAST(duration AS REAL) DESC LIMIT 3	0,88	True	[]
For each station, return its longitude and the average duration of trips that started from the station.	CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)	SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id	SELECT T1.long, avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id, T1.long	0,9142857142857143	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 24), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 112), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 53), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
For each station, find its latitude and the minimum duration of trips that ended at the station.	CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)	SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id	SELECT T2.lat, min(T1.duration) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id GROUP BY T2.id, T2.lat	0,7428571428571429	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 16), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 49), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 54), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 116), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List all the distinct stations from which a trip of duration below 100 started.	CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)	SELECT DISTINCT start_station_name FROM trip WHERE duration < 100	SELECT DISTINCT start_station_name FROM trip WHERE duration < 100	1,0	True	[]
Find all the zip codes in which the max dew point have never reached 70.	CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)	SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70	SELECT zip_code FROM weather WHERE max_dew_point_f < '70' GROUP BY zip_code	0,6363636363636364	True	[]
Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.	CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)	SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)	SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL04 pos:(1, 16), #fixes: 0, description: Duplicate table alias 'trip'. Table aliases should be unique.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 51), #fixes: 0, description: Unqualified reference 'duration' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 77), #fixes: 0, description: Unqualified reference 'zip_code' found in select with more than one referenced table/view.>>]
What are the dates in which the mean sea level pressure was between 30.3 and 31?	CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)	SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31	SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31	1,0	True	[]
Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.	CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)	SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1	SELECT date, CAST(max_temperature_f AS REAL) - CAST(min_temperature_f AS REAL) AS temp_diff FROM weather ORDER BY temp_diff ASC LIMIT 1	0,7142857142857143	True	[]
What are the id and name of the stations that have ever had more than 12 bikes available?	CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)	SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12	SELECT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12	0,972972972972973	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 42), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 47), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.	CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)	SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100	SELECT T1.zip_code FROM weather AS T1 JOIN trip AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.zip_code HAVING avg(T1.mean_humidity) < 70 AND count(*) >= 100	0,6153846153846154	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 39), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?	CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)	"SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100"	SELECT T1.name FROM station AS T1 JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T1.city = 'Palo Alto' GROUP BY T1.name HAVING count(*) <= 100	0,5238095238095238	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 35), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 124), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many trips started from Mountain View city and ended at Palo Alto city?	CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)	"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = ""Mountain View"" AND T3.city = ""Palo Alto"""	SELECT count(T1.id) FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id JOIN station AS T3 ON T1.end_station_id = T3.id WHERE T2.city = 'Mountain View' AND T3.city = 'Palo Alto'	0,6415094339622641	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 174), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 144), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 37), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 87), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 112), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the average latitude and longitude of the starting points of all trips?	CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)	SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id	SELECT avg(T2.lat), avg(T2.long) FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id	0,7333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 50), #fixes: 1, description: Join clauses should be fully qualified.>>]
How many books are there?	CREATE TABLE book (Id VARCHAR)	SELECT COUNT(*) FROM book	SELECT count(*) FROM book	0,8	True	[]
List the writers of the books in ascending alphabetical order.	CREATE TABLE book (Writer VARCHAR)	SELECT Writer FROM book ORDER BY Writer	SELECT Writer FROM book ORDER BY Writer ASC	0,9333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the titles of the books in ascending order of issues.	CREATE TABLE book (Title VARCHAR, Issues VARCHAR)	SELECT Title FROM book ORDER BY Issues	SELECT Title FROM book ORDER BY Issues ASC	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"What are the titles of the books whose writer is not ""Elaine Lee""?"	CREATE TABLE book (Title VARCHAR, Writer VARCHAR)	"SELECT Title FROM book WHERE Writer <> ""Elaine Lee"""	SELECT Title FROM book WHERE Writer != 'Elaine Lee'	0,7	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the title and issues of the books?	CREATE TABLE book (Title VARCHAR, Issues VARCHAR)	SELECT Title, Issues FROM book	SELECT Title, Issues FROM book	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the dates of publications in descending order of price?	CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)	SELECT Publication_Date FROM publication ORDER BY Price DESC	SELECT Publication_Date FROM publication ORDER BY Price DESC	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the distinct publishers of publications with price higher than 5000000?	CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)	SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000	SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the publisher of the publication with the highest price.	CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)	SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1	SELECT Publisher FROM publication ORDER BY CAST(Price AS REAL) DESC LIMIT 1	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the publication dates of publications with 3 lowest prices.	CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)	SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3	SELECT Publication_Date FROM publication ORDER BY CAST(Price AS REAL) ASC LIMIT 3	0,782608695652174	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the title and publication dates of books.	CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)	SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID	SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 54), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show writers who have published a book with price more than 4000000.	CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)	SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000	SELECT T2.Writer FROM publication AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Price > 4000000	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 41), #fixes: 1, description: Join clauses should be fully qualified.>>]
Show the titles of books in descending order of publication price.	CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)	SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC	SELECT T2.Title FROM publication AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY CAST(T1.Price AS REAL) DESC	0,8648648648648649	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 40), #fixes: 1, description: Join clauses should be fully qualified.>>]
Show publishers that have more than one publication.	CREATE TABLE publication (Publisher VARCHAR)	SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1	SELECT Publisher FROM publication GROUP BY Publisher HAVING count(*) > 1	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show different publishers together with the number of publications they have.	CREATE TABLE publication (Publisher VARCHAR)	SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher	SELECT Publisher, count(*) FROM publication GROUP BY Publisher	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 19), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Please show the most common publication date.	CREATE TABLE publication (Publication_Date VARCHAR)	SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1	SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the writers who have written more than one book.	CREATE TABLE book (Writer VARCHAR)	SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1	SELECT Writer FROM book GROUP BY Writer HAVING count(*) > 1	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the titles of books that are not published.	CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)	SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)	SELECT T1.Title FROM book AS T1 LEFT JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Book_ID IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.	CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)	SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000	SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 58), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the number of distinct publication dates?	CREATE TABLE publication (Publication_Date VARCHAR)	SELECT COUNT(DISTINCT Publication_Date) FROM publication	SELECT count(DISTINCT Publication_Date) FROM publication	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
"Show the prices of publications whose publisher is either ""Person"" or ""Wiley"""	CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)	"SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley"""	SELECT Price FROM publication WHERE Publisher IN ('Person', 'Wiley')	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
How many actors are there?	CREATE TABLE actor (Id VARCHAR)	SELECT COUNT(*) FROM actor	SELECT count(*) FROM actor	0,8	True	[]
List the name of actors in ascending alphabetical order.	CREATE TABLE actor (Name VARCHAR)	SELECT Name FROM actor ORDER BY Name	SELECT Name FROM actor ORDER BY Name ASC	0,9333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the characters and duration of actors?	CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)	SELECT Character, Duration FROM actor	SELECT Character, Duration FROM actor	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the name of actors whose age is not 20.	CREATE TABLE actor (Name VARCHAR, Age VARCHAR)	SELECT Name FROM actor WHERE Age <> 20	SELECT Name FROM actor WHERE Age != '20'	0,7777777777777778	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the characters of actors in descending order of age?	CREATE TABLE actor (Character VARCHAR, age VARCHAR)	SELECT Character FROM actor ORDER BY age DESC	SELECT Character FROM actor ORDER BY CAST(age AS REAL) DESC	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the duration of the oldest actor?	CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)	SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1	SELECT Duration FROM actor ORDER BY CAST(Age AS REAL) DESC LIMIT 1	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"What are the names of musicals with nominee ""Bob Fosse""?"	CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)	"SELECT Name FROM musical WHERE Nominee = ""Bob Fosse"""	SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?"	CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)	"SELECT DISTINCT Nominee FROM musical WHERE Award <> ""Tony Award"""	SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award'	0,7272727272727273	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show names of actors and names of musicals they are in.	CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)	SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID	SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL08 pos:(1, 20), #fixes: 0, description: Reuse of column alias 'Name' from line 1.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 47), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 42), #fixes: 1, description: Join clauses should be fully qualified.>>]
"Show names of actors that have appeared in musical with name ""The Phantom of the Opera""."	CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)	"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = ""The Phantom of the Opera"""	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'	0,9047619047619048	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show names of actors in descending order of the year their musical is awarded.	CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>]
Show names of musicals and the number of actors who have appeared in the musicals.	CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)	SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID	SELECT T2.Name, count(T1.Musical_ID) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 55), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 43), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show names of musicals which have at least three actors.	CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)	SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3	SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name HAVING count(*) >= 3	0,95	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show different nominees and the number of musicals they have been nominated.	CREATE TABLE musical (Nominee VARCHAR)	SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee	SELECT Nominee, count(*) FROM musical GROUP BY Nominee	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Please show the nominee who has been nominated the greatest number of times.	CREATE TABLE musical (Nominee VARCHAR)	SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1	SELECT Nominee FROM musical GROUP BY Nominee ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the most common result of the musicals.	CREATE TABLE musical (RESULT VARCHAR)	SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1	SELECT RESULT FROM musical GROUP BY RESULT ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the nominees that have been nominated more than two musicals.	CREATE TABLE musical (Nominee VARCHAR)	SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2	SELECT Nominee FROM musical GROUP BY Nominee HAVING count(*) > 2	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the name of musicals that do not have actors.	CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)	SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)	SELECT T2.Name FROM actor AS T1 RIGHT JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T1.Musical_ID IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CV08 pos:(1, 33), #fixes: 0, description: Use 'LEFT JOIN' instead of 'RIGHT JOIN'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award""."	CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)	"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award"""	SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'	0,7692307692307693	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 56), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 86), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks""."	CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)	"SELECT Nominee FROM musical WHERE Award = ""Tony Award"" OR Award = ""Cleavant Derricks"""	SELECT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks')	0,56	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
"Find the emails of the user named ""Mary""."	CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)	SELECT email FROM user_profiles WHERE name = 'Mary'	SELECT email FROM user_profiles WHERE name = 'Mary'	1,0	True	[]
"What is the partition id of the user named ""Iron Man""."	CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)	SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'	SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'	1,0	True	[]
How many users are there?	CREATE TABLE user_profiles (Id VARCHAR)	SELECT COUNT(*) FROM user_profiles	SELECT count(*) FROM user_profiles	0,8	True	[]
How many followers does each user have?	CREATE TABLE follows (Id VARCHAR)	SELECT COUNT(*) FROM follows	SELECT count(*) FROM follows GROUP BY Id	0,6153846153846154	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Find the number of followers for each user.	CREATE TABLE follows (f1 VARCHAR)	SELECT COUNT(*) FROM follows GROUP BY f1	SELECT f1, count(*) FROM follows GROUP BY f1	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 12), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Find the number of tweets in record.	CREATE TABLE tweets (Id VARCHAR)	SELECT COUNT(*) FROM tweets	SELECT count(*) FROM tweets	0,8	True	[]
Find the number of users who posted some tweets.	CREATE TABLE tweets (UID VARCHAR)	SELECT COUNT(DISTINCT UID) FROM tweets	SELECT count(DISTINCT UID) FROM tweets	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name and email of the user whose name contains the word ‘Swift’.	CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)	SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'	SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'	1,0	True	[]
Find the names of users whose emails contain ‘superstar’ or ‘edu’.	CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)	SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'	SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'	1,0	True	[]
Return the text of tweets about the topic 'intern'.	CREATE TABLE tweets (text VARCHAR)	SELECT text FROM tweets WHERE text LIKE '%intern%'	SELECT text FROM tweets WHERE text LIKE '%intern%'	1,0	True	[]
Find the name and email of the users who have more than 1000 followers.	CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)	SELECT name, email FROM user_profiles WHERE followers > 1000	SELECT name, email FROM user_profiles WHERE followers > 1000	1,0	True	[]
"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift""."	CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)	SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')	SELECT T2.name FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid GROUP BY T2.name HAVING count(*) > (SELECT count(*) FROM follows AS T3 JOIN user_profiles AS T4 ON T3.f1 = T4.uid WHERE T4.name = 'Tyler Swift')	0,7450980392156863	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 35), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 201), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 180), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 149), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 188), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 135), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 154), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name and email for the users who have more than one follower.	CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)	SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1	SELECT T2.name, T2.email FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid GROUP BY T1.f1, T2.name, T2.email HAVING count(*) > 1	0,7619047619047619	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 116), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 50), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 45), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the names of users who have more than one tweet.	CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)	SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1	SELECT T2.name FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid, T2.name HAVING count(*) > 1	0,9	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the id of users who are followed by Mary and Susan.	CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)	"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Susan"""	SELECT T1.f1 FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid WHERE T2.name = 'Mary' INTERSECT SELECT T1.f1 FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid WHERE T2.name = 'Susan'	0,7027027027027027	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 172), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 127), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 141), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 99), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 146), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 180), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 193), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the id of users who are followed by Mary or Susan.	CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)	"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" OR T1.name = ""Susan"""	SELECT T1.f1 FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid WHERE T2.name = 'Mary' UNION SELECT T1.f1 FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid WHERE T2.name = 'Susan'	0,6486486486486487	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM02 pos:(1, 99), #fixes: 1, description: 'UNION [DISTINCT|ALL]' is preferred over just 'UNION'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 176), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 33), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 123), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 137), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 142), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 99), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 189), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 168), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name of the user who has the largest number of followers.	CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)	SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1	SELECT name FROM user_profiles ORDER BY CAST(followers AS REAL) DESC LIMIT 1	0,8333333333333334	True	[]
Find the name and email of the user followed by the least number of people.	CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)	SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1	SELECT name, email FROM user_profiles ORDER BY CAST(followers AS REAL) ASC LIMIT 1	0,8	True	[]
List the name and number of followers for each user, and sort the results by the number of followers in descending order.	CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)	SELECT name, followers FROM user_profiles ORDER BY followers DESC	SELECT name, followers FROM user_profiles ORDER BY CAST(followers AS REAL) DESC	0,8571428571428571	True	[]
List the names of 5 users followed by the largest number of other users.	CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)	SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5	SELECT name FROM user_profiles ORDER BY CAST(followers AS REAL) DESC LIMIT 5	0,8333333333333334	True	[]
List the text of all tweets in the order of date.	CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)	SELECT text FROM tweets ORDER BY createdate	SELECT text FROM tweets ORDER BY createdate	1,0	True	[]
Find the name of each user and number of tweets tweeted by each of them.	CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)	SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid	SELECT T2.name, count(*) FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T2.name	0,8823529411764706	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 44), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 49), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Find the name and partition id for users who tweeted less than twice.	CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)	SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2	SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid, T1.name, T1.partitionid HAVING count(*) < 2	0,9523809523809523	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 57), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 123), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name of the user who tweeted more than once, and number of tweets tweeted by them.	CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)	SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1	SELECT T2.name, count(*) FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T2.name HAVING count(*) > 1	0,9	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 44), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 49), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the average number of followers for the users who do not have any tweet.	CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)	SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)	SELECT avg(T1.followers) FROM user_profiles AS T1 LEFT JOIN tweets AS T2 ON T1.UID = T2.UID WHERE T2.UID IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the average number of followers for the users who had some tweets.	CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)	SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)	SELECT avg(T1.followers) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.UID = T2.UID	0,3333333333333333	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>]
Find the maximum and total number of followers of all users.	CREATE TABLE user_profiles (followers INTEGER)	SELECT MAX(followers), SUM(followers) FROM user_profiles	SELECT max(followers), sum(followers) FROM user_profiles	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 24), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Find the names of all the catalog entries.	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)	SELECT DISTINCT (catalog_entry_name) FROM catalog_contents	SELECT catalog_entry_name FROM catalog_contents	0,7272727272727273	True	[]
Find the list of attribute data types possessed by more than 3 attribute definitions.	CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)	SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3	SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
"What is the attribute data type of the attribute with name ""Green""?"	CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)	"SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green"""	SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Find the name and level of catalog structure with level between 5 and 10.	CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)	SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10	SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 54), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
"Find all the catalog publishers whose name contains ""Murray"""	CREATE TABLE catalogs (catalog_publisher VARCHAR)	"SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%"""	SELECT catalog_publisher FROM catalogs WHERE catalog_publisher LIKE '%Murray%'	0,7777777777777778	True	[]
Which catalog publisher has published the most catalogs?	CREATE TABLE catalogs (catalog_publisher VARCHAR)	SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1	SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	True	[]
Find the names and publication dates of all catalogs that have catalog level number greater than 5.	CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)	SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5	SELECT T1.catalog_name, T1.date_of_publication FROM catalogs AS T1 JOIN catalog_structure AS T2 ON T1.catalog_id = T2.catalog_id	0,5294117647058824	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 103), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 53), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 68), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 73), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the entry names of catalog with the attribute possessed by most entries.	CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)	SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T2.catalog_entry_name FROM Catalog_Contents_Additional_Attributes AS T1 JOIN Catalog_Contents AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id GROUP BY T2.catalog_entry_name ORDER BY count(*) DESC LIMIT 1	0,6086956521739131	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 80), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 165), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 136), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the entry name of the most expensive catalog (in USD)?	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)	SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1	SELECT catalog_entry_name FROM catalog_contents ORDER BY CAST(price_in_dollars AS REAL) DESC LIMIT 1	0,8333333333333334	True	[]
What is the level name of the cheapest catalog (in USD)?	CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)	SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1	SELECT T1.catalog_level_name FROM catalog_structure AS T1 JOIN catalog_contents AS T2 ON T1.catalog_level_number = T2.catalog_level_number ORDER BY CAST(T2.price_in_dollars AS REAL) ASC LIMIT 1	0,65	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 157), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 59), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 93), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the average and minimum price (in Euro) of all products?	CREATE TABLE catalog_contents (price_in_euros INTEGER)	SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents	SELECT avg(price_in_euros), min(price_in_euros) FROM catalog_contents	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 29), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
What is the product with the highest height? Give me the catalog entry name.	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)	SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1	SELECT catalog_entry_name FROM catalog_contents ORDER BY CAST(height AS REAL) DESC LIMIT 1	0,8333333333333334	True	[]
Find the name of the product that has the smallest capacity.	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)	SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1	SELECT catalog_entry_name FROM catalog_contents ORDER BY CAST(capacity AS REAL) ASC LIMIT 1	0,782608695652174	True	[]
"Find the names of all the products whose stock number starts with ""2""."	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)	"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%"""	SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'	0,8888888888888888	True	[]
Find the names of catalog entries with level number 8.	CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)	"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = ""8"""	SELECT T2.catalog_entry_name FROM Catalog_Contents_Additional_Attributes AS T1 JOIN Catalog_Contents AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T1.catalog_level_number = '8'	0,5882352941176471	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 136), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 80), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 162), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the names of the products with length smaller than 3 or height greater than 5.	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)	SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5	SELECT catalog_entry_name FROM catalog_contents WHERE CAST(LENGTH AS REAL) < 3 OR CAST(width AS REAL) > 5	0,7857142857142857	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Find the name and attribute ID of the attribute definitions with attribute value 0.	CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)	SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0	SELECT T2.attribute_name, T2.attribute_id FROM Catalog_Contents_Additional_Attributes AS T1 JOIN Attribute_Definitions AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_value = '0'	0,5882352941176471	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 172), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 48), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 93), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 150), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name and capacity of products with price greater than 700 (in USD).	CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)	SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700	SELECT catalog_entry_name, capacity FROM catalog_contents WHERE price_in_dollars > 700	0,9	True	[]
Find the dates on which more than one revisions were made.	CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)	SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1	SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many products are there in the records?	CREATE TABLE catalog_contents (Id VARCHAR)	SELECT COUNT(*) FROM catalog_contents	SELECT count(*) FROM catalog_contents	0,8	True	[]
Name all the products with next entry ID greater than 8.	CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)	SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8	SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8	1,0	True	[]
How many aircrafts do we have?	CREATE TABLE Aircraft (Id VARCHAR)	SELECT COUNT(*) FROM Aircraft	SELECT count(*) FROM Aircraft	0,8	True	[]
Show name and distance for all aircrafts.	CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)	SELECT name, distance FROM Aircraft	SELECT name, distance FROM Aircraft	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show ids for all aircrafts with more than 1000 distance.	CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)	SELECT aid FROM Aircraft WHERE distance > 1000	SELECT aid FROM Aircraft WHERE distance > 1000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many aircrafts have distance between 1000 and 5000?	CREATE TABLE Aircraft (distance INTEGER)	SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000	SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the name and distance for aircraft with id 12?	CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)	SELECT name, distance FROM Aircraft WHERE aid = 12	SELECT name, distance FROM Aircraft WHERE aid = '12'	0,9	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the minimum, average, and maximum distance of all aircrafts.	CREATE TABLE Aircraft (distance INTEGER)	SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft	SELECT min(distance), avg(distance), max(distance) FROM Aircraft	0,5714285714285714	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 38), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 23), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Show the id and name of the aircraft with the maximum distance.	CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)	SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1	SELECT aid, name FROM Aircraft ORDER BY CAST(distance AS REAL) DESC LIMIT 1	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the name of aircrafts with top three lowest distances.	CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)	SELECT name FROM Aircraft ORDER BY distance LIMIT 3	SELECT name FROM Aircraft ORDER BY CAST(distance AS REAL) ASC LIMIT 3	0,782608695652174	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show names for all aircrafts with distances more than the average.	CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)	SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)	SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 71), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 56), #fixes: 0, description: Unqualified reference 'distance' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL04 pos:(1, 18), #fixes: 0, description: Duplicate table alias 'Aircraft'. Table aliases should be unique.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many employees do we have?	CREATE TABLE Employee (Id VARCHAR)	SELECT COUNT(*) FROM Employee	SELECT count(*) FROM Employee	0,8	True	[]
Show name and salary for all employees sorted by salary.	CREATE TABLE Employee (name VARCHAR, salary VARCHAR)	SELECT name, salary FROM Employee ORDER BY salary	SELECT name, salary FROM Employee ORDER BY CAST(salary AS REAL)	0,8421052631578947	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show ids for all employees with at least 100000 salary.	CREATE TABLE Employee (eid VARCHAR, salary INTEGER)	SELECT eid FROM Employee WHERE salary > 100000	SELECT eid FROM Employee WHERE salary >= 100000	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many employees have salary between 100000 and 200000?	CREATE TABLE Employee (salary INTEGER)	SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000	SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the name and salary for employee with id 242518965?	CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)	SELECT name, salary FROM Employee WHERE eid = 242518965	SELECT name, salary FROM Employee WHERE eid = '242518965'	0,9	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is average and maximum salary of all employees.	CREATE TABLE Employee (salary INTEGER)	SELECT AVG(salary), MAX(salary) FROM Employee	SELECT avg(salary), max(salary) FROM Employee	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Show the id and name of the employee with maximum salary.	CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)	SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1	SELECT eid, name FROM Employee ORDER BY CAST(salary AS REAL) DESC LIMIT 1	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the name of employees with three lowest salaries.	CREATE TABLE Employee (name VARCHAR, salary VARCHAR)	SELECT name FROM Employee ORDER BY salary LIMIT 3	SELECT name FROM Employee ORDER BY CAST(salary AS REAL) ASC LIMIT 3	0,782608695652174	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show names for all employees with salary more than the average.	CREATE TABLE Employee (name VARCHAR, salary INTEGER)	SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)	SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 54), #fixes: 0, description: Unqualified reference 'salary' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL04 pos:(1, 18), #fixes: 0, description: Duplicate table alias 'Employee'. Table aliases should be unique.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 67), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the id and salary of Mark Young.	CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)	SELECT eid, salary FROM Employee WHERE name = 'Mark Young'	SELECT eid, salary FROM Employee WHERE name = 'Mark Young'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many flights do we have?	CREATE TABLE Flight (Id VARCHAR)	SELECT COUNT(*) FROM Flight	SELECT count(*) FROM Flight	0,8	True	[]
Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.	CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)	SELECT flno, origin, destination FROM Flight ORDER BY origin	SELECT flno, origin, destination FROM Flight ORDER BY origin ASC	0,9473684210526315	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all flight number from Los Angeles.	CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)	"SELECT flno FROM Flight WHERE origin = ""Los Angeles"""	SELECT flno FROM Flight WHERE origin = 'Los Angeles'	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show origins of all flights with destination Honolulu.	CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)	"SELECT origin FROM Flight WHERE destination = ""Honolulu"""	SELECT origin FROM Flight WHERE destination = 'Honolulu'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.	CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)	"SELECT departure_date, arrival_date FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""	SELECT departure_date, arrival_date FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'	0,7857142857142857	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show flight number for all flights with more than 2000 distance.	CREATE TABLE Flight (flno VARCHAR, distance INTEGER)	SELECT flno FROM Flight WHERE distance > 2000	SELECT flno FROM Flight WHERE distance > 2000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the average price for flights from Los Angeles to Honolulu.	CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)	"SELECT AVG(price) FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu"""	SELECT avg(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'	0,6923076923076923	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 24), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show origin and destination for flights with price higher than 300.	CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)	SELECT origin, destination FROM Flight WHERE price > 300	SELECT origin, destination FROM Flight WHERE price > 300	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the flight number and distance of the flight with maximum price.	CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)	SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1	SELECT flno, distance FROM Flight ORDER BY CAST(price AS REAL) DESC LIMIT 1	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the flight number of flights with three lowest distances.	CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)	SELECT flno FROM Flight ORDER BY distance LIMIT 3	SELECT flno FROM Flight ORDER BY CAST(distance AS REAL) ASC LIMIT 3	0,782608695652174	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the average distance and average price for flights from Los Angeles.	CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)	"SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = ""Los Angeles"""	SELECT avg(distance), avg(price) FROM Flight WHERE origin = 'Los Angeles'	0,6363636363636364	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 23), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all origins and the number of flights from each origin.	CREATE TABLE Flight (origin VARCHAR)	SELECT origin, COUNT(*) FROM Flight GROUP BY origin	SELECT origin, count(*) FROM Flight GROUP BY origin	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 16), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Show all destinations and the number of flights to each destination.	CREATE TABLE Flight (destination VARCHAR)	SELECT destination, COUNT(*) FROM Flight GROUP BY destination	SELECT destination, count(*) FROM Flight GROUP BY destination	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Which origin has most number of flights?	CREATE TABLE Flight (origin VARCHAR)	SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1	SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Which destination has least number of flights?	CREATE TABLE Flight (destination VARCHAR)	SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1	SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) ASC LIMIT 1	0,8695652173913043	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the aircraft name for the flight with number 99	CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = '99'	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show all flight numbers with aircraft Airbus A340-300.	CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)	"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ""Airbus A340-300"""	SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show aircraft names and number of flights for each aircraft.	CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)	SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid	SELECT T1.name, count(T2.aid) FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid = T2.aid GROUP BY T1.name	0,8823529411764706	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show names for all aircraft with at least two flights.	CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2	SELECT T1.name FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid = T2.aid GROUP BY T1.name HAVING count(*) >= 2	0,9	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many employees have certificate.	CREATE TABLE Certificate (eid VARCHAR)	SELECT COUNT(DISTINCT eid) FROM Certificate	SELECT count(DISTINCT eid) FROM Certificate	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show ids for all employees who don't have a certificate.	CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)	SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate	SELECT T1.eid FROM Employee AS T1 LEFT JOIN Certificate AS T2 ON T1.eid = T2.eid WHERE T2.eid IS NULL	0,4166666666666667	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 91), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show names for all aircrafts of which John Williams has certificates.	CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)	"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = ""John Williams"""	SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T1.name = 'John Williams'	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 104), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 78), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show names for all employees who have certificate of Boeing 737-800.	CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)	"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Boeing 737-800'	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 104), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 78), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.	CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)	"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Airbus A340-300"""	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Airbus A340-300'	0,84	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 200), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 233), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 180), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 237), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 78), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 224), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 104), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 272), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 170), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 150), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 263), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 195), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 242), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 285), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show names for all employees who do not have certificate of Boeing 737-800.	CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)	"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"""	SELECT T1.name FROM Employee AS T1 EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Boeing 737-800'	0,8936170212765957	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 125), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 116), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 53), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 120), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 36), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 146), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 168), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 155), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 78), #fixes: 1, description: Join clauses should be fully qualified.>>]
Show the name of aircraft which fewest people have its certificate.	CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY count(*) ASC LIMIT 1	0,9047619047619048	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 39), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 65), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.	CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5	SELECT T2.name, T2.distance FROM Certificate AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > 5000 GROUP BY T2.name, T2.distance HAVING count(*) >= 5	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 137), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 34), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 52), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 100), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
what is the salary and name of the employee who has the most number of aircraft certificates?	CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)	SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name, T2.salary FROM Certificate AS T1 JOIN Employee AS T2 ON T1.eid = T2.eid GROUP BY T1.eid, T2.name, T2.salary ORDER BY count(*) DESC LIMIT 1	0,8636363636363636	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 50), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 101), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 118), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?	CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name, T3.salary FROM Certificate AS T1 JOIN Employee AS T2 ON T1.eid = T2.eid JOIN Employee AS T3 ON T1.eid = T3.eid JOIN Aircraft AS T4 ON T1.aid = T4.aid WHERE T4.distance > 5000 GROUP BY T2.name, T3.salary ORDER BY count(*) DESC LIMIT 1	0,7868852459016393	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 163), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 176), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 128), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 124), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 204), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 154), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 213), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 89), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 50), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 133), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 55), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many allergies are there?	CREATE TABLE Allergy_type (allergy VARCHAR)	SELECT COUNT(DISTINCT allergy) FROM Allergy_type	SELECT count(*) FROM Allergy_type	0,7272727272727273	True	[]
How many different allergy types exist?	CREATE TABLE Allergy_type (allergytype VARCHAR)	SELECT COUNT(DISTINCT allergytype) FROM Allergy_type	SELECT count(DISTINCT allergytype) FROM Allergy_type	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all allergy types.	CREATE TABLE Allergy_type (allergytype VARCHAR)	SELECT DISTINCT allergytype FROM Allergy_type	SELECT allergytype FROM Allergy_type	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all allergies and their types.	CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)	SELECT allergy, allergytype FROM Allergy_type	SELECT allergy, allergytype FROM Allergy_type	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 34), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all allergies with type food.	CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)	"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = ""food"""	SELECT allergy FROM Allergy_type WHERE allergytype = 'food'	0,8421052631578947	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the type of allergy Cat?	CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)	"SELECT allergytype FROM Allergy_type WHERE allergy = ""Cat"""	SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many allergies have type animal?	CREATE TABLE Allergy_type (allergytype VARCHAR)	"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = ""animal"""	SELECT count(*) FROM Allergy_type WHERE allergytype = 'animal'	0,7777777777777778	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show all allergy types and the number of allergies in each type.	CREATE TABLE Allergy_type (allergytype VARCHAR)	SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype	SELECT allergytype, count(*) FROM Allergy_type GROUP BY allergytype	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Which allergy type has most number of allergies?	CREATE TABLE Allergy_type (allergytype VARCHAR)	SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1	SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Which allergy type has least number of allergies?	CREATE TABLE Allergy_type (allergytype VARCHAR)	SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1	SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1	0,8695652173913043	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many students are there?	CREATE TABLE Student (Id VARCHAR)	SELECT COUNT(*) FROM Student	SELECT count(*) FROM Student	0,8	True	[]
Show first name and last name for all students.	CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)	SELECT Fname, Lname FROM Student	SELECT Fname, Lname FROM Student	1,0	True	[]
How many different advisors are listed?	CREATE TABLE Student (advisor VARCHAR)	SELECT COUNT(DISTINCT advisor) FROM Student	SELECT count(DISTINCT advisor) FROM Student	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all majors.	CREATE TABLE Student (Major VARCHAR)	SELECT DISTINCT Major FROM Student	SELECT Major FROM Student	0,9090909090909091	True	[]
Show all cities where students live.	CREATE TABLE Student (city_code VARCHAR)	SELECT DISTINCT city_code FROM Student	SELECT city_code FROM Student	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show first name, last name, age for all female students. Their sex is F.	CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)	SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'	SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'	1,0	True	[]
Show student ids for all male students.	CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)	SELECT StuID FROM Student WHERE Sex = 'M'	SELECT StuID FROM Student WHERE Sex = 'M'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many students are age 18?	CREATE TABLE Student (age VARCHAR)	SELECT COUNT(*) FROM Student WHERE age = 18	SELECT count(*) FROM Student WHERE age = '18'	0,7777777777777778	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show all student ids who are older than 20.	CREATE TABLE Student (StuID VARCHAR, age INTEGER)	SELECT StuID FROM Student WHERE age > 20	SELECT StuID FROM Student WHERE age > 20	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
"Which city does the student whose last name is ""Kim"" live in?"	CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)	"SELECT city_code FROM Student WHERE LName = ""Kim"""	SELECT city_code FROM Student WHERE LName = 'Kim'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 37), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Who is the advisor of student with ID 1004?	CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)	SELECT Advisor FROM Student WHERE StuID = 1004	SELECT Advisor FROM Student WHERE StuID = '1004'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
How many students live in HKG or CHI?	CREATE TABLE Student (city_code VARCHAR)	"SELECT COUNT(*) FROM Student WHERE city_code = ""HKG"" OR city_code = ""CHI"""	SELECT count(*) FROM Student WHERE city_code IN ('HKG', 'CHI')	0,5714285714285714	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the minimum, average, and maximum age of all students.	CREATE TABLE Student (age INTEGER)	SELECT MIN(age), AVG(age), MAX(age) FROM Student	SELECT min(age), avg(age), max(age) FROM Student	0,5714285714285714	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 28), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 18), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the last name of the youngest student?	CREATE TABLE Student (LName VARCHAR, age INTEGER)	SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)	SELECT LName FROM Student ORDER BY age ASC LIMIT 1	0,5454545454545454	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the student id of the oldest student.	CREATE TABLE Student (StuID VARCHAR, age INTEGER)	SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)	SELECT StuID FROM Student ORDER BY age DESC LIMIT 1	0,5454545454545454	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 36), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show all majors and corresponding number of students.	CREATE TABLE Student (major VARCHAR)	SELECT major, COUNT(*) FROM Student GROUP BY major	SELECT major, count(*) FROM Student GROUP BY major	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 15), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 29), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Which major has most number of students?	CREATE TABLE Student (major VARCHAR)	SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1	SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all ages and corresponding number of students.	CREATE TABLE Student (age VARCHAR)	SELECT age, COUNT(*) FROM Student GROUP BY age	SELECT age, count(*) FROM Student GROUP BY age	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 13), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the average age for male and female students.	CREATE TABLE Student (sex VARCHAR, age INTEGER)	SELECT AVG(age), sex FROM Student GROUP BY sex	SELECT sex, avg(age) FROM Student GROUP BY sex	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 13), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all cities and corresponding number of students.	CREATE TABLE Student (city_code VARCHAR)	SELECT city_code, COUNT(*) FROM Student GROUP BY city_code	SELECT city_code, count(*) FROM Student GROUP BY city_code	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 19), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 33), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show all advisors and corresponding number of students.	CREATE TABLE Student (advisor VARCHAR)	SELECT advisor, COUNT(*) FROM Student GROUP BY advisor	SELECT advisor, count(*) FROM Student GROUP BY advisor	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Which advisor has most number of students?	CREATE TABLE Student (advisor VARCHAR)	SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1	SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many students have cat allergies?	CREATE TABLE Has_allergy (Allergy VARCHAR)	"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = ""Cat"""	SELECT count(*) FROM Has_allergy WHERE Allergy = 'cat'	0,7777777777777778	True	[]
Show all student IDs who have at least two allergies.	CREATE TABLE Has_allergy (StuID VARCHAR)	SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2	SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2	0,9090909090909091	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 19), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 8), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What are the student ids of students who don't have any allergies?	CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)	SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy	SELECT T1.StuID FROM Student AS T1 LEFT JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.StuID IS NULL	0,4166666666666667	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many female students have milk or egg allergies?	CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)	"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = ""F"" AND T1.allergy = ""Milk"" OR T1.allergy = ""Eggs"""	SELECT count(DISTINCT T1.StuID) FROM Student AS T1 JOIN has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.sex = 'F' AND T2.allergy IN ('milk', 'egg')	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 52), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 124), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many students have a food allergy?	CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)	"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = ""food"""	SELECT count(DISTINCT T1.allergy) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = 'food'	0,8571428571428571	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 118), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 101), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 58), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Which allergy has most number of students affected?	CREATE TABLE Has_allergy (Allergy VARCHAR)	SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1	SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	True	[]
Show all allergies with number of students affected.	CREATE TABLE Has_allergy (Allergy VARCHAR)	SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy	SELECT Allergy, count(*) FROM Has_allergy GROUP BY Allergy	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Show all allergy type with number of students affected.	CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)	SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype	SELECT T2.allergytype, count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 24), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 86), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 56), #fixes: 1, description: Join clauses should be fully qualified.>>]
Find the last name and age of the student who has allergy to both milk and cat.	CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)	"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"	SELECT Lname, age FROM Has_allergy WHERE Allergy = 'milk' INTERSECT SELECT Lname, age FROM Has_allergy WHERE Allergy = 'cat'	0,6428571428571429	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 59), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.	CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)	"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = ""Lisa"" ORDER BY T1.Allergy"	SELECT T2.allergy, T3.allergytype FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_type AS T3 ON T2.allergy = T3.allergy WHERE T1.Fname = 'Lisa' ORDER BY T2.allergy	0,7391304347826086	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 100), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 105), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 160), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 143), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 130), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 187), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 54), #fixes: 1, description: Join clauses should be fully qualified.>>]
Find the first name and gender of the student who has allergy to milk but not cat.	CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)	"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")"	SELECT fname, sex FROM Student WHERE Allergy = 'milk' EXCEPT SELECT fname, sex FROM Student WHERE Allergy = 'cat'	0,7142857142857143	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 55), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 24), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Find the average age of the students who have allergies with food and animal types.	CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)	"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""animal"")"	SELECT avg(T1.age) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.allergytype IN ('food', 'animal')	0,6808510638297872	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 85), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 90), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 39), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 79), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 145), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the first and last name of the students who do not have any food type allergy.	CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)	"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"	SELECT T1.fname, T1.lname FROM Student AS T1 LEFT JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID LEFT JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.allergytype != 'food' OR T3.allergytype IS NULL	0,5882352941176471	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 145), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 190), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 162), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 91), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the number of male (sex is 'M') students who have some food type allery.	CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)	"SELECT COUNT(*) FROM Student WHERE sex = ""M"" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")"	SELECT count(DISTINCT T1.StuID) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.Allergy JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.sex = 'M' AND T3.allergytype = 'food'	0,625	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 130), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 52), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 177), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 160), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 100), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 143), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 105), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the different first names and cities of the students who have allergy to milk or cat.	CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)	"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = ""Milk"" OR T2.Allergy = ""Cat"""	SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy IN ('milk', 'cat')	0,8571428571428571	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 59), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 45), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the number of students who are older than 18 and do not have allergy to either food or animal.	CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)	"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" OR T2.allergytype = ""animal"")"	SELECT count(DISTINCT T1.StuID) FROM Student AS T1 LEFT JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID LEFT JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE CAST(T1.age AS REAL) > 18 AND (T3.allergytype != 'food' OR T3.allergytype IS NULL) AND (T3.allergytype != 'animal' OR T3.allergytype IS NULL)	0,5806451612903226	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 138), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 256), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 86), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP03 pos:(1, 165), #fixes: 1, description: Function names must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 199), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 151), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 227), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 173), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 286), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the first name and major of the students who are not allegry to soy.	CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)	"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Soy"")"	SELECT T1.fname, T1.major FROM Student AS T1 LEFT JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy != 'soy' OR T2.Allergy IS NULL	0,3684210526315789	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 129), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 91), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
A list of the top 5 countries by number of invoices. List country name and number of invoices.	CREATE TABLE invoices (billing_country VARCHAR)	SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5	SELECT billing_country, count(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 25), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.	CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)	SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8	SELECT billing_country, sum(total) FROM invoices GROUP BY billing_country ORDER BY sum(total) DESC LIMIT 8	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 25), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
A list of the top 10 countries by average invoice size. List country name and average invoice size.	CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)	SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10	SELECT billing_country, avg(total) FROM invoices GROUP BY billing_country ORDER BY avg(total) DESC LIMIT 10	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 25), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Find out 5 customers who most recently purchased something. List customers' first and last name.	CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)	SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5	SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.invoice_date DESC LIMIT 5	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 91), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 57), #fixes: 1, description: Join clauses should be fully qualified.>>]
Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.	CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)	SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10	SELECT T1.first_name, T1.last_name, count(T2.customer_id) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.id, T1.first_name, T1.last_name ORDER BY count(T2.customer_id) DESC LIMIT 10	0,9545454545454546	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 188), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 37), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 64), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 138), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 145), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 80), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 160), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.	CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)	SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10	SELECT T1.first_name, T1.last_name, sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.id, T1.first_name, T1.last_name ORDER BY sum(T2.total) DESC LIMIT 10	0,9545454545454546	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 37), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 137), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 72), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 178), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 152), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 130), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the top 5 genres by number of tracks. List genres name and total tracks.	CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)	SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5	SELECT T2.name, count(T1.genre_id) FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id GROUP BY T2.name ORDER BY count(T1.genre_id) DESC LIMIT 5	0,8095238095238095	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 54), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 107), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 130), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List every album's title.	CREATE TABLE albums (title VARCHAR)	SELECT title FROM albums	SELECT title FROM albums	1,0	True	[]
List every album ordered by album title in ascending order.	CREATE TABLE albums (title VARCHAR)	SELECT title FROM albums ORDER BY title	SELECT title FROM albums ORDER BY title ASC	0,9333333333333333	True	[]
List every album whose title starts with A in alphabetical order.	CREATE TABLE albums (title VARCHAR)	SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title	SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC	0,9523809523809523	True	[]
List the customers first and last name of 10 least expensive invoices.	CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)	SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10	SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id LIMIT 10	0,918918918918919	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 83), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 57), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 91), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List total amount of  invoice from Chicago, IL.	CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)	"SELECT SUM(total) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""	SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'	0,75	True	[]
List the number of invoices from Chicago, IL.	CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)	"SELECT COUNT(*) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL"""	SELECT count(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'	0,75	True	[]
List the number of invoices from the US, grouped by state.	CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)	"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state"	SELECT billing_state, count(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 23), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
List the state in the US with the most invoices.	CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)	"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"	SELECT billing_state FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY count(*) DESC LIMIT 1	0,875	True	[]
List the number of invoices and the invoice total from California.	CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)	"SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = ""CA"""	SELECT count(*), sum(total) FROM invoices WHERE billing_state = 'CA'	0,7	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 8), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 18), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
List Aerosmith's albums.	CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)	"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Aerosmith"""	SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name = 'Aerosmith'	0,7058823529411765	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many albums does Billy Cobham has?	CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)	"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Billy Cobham"""	SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 35), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 57), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 32), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Eduardo Martins is a customer at which company?	CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins"""	SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'	0,8333333333333334	True	[]
What is Astrid Gruber's email and phone number?	CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT email, phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"""	SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'	0,8461538461538461	True	[]
How many customers live in Prague city?	CREATE TABLE customers (city VARCHAR)	"SELECT COUNT(*) FROM customers WHERE city = ""Prague"""	SELECT count(*) FROM customers WHERE city = 'Prague'	0,7777777777777778	True	[]
How many customers in state of CA?	CREATE TABLE customers (state VARCHAR)	"SELECT COUNT(*) FROM customers WHERE state = ""CA"""	SELECT count(*) FROM customers WHERE state = 'CA'	0,7777777777777778	True	[]
What country does Roberto Almeida live?	CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"""	SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'	0,8333333333333334	True	[]
List the name of albums that are released by aritist whose name has 'Led'	CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)	SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'	SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 36), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many customers does Steve Johnson support?	CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)	"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson"""	SELECT count(T2.support_rep_id) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson'	0,85	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 54), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 141), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 113), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 89), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 38), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 81), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the title, phone and hire date of Nancy Edwards?	CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT title, phone, hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""	SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'	0,8571428571428571	True	[]
find the full name of employees who report to Nancy Edwards?	CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)	"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = ""Nancy"" AND T1.last_name = ""Edwards"""	SELECT first_name, last_name FROM employees WHERE reports_to IN (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards')	0,4	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 122), #fixes: 0, description: Unqualified reference 'last_name' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 97), #fixes: 0, description: Unqualified reference 'first_name' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule RF02 pos:(1, 73), #fixes: 0, description: Unqualified reference 'id' found in select with more than one referenced table/view.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL04 pos:(1, 35), #fixes: 0, description: Duplicate table alias 'employees'. Table aliases should be unique.>>]
What is the address of employee Nancy Edwards?	CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""	SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'	0,8333333333333334	True	[]
Find the full name of employee who supported the most number of customers.	CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)	SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id, T1.first_name, T1.last_name ORDER BY count(*) DESC LIMIT 1	0,9545454545454546	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 141), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 62), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 57), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many employees are living in Canada?	CREATE TABLE employees (country VARCHAR)	"SELECT COUNT(*) FROM employees WHERE country = ""Canada"""	SELECT count(*) FROM employees WHERE country = 'Canada'	0,7777777777777778	True	[]
What is employee Nancy Edwards's phone number?	CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"""	SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'	0,8333333333333334	True	[]
Who is the youngest employee in the company? List employee's first and last name.	CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)	SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1	SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1	1,0	True	[]
List top 10 employee work longest in the company. List employee's first and last name.	CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)	SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10	SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10	0,9565217391304348	True	[]
Find the number of employees whose title is IT Staff from each city?	CREATE TABLE employees (city VARCHAR, title VARCHAR)	SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city	SELECT city, count(*) FROM employees WHERE title = 'IT Staff' GROUP BY city	0,9230769230769231	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 14), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.	CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)	SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1	SELECT T1.first_name, T1.last_name, count(T2.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to GROUP BY T1.id, T1.first_name, T1.last_name ORDER BY count(T2.reports_to) DESC LIMIT 1	0,7619047619047619	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 37), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 187), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 26), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 79), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 137), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 144), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 46), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 159), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many orders does Lucas Mancini has?	CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""	SELECT count(T2.customer_id) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'	0,85	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 134), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>]
What is the total amount of money spent by Lucas Mancini?	CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini"""	SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'	0,85	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 43), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 126), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 98), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 48), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List all media types.	CREATE TABLE media_types (name VARCHAR)	SELECT name FROM media_types	SELECT name FROM media_types	1,0	True	[]
List all different genre types.	CREATE TABLE genres (name VARCHAR)	SELECT DISTINCT name FROM genres	SELECT name FROM genres	0,9090909090909091	True	[]
List the name of all playlist.	CREATE TABLE playlists (name VARCHAR)	SELECT name FROM playlists	SELECT name FROM playlists	1,0	True	[]
Who is the composer of track Fast As a Shark?	CREATE TABLE tracks (composer VARCHAR, name VARCHAR)	"SELECT composer FROM tracks WHERE name = ""Fast As a Shark"""	SELECT composer FROM tracks WHERE name = 'Fast As a Shark'	0,8333333333333334	True	[]
How long does track Fast As a Shark has?	CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)	"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"""	SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'	0,8333333333333334	True	[]
What is the name of tracks whose genre is Rock?	CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)	"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"""	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock'	0,9411764705882353	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is title of album which track Balls to the Wall belongs to?	CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)	"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = ""Balls to the Wall"""	SELECT T2.title FROM tracks AS T1 JOIN albums AS T2 ON T1.genre_id = T2.id WHERE T1.name = 'Balls to the Wall'	0,7	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 35), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 73), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List name of all tracks in Balls to the Wall.	CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)	"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall"""	SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.genre_id = T2.id WHERE T2.title = 'Balls to the Wall'	0,7	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 72), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List title of albums have the number of tracks greater than 10.	CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)	SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10	SELECT T2.title FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id GROUP BY T2.title HAVING count(*) > 10	0,8	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 73), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 22), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 35), #fixes: 1, description: Join clauses should be fully qualified.>>]
List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.	CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)	"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" AND T3.name = ""MPEG audio file"""	SELECT T3.name FROM genres AS T1 JOIN tracks AS T3 ON T1.id = T3.genre_id JOIN media_types AS T4 ON T3.media_type_id = T4.id WHERE T1.name = 'Rock' AND T4.name = 'MPEG audio file'	0,6923076923076923	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 135), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 80), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 104), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 75), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 156), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 123), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the name of tracks belongs to genre Rock or media type is MPEG audio file.	CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)	"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" OR T3.name = ""MPEG audio file"""	SELECT T3.name FROM genres AS T1 JOIN tracks AS T3 ON T1.id = T3.genre_id WHERE T1.name = 'Rock' UNION SELECT T3.name FROM media_types AS T4 JOIN tracks AS T3 ON T4.id = T3.media_type_id WHERE T4.name = 'MPEG audio file'	0,6538461538461539	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 174), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 166), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 98), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 124), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 197), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 142), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM02 pos:(1, 98), #fixes: 1, description: 'UNION [DISTINCT|ALL]' is preferred over just 'UNION'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 147), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the name of tracks belongs to genre Rock or genre Jazz.	CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)	"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"" OR T1.name = ""Jazz"""	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name IN ('Rock', 'Jazz')	0,8421052631578947	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 66), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the name of all tracks in the playlists of Movies.	CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)	"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = ""Movies"""	SELECT T3.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id JOIN tracks AS T3 ON T2.track_id = T3.id WHERE T1.name = 'Movies'	0,9523809523809523	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 90), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 140), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 37), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 95), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List the name of playlist which has number of tracks greater than 100.	CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)	SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100	SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T1.playlist_id = T2.id GROUP BY T2.name HAVING count(*) > 100	0,95	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 48), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 43), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 102), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
List all tracks bought by customer Daan Peeters.	CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)	"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters"""	SELECT T3.name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T4 ON T2.id = T4.invoice_id JOIN tracks AS T3 ON T4.track_id = T3.id WHERE T1.first_name = 'Daan' AND T1.last_name = 'Peeters'	0,6785714285714286	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 171), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 83), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 210), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 37), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 183), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 71), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 88), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 63), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 122), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 157), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 138), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 133), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How much is the track Fast As a Shark?	CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)	"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"""	SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'	0,8333333333333334	True	[]
Find the name of tracks which are in Movies playlist but not in music playlist.	CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'	SELECT T3.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id JOIN tracks AS T3 ON T2.track_id = T3.id WHERE T1.name = 'Movies' EXCEPT SELECT T3.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id JOIN tracks AS T3 ON T2.track_id = T3.id WHERE T1.name = 'Music'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 252), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 232), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 240), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 204), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 140), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 183), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 95), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 173), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 276), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 290), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 257), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 156), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 199), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 302), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 37), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 90), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Find the name of tracks which are in both Movies and music playlists.	CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'	SELECT T3.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id JOIN tracks AS T3 ON T2.track_id = T3.id WHERE T1.name = 'Movies' INTERSECT SELECT T3.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id JOIN tracks AS T3 ON T2.track_id = T3.id WHERE T1.name = 'Music'	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 140), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 255), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 243), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 260), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 186), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule LT11 pos:(1, 156), #fixes: 1, description: Set operators should always have a line break both before and after.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 235), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 114), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 42), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 70), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 305), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 207), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 90), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 202), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 279), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 128), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 176), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 95), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 293), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 37), #fixes: 1, description: Join clauses should be fully qualified.>>]
Find number of tracks in each genre?	CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)	SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name	SELECT T2.name, count(*) FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id GROUP BY T2.name	0,7647058823529411	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 17), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 49), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 97), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 44), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many editors are there?	CREATE TABLE editor (Id VARCHAR)	SELECT COUNT(*) FROM editor	SELECT count(*) FROM editor	0,8	True	[]
List the names of editors in ascending order of age.	CREATE TABLE editor (Name VARCHAR, Age VARCHAR)	SELECT Name FROM editor ORDER BY Age	SELECT Name FROM editor ORDER BY CAST(Age AS REAL) ASC	0,7368421052631579	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the names and ages of editors?	CREATE TABLE editor (Name VARCHAR, Age VARCHAR)	SELECT Name, Age FROM editor	SELECT Name, Age FROM editor	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 23), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the names of editors who are older than 25.	CREATE TABLE editor (Name VARCHAR, Age INTEGER)	SELECT Name FROM editor WHERE Age > 25	SELECT Name FROM editor WHERE Age > 25	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the names of editors of age either 24 or 25.	CREATE TABLE editor (Name VARCHAR, Age VARCHAR)	SELECT Name FROM editor WHERE Age = 24 OR Age = 25	SELECT Name FROM editor WHERE Age IN ('24', '25')	0,6666666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What is the name of the youngest editor?	CREATE TABLE editor (Name VARCHAR, Age VARCHAR)	SELECT Name FROM editor ORDER BY Age LIMIT 1	SELECT Name FROM editor ORDER BY CAST(Age AS REAL) ASC LIMIT 1	0,782608695652174	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 18), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
What are the different ages of editors? Show each age along with the number of editors of that age.	CREATE TABLE editor (Age VARCHAR)	SELECT Age, COUNT(*) FROM editor GROUP BY Age	SELECT Age, count(*) FROM editor GROUP BY Age	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 13), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Please show the most common age of editors.	CREATE TABLE editor (Age VARCHAR)	SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1	SELECT Age FROM editor GROUP BY Age ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the distinct themes of journals.	CREATE TABLE journal (Theme VARCHAR)	SELECT DISTINCT Theme FROM journal	SELECT DISTINCT Theme FROM journal	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 28), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the names of editors and the theme of journals for which they serve on committees.	CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)	SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID	SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 60), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 104), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 109), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 129), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 55), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 31), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 79), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 145), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.	CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)	SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme	SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC	0,9777777777777777	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 87), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 112), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 102), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 63), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 153), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 137), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 117), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the names of editors that are on the committee of journals with sales bigger than 3000.	CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)	SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000	SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 45), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 94), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 135), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 50), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
Show the id, name of each editor and the number of journal committees they are on.	CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)	SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id	SELECT T1.editor_id, T1.Name, count(T2.Editor_ID) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id, T1.Name	0,9444444444444444	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 40), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 104), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 141), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 119), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 69), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 155), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 31), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 25), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the names of editors that are on at least two journal committees.	CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)	SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2	SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING count(*) >= 2	0,95	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 69), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 39), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 34), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 84), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the names of editors that are not on any journal committee.	CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)	SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)	SELECT T1.Name FROM editor AS T1 LEFT JOIN journal_committee AS T2 ON T1.editor_id = T2.editor_id WHERE T2.editor_id IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 74), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 21), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 89), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 108), #fixes: 1, description: Unquoted identifiers must be consistently capitalised.>>]
List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.	CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)	SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID	SELECT T2.date, T2.theme, T2.sales FROM journal_committee AS T1 RIGHT JOIN journal AS T2 ON T1.journal_ID = T2.journal_ID WHERE T1.journal_ID IS NULL	0,65	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 112), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 30), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CV08 pos:(1, 65), #fixes: 0, description: Use 'LEFT JOIN' instead of 'RIGHT JOIN'.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 132), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
What is the average sales of the journals that have an editor whose work type is 'Photo'?	CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)	SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'	SELECT avg(T2.sales) FROM journal_committee AS T1 JOIN journal AS T2 ON T1.journal_ID = T2.journal_ID WHERE T1.work_type = 'Photo'	0,8823529411764706	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 15), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 76), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 27), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 112), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 92), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many accounts do we have?	CREATE TABLE Accounts (Id VARCHAR)	SELECT COUNT(*) FROM Accounts	SELECT count(*) FROM Accounts	0,8	True	[]
Show ids, customer ids, names for all accounts.	CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)	SELECT account_id, customer_id, account_name FROM Accounts	SELECT account_id, customer_id, account_name FROM Accounts	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 51), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show other account details for account with name 338.	CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)	"SELECT other_account_details FROM Accounts WHERE account_name = ""338"""	SELECT other_account_details FROM Accounts WHERE account_name = '338'	0,8888888888888888	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the first name, last name, and phone of the customer with account name 162?	CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)	"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""162"""	SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name = '162'	0,7368421052631579	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 94), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 78), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 158), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 137), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 120), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many accounts does the customer with first name Art and last name Turcotte have?	CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)	"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte"""	SELECT count(T2.customer_id) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = 'Art' AND T1.customer_last_name = 'Turcotte'	0,75	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 51), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 150), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 56), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 77), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 115), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 94), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show all customer ids and the number of accounts for each customer.	CREATE TABLE Accounts (customer_id VARCHAR)	SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id	SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id	0,875	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
Show the customer id and number of accounts with most accounts.	CREATE TABLE Accounts (customer_id VARCHAR)	SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1	SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1	0,9166666666666666	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AL03 pos:(1, 21), #fixes: 0, description: Column expression without alias. Use explicit `AS` clause.>>]
What is the customer first, last name and id with least number of accounts.	CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)	SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1	SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id, T1.customer_first_name, T1.customer_last_name ORDER BY count(*) ASC LIMIT 1	0,8372093023255814	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 75), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 198), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 96), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 134), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 158), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 91), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 117), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 58), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 174), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the number of all customers without an account.	CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)	SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)	SELECT count(T1.customer_id) FROM Customers AS T1 LEFT JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IS NULL	0,3448275862068966	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 99), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 120), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 17), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 61), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show the first names and last names of customers without any account.	CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)	SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id	SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 LEFT JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IS NULL	0,8108108108108109	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 85), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 11), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 59), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 144), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 106), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 123), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 35), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
Show distinct first and last names for all customers with an account.	CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)	SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id	SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 89), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 110), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 20), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule AM05 pos:(1, 84), #fixes: 1, description: Join clauses should be fully qualified.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 127), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>, <bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 68), #fixes: 1, description: Unquoted identifiers must be consistently upper case.>>]
How many customers have an account?	CREATE TABLE Accounts (customer_id VARCHAR)	SELECT COUNT(DISTINCT customer_id) FROM Accounts	SELECT count(DISTINCT customer_id) FROM Accounts	0,8333333333333334	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 41), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
How many customers do we have?	CREATE TABLE Customers (Id VARCHAR)	SELECT COUNT(*) FROM Customers	SELECT count(*) FROM Customers	0,8	True	[]
Show ids, first names, last names, and phones for all customers.	CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)	SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers	SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers	1,0	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 82), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
What is the phone and email for customer with first name Aniyah and last name Feest?	CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)	"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = ""Aniyah"" AND customer_last_name = ""Feest"""	SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'	0,8461538461538461	False	[<bound method SQLLintError.rule_code of <SQLLintError: rule CP02 pos:(1, 44), #fixes: 1, description: Unquoted identifiers must be consistently lower case.>>]
